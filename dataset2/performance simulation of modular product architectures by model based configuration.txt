Produktentwicklung und Konstruktionstechnik 21
Florian M. Dambietz
Performance 
simulation of modular 
product architectures 
by model-based 
configurationProduktentwicklung und Konstruktionstechnik
Band 21
Reihe herausgegeben vom
Institut für Produktentwicklung und Konstruktionstechnik (PKT) der Technischen
Universität Hamburg (TUHH), Hamburg, Deutschland unter der Leitung von
Prof. Dr.-Ing. Dieter KrauseIn der Buchreihe erscheinen die am Institut von Prof. Dr.-Ing. Dieter Krause erfolgre￾ich betreuten abgeschlossenen Dissertationsschriften. Die Themen umfassen vorwieg￾end Arbeiten aus den beiden Forschungsschwerpunkten des Institutes, die methodische 
Produktentwicklung, insbesondere Themen zum Varianten- und Komplexitätsmangement 
sowie Methodenforschung für die Produktentwicklung im Allgemeinen und dem zweiten 
Forschungsthema der Strukturanalyse und Versuchstechnik mit Themen aus dem 
Bereich der Auslegung von Hochleistungswerkstoffen, wie CFK, Sandwich oder auch 
Keramik, sowie der Weiterentwicklung von Simulationsmethoden und Versuchstechnik 
für Spezialanwendungen. Bücher zu weiteren interessanten Themen oder Tagungsbände 
mit wissenschaftlichem oder mehr anwendungsorientiertem Charakter ergänzen die 
Buchreihe.
Weitere Bände in der Reihe http://www.springer.com/series/16305Florian M. Dambietz
Performance 
simulation of modular 
product architectures 
by model-based 
confgurationFlorian M. Dambietz
Produktentwicklung und Konstruktionstechnik 
Technische Universität Hamburg 
Hamburg, Germany
ISSN 2629-2157 ISSN 2662-7485 (electronic)
Produktentwicklung und Konstruktionstechnik 
ISBN 978-3-662-64232-0 ISBN 978-3-662-64233-7 (eBook)
https://doi.org/10.1007/978-3-662-64233-7
© The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer-Verlag GmbH, DE, part 
of Springer Nature 2022
This work is subject to copyright. All rights are solely and exclusively licensed by the Publisher, whether 
the whole or part of the material is concerned, specifcally the rights of translation, reprinting, reuse 
of illustrations, recitation, broadcasting, reproduction on microflms or in any other physical way, and 
transmission or information storage and retrieval, electronic adaptation, computer software, or by similar or 
dissimilar methodology now known or hereafter developed.
The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication does 
not imply, even in the absence of a specifc statement, that such names are exempt from the relevant protective 
laws and regulations and therefore free for general use.
The publisher, the authors and the editors are safe to assume that the advice and information in this book 
are believed to be true and accurate at the date of publication. Neither the publisher nor the authors or the 
editors give a warranty, expressed or implied, with respect to the material contained herein or for any errors 
or omissions that may have been made. The publisher remains neutral with regard to jurisdictional claims in 
published maps and institutional affliations.
Planung/Lektorat: Alexander Gruen
This Springer Vieweg imprint is published by the registered company Springer-Verlag GmbH, DE part of 
Springer Nature.
The registered company address is: Heidelberger Platz 3, 14197 Berlin, GermanyPerformance simulation of modular product architectures 
by model-based configuration 
Vom Promotionsausschuss der 
Technischen Universität Hamburg 
zur Erlangung des akademischen Grades 
Doktor-Ingenieur (Dr.-Ing.) 
genehmigte Dissertation 
von 
Florian M. Dambietz 
aus 
Immenstadt im Allgäu 
2021 
 VI 
1. Gutachter: Prof. Dr.-Ing. Dieter Krause 
2. Gutachter: Prof. Dr.-Ing Peter Hoffmann 
Tag der mündlichen Prüfung: 22. Juli 2021 
 Vorwort 
Diese Dissertation ist das Ergebnis von gut drei Jahren spannender Arbeit am Institut für 
Produktentwicklung und Konstruktionstechnik der TU Hamburg und in Kooperation mit 
der ERLAS Erlanger Lasertechnik GmbH. In dieser Zeit konnte ich mein Wissen maßgeb￾lich erweitern und eine ganze Reihe von wertvollen Erfahrungen machen, die ich für un￾glaublich wertvoll halte. Sehr herzlich möchte ich an dieser Stelle meinen Kollegen, Pro￾jektpartnern, Studierenden, Familie und Freunden für ihre Unterstützung danken. 
Mein erster Dank geht an meinen Doktorvater Herrn Professor Dr.-Ing. Dieter Krause, der 
von Anfang an großes Vertrauen in mich gesetzt hat und mir die bestmögliche Betreuung 
hat zukommen lassen. Als Mentor und Diskussionspartner hatte er stets ein offenes Ohr 
und außerordentlich konstruktive Ratschläge. Ich habe die Zeit am Institut stets sehr als 
Bereicherung meines Lebens erachtet. 
Ich bedanke mich auch bei meinem Zweitprüfer Herrn Professor Dr.-Ing. Peter Hoffmann. 
Er hat mir das Ziel der Promotion überhaupt erst ermöglicht und hat mir alle Arten von 
Freiheiten und Unterstützungen zugestanden, um dieses Vorhaben auch im Rahmen die￾ser Zeit umzusetzen. Herrn Professor Dr. Ralf God danke ich für den Prüfungsvorsitz. 
Ganz maßgeblich war meine Promotionszeit auch durch die vielen wertvollen und über￾aus angenehmen Stunden mit den Kollegen am Institut geprägt, welche mir mittlerweile 
als gute Freunde ans Herz gewachsen sind. Die Zusammenarbeit und das konstruktive 
Arbeiten an gemeinsamen Zielen sind ganz besondere Erfahrungen, die ich nie vergessen 
möchte. Einige Kollegen möchte ich hier besonders hervorheben. Erik Greve und 
Christoph Rennpferdt waren mir immer wertvolle Gesprächspartner in allen Belangen. 
Großer Dank gilt auch Lea Schwede, Michael Hanna und Fabian Laukotka, die sowohl 
menschlich als auch fachlich eine große Bereicherung in den vergangenen Jahren waren. 
Nicht zuletzt gilt mein Dank Juliane Kuhl, welche mich vor allem in zeitkritischen Momen￾ten immer äußerst zuverlässig unterstützt hat. 
Abschließend geht mein größter Dank an meine Familie. An meine Eltern, die schon im￾mer das Talent besessen haben, mich an den richtigen Stellen zu unterstützen. Von 
Ingenieur zu Ingenieur konnte ich mich jederzeit auf Rat und Tat ihrerseits verlassen. 
Ganz zum Schluss geht mein tiefster Dank an meine Frau Johanna, die mir immer den 
Rücken freihält, mich in meinen Plänen bestärkt und ohne zu zögern jeden Weg an 
meiner Seite durchs Leben beschreitet. 
Florian M. DambietzVIII 
Zusammenfassung 
Im Zuge der Globalisierung sind produzierende Unternehmen einem kontinuierlich an￾wachsenden Wettbewerbsdruck ausgesetzt. Aufgrund dessen sehen sich viele Marktak￾teure zu einer intensivierten Spezialisierung gezwungen, um auf kundenindividuelle An￾forderungen eingehen zu können. Gleichzeitig ist ein hohes Maß an Standardisierung er￾forderlich, um den hohen Kostendruck gerecht zu werden. Diese lässt jedoch die gefor￾derte Variantenvielfalt nicht zu, sodass das interne Varianzmanagement eine Kernauf￾gabe zur Sicherstellung der Wettbewerbsfähigkeit darstellt. Einen möglichen Lösungsan￾satz zur Bewältigung dieser Herausforderung bietet der Ansatz der Modularisierung. Hier 
steht die Reduzierung der internen Vielfalt bei einer gleichzeitigen Bewahrung der exter￾nen Vielfalt im Vordergrund. Im Rahmen der Modularisierung werden stets unterneh￾mensindividuelle Baukastensysteme mit dem dazugehörigen Regelwerk entwickelt, um 
flexibel und dynamisch auf Kundenanfragen reagieren zu können. Hier wird allerdings 
nicht konkret ein Baukasten definiert, vielmehr werden verschiedene Alternativen gene￾riert. Die Entscheidung, welcher Baukasten schlussendlich implementiert wird, fällt meist 
aufgrund einiger weniger Einflussfaktoren sowie maßgeblich durch Expertenentschei￾dungen. An dieser Stelle setzt die vorliegende Arbeit an. Um ein quantifizierbares und 
ganzheitliches Kriterium zur Unterstützung der Auswahl modularer Baukastensysteme zu 
bieten, wird eine multifaktorielle Simulation eingesetzt. Einer der maßgeblichen Aspekte 
derer ist die beidseitige Inbezugnahme von sowohl Kunden- als auch Unternehmensper￾spektive. Dies wird v.a. durch die Verwendung eines dynamischen Produktkonfigurati￾onssystems ermöglicht. Als Schnittstelle zur Übersetzung der Kundenperspektive in die 
Unternehmensperspektive erlaubt dieses einen intuitiven Transfer des im Rahmen der 
Modularisierung explizierten Wissens gegenüber dem Kunden. Durch eine entspre￾chende Priorisierung verschiedener Einflussfaktoren, wie z.B. Kosten oder Lieferzeit, kön￾nen Kunde und Unternehmen die endgültige Determinierung der konfigurierten Produkt￾variante beeinflussen. Um die zugrundeliegenden, teils komplexen Produktarchitekturen 
datentechnisch konsistent und pflegbar zu halten, wird zusätzlich der Einsatz einer mo￾dellbasierten Datenstruktur aufgezeigt. Die Verwendung von Konzepten des Model-Ba￾sed Systems-Engineering (MBSE) hilft dabei, die vielschichtigen Zusammenhänge des 
Modulbaukastens in einer konsistenten, maschinenlesbaren Form auszudrücken. Somit 
kann das Konfigurationssystem produktunabhängig auf die Ontologie der zugrundelie￾genden Datenstruktur zugreifen. Für die Baukastensimulation wird dieses Konfigurati￾onssystem rekursiv für mehrere Kundenanfragen und alternative Baukästen eingesetzt, 
um mittels eines geometrisch-mathematischen Algorithmus ein multi-dimensionales 
Entscheidungskriterium zur der Baukastenperformance zu generieren. Dieses kann an￾schließend graphisch in einer Heatmap aufgezeigt werden. In der vorliegenden Arbeit 
wird die entwickelte Simulation zuerst anhand eines einfachen Erklärbeispiels, einem 
medizinischen Stent zur Behandlung von Gefäßaussackungen (Aneurysmen) beschrieben 
und detailliert erklärt. Anschließend wird die Simulation im Rahmen einer Case Study bei 
einem Hersteller für Lasertechnik-Sondermaschinen angewendet, verifiziert und vali￾diert. Table of Content 
Vorwort ....................................................................................................... VII
Zusammenfassung ...................................................................................... VIII
Table of Content ........................................................................................... IX
List of Abbreviations .................................................................................... XII
List of Symbols ........................................................................................... XIV
1 Introduction ............................................................................................. 1
1.1 Outset point .......................................................................................... 1
1.2 Objective of the contribution ................................................................ 2
1.3 Thesis structure ..................................................................................... 4
2 Challenges in modular product architecture alternative decisions ........... 7
2.1 Research environment .......................................................................... 7
2.2 Research questions and research hypothesis ..................................... 11
3 State of the art ....................................................................................... 17
3.1 Terminology and Taxonomy................................................................ 18
3.2 Development of modular product architectures ................................ 20
3.3 Performance assessment of modular product architectures ............. 21
3.4 Modular kits within business processes.............................................. 31
3.5 The Impact Model: analysis of effects and impacts of MPAs ............. 32
3.6 Model-Based Systems-Engineering (MBSE) ........................................ 33
3.6.1 Fundamentals of Model-Based Systems Engineering ............... 35
3.6.2 Consistency enhancement using MBSE .................................... 37
3.6.3 Single-source of truth: MBSE vs. PLM ....................................... 39
3.6.4 MBSE concepts supporting the development of modular product 
architectures ............................................................................. 41
3.7 Configuration systems ........................................................................ 43
3.7.1 Types of configuration systems ................................................ 44
3.7.2 Approaches to multi-dimensional configuration algorithms .... 46
3.7.3 The Dijkstra-algorithm as basis for the configuration system .. 48X 
3.7.4 The Hyperspace as a basis for the geometric configuration 
algorithm ................................................................................... 49
3.8 Definition of the considered demand for further research ................ 49
3.8.1 Bibliographic analysis ................................................................ 49
3.8.2 Definition of research requirements......................................... 51
4 Simulation approach for the performance analysis of modular product 
architectures ..................................................................................... 59
4.1 Overview to the correlation of the simulation and configuration 
methods .............................................................................................. 59
4.2 Definition of the Flow Diverter explanation example ......................... 62
4.3 The configuration system as element of the simulation method ....... 64
4.3.1 MPA data basis structuring ....................................................... 66
4.3.2 Modelling of configuration relevant constraints ...................... 75
4.3.3 Configuration decision dimensions ........................................... 78
4.3.4 Implementation of the product configuration system ............. 79
4.3.5 MBSE and configuration system data exchange system ........... 86
4.3.6 The Configuration Value Vector ................................................ 91
4.3.7 The adapted Dijkstra-algorithm for the determination of valid 
product variants ........................................................................ 93
4.3.8 The multi-dimensional Hyperspace calculation algorithm ....... 95
4.4 Modular product architecture performance simulation method ..... 102
4.4.1 Overview to the simulation-based decision-making process . 103
4.4.2 The MPA performance assessment simulation ...................... 104
4.5 Interim summary of the MPA simulation algorithm ......................... 113
5 Validation of the methods ................................................................... 117
5.1 Description of the case study ............................................................ 117
5.2 Case Study implementation .............................................................. 120
5.2.1 Configuration implementation for the case study .................. 120
5.2.2 Case Study simulation analysis dimensions ............................ 136
5.2.3 Simulation data input: customer products ............................. 139
5.2.4 Visualization of simulation results .......................................... 141
5.3 Verification and validation ................................................................ 142
5.3.1 Sensitivity analysis .................................................................. 1435.3.2 Validation ................................................................................ 145
5.3.3 Response to the research questions and research hypothesis149
6 Conclusion and outlook ........................................................................ 153
7 Annex ................................................................................................... 157
7.1 Annex 1: Bibliographic analysis data ................................................. 157
7.2 Annex 2: Extended excerpt of CND for Flow Diverter ....................... 160
7.3 Annex 3: Four Dependency Matrices for configuration process....... 161
7.4 Annex 4: Flow Diverter configuration system frondend description 162
7.5 Annex 5: Model-Based MPA – configuration system interface data 
format ............................................................................................... 163
7.6 Annex 6: Extended Parametric Model for case study – Axis Systems165
7.7 Annex 7: Case study company Impact Model with relevant analysis 
dimensions ........................................................................................ 166
7.8 Annex 8: List of all configuration relevant properties for simulation167
7.9 Annex 9: Excerpt of Dependency Matrices for MPA alternatives ..... 168
8 References ........................................................................................... 169
Curriculum Vitae........................................................................................ 179
 XII 
List of Abbreviations 
ATO Assemble-To-Order Process 
B2B Business-to-Business 
B2C Business-to-Customer 
BDD Block-Definition Diagram 
BOM Bill of Materials 
CAD Computer Aided Design 
CCrP Conjoint customer relevant Property 
CIP Continuous improvement process 
CND Configuration network diagram 
COGS Cost of goods sold 
CrP Customer relevant property 
CSM Cameo Systems Modeler 
CSV Comma separated value 
CTO Configure-To-Order process 
CuR Customer requirement 
CVV Configuration value vector 
DM Dependency matrix 
DSM Design Structure Matrix 
EDI Electronic Data Interchange 
ERP Enterprise Resource Planning 
ETO Engineer-To-Order 
FEM Finite Elements Method 
GUI Graphical User Interface 
IT Instance Table 
M Module 
MBD Model Based Definition 
MBE Model Based Engineering 
MBSE Model Based Systems Engineering MCC Module Capability Catalogue 
MFD Modular Function Deployment 
MIG Module Interface Graph 
MPA Modular Product Architecture 
MPC Module Process Chart 
MTS Make-To-Stock 
MV Module Variant 
PDM Product Data Management 
PFMP Product Family Master Plan 
PFMP² Extended Product Family Master Plan 
PKT Institute of Product Development and Mechanical Engineering Design 
PLM Product Lifecycle Management 
PSS Product Service System 
PV Product Variant 
PVTC Product Variety Trade-off Chart 
R&D Research and Development 
SysML Systems Engineering Modeling Language 
TUHH Hamburg University of Technology 
UML Unified Markup Language 
VAM Variety Allocation Model 
VAMOS Variant Modeling with SysML 
XML Extended Markup Language 
 XIV 
List of Symbols 
a Hypercube edge length 
॰ Domain (math.) 
d Hypercube dimension degree 
dx Derivate 
 Element א
f(x) Function over x
gi Weighting value for configuration dept 
i Starting value 
 Integral ׬
j Terminating value 
ki Valid configuration paths 
λ Barycentric weight 
m Counting variable II 
n Counting variable II 
Գ Natural (integer) numbers 
pi Prioritisation value for Hyperspace algorithm 
ς Multiplicator 
܄۾
ሱሮ Product variant vector 
S Idealpoint in Hypercube solution space 
σ Sum 
܄܂
ሱሮ Transformation vector 
xi 2D-Hyperspace coordinate X 
yi 2D-Hyperspace coordinate Y 1 Introduction 
The following contribution describes the detailed development of a model-based perfor￾mance simulation for modular product architecture alternatives, using a configuration 
system as a core element for integrating both customer- and company perspective into 
the decision-making process of modular product architecture alternatives. The following 
chapter 1 describes the contribution’s outset point. 
1.1 Outset point 
With globalization representing one of today’s major trends, global markets face a con￾tinuously increasing competition within the field of production companies, resulting into 
an ever-increasing race concerning production cycles, cost and material effort [Ehr05]. 
Therefore, suppliers and end-product manufacturers rely more and more on product 
specialisation in order to cope with this situation, intensifying directly the demand for 
customised machine- or product systems. In clear consequence, special equipment man￾ufacturers are noticeably on the rise [VDM14]. 
With product customisation inhibiting nearly all internal standardization and optimisa￾tion possibilities, a large internal and external product variety is produced [Ehr03]. In 
most cases, especially within the field of larger machine systems, those product variants 
possess a large degree of component diversity and structural complexity while being 
manufactured in very small batch sizes, sometimes even as single-unit products [Ble11]. 
This combination creates a large diversity within business processes, resulting in an in￾crease of costs in all product life phases [Ehr05]. In order to ensure the individual com￾pany’s competitiveness, managing these variants within their product- and process struc￾ture is one of the key tasks to challenge [Kra18]. With the concept of Modular Product 
Architectures (MPAs) supplying one possible solution to reduce the internal variety and 
thus costs while still keeping the external variety towards the customer as high as possi￾ble, researchers have provided different approaches in order to meet these opposing 
demands. The pertinent literature offering a large diversity of methodical modularisation 
methods with different mindsets such as product strategic approaches like the Theory of 
Modular Design [Sto97] or the Modular Function Deployment [Eri98] or function-driven 
approaches like PIMMLER AND EPPINGER’S DSM [Pim94], [Ulr00], [Epp12] or even the com￾bination of both, as the Integrated PKT-Approach [Kip10], [Ble11], [Kra18] is described, 
there is a theoretically unlimited amount of differing MPA alternatives which can be me￾thodically derived from a company’s current situation. 
© The Author(s), under exclusive license to 
Springer-Verlag GmbH, DE, part of Springer Nature 2022
F. M. Dambietz, Performance simulation of modular product architectures by 
model-based configuration, Produktentwicklung und Konstruktionstechnik 21,
https://doi.org/10.1007/978-3-662-64233-7_12 1 Introduction 
These product architectures consist of a large number of modules, components, con￾straints, linkages and sets of parameters which are on top individually influenced by in￾ternal and external factors from the company’s and customer’s business environment. 
Hence, there is an enormously large amount of data to be processed, stored and analysed 
when trying to differentiate the effects and therefore performance with regard to the 
underlying circumstances of the individual architecture alternatives. This can hardly be 
done objectively by manual means. Hence, a proper MPA data management as a basis 
for the performance analysis of different architecture alternatives with respect to indi￾vidual customer and company requirements is still an issue to be solved, both for re￾search and practical application [Sei20a]. 
Furthermore, the complex knowledge resulting from a modularization process often is 
not completely transferred towards the customer as a result of differing knowledge ba￾ses [Her13]. Therefore, the determination of the product variant meeting most ade￾quately the individual customer’s needs and the clear communication of how this prod￾uct variant is derived is a clear task to be addressed within business processes [Sei19b]. 
In the pertinent literature, this is generally solved by using specifically designed product 
configuration systems [Plie11]. These systems generally have to cope with a large num￾ber of modules and module linkings as well as constraints. Until nowadays, developing 
such configuration systems is therefore highly time- and cost consuming [Ris15]. Espe￾cially the underlying MPA’s maintainability while still keeping and testing the overall ar￾chitecture consistency is a major task and cost impact factor. 
As the use of configuration systems seems to supply an ideal method for determining 
individual customers’ needs, the development of a dynamic and adaptive configuration 
system which follows the developed MPA is one further major task during the develop￾ment process of MPAs. 
1.2 Objective of the contribution 
With the Institute of Product Development and Mechanical Engineering Design (PKT) at 
the Hamburg University of Technology (TUHH) main focus being on the development of 
modular product families, the Integrated PKT-Approach provides a methodical toolkit for 
the analysis of internal and external variety, design for variety, product life phase modu￾larization and its harmonization or complexity cost analysis [Kra18]. Furthermore, a 
method for supporting internal decision making when developing MPAs. Nevertheless, 
the above-described challenge for determining the most performant modular architec￾ture amongst the initially developed architectures with respect to customer and com￾pany-individual requirements on the basis detailed, low-level data set is not yet fully ad￾dressed [Sei20a]. This underlying contribution aims to close that gap by providing a me￾thodical approach for a multi-dimensional alternative decision making whilst taking as 
well customer and company requirements into account. As these customer needs are to 
be determined by using an adaptive MPA configuration system, this thesis aims to supply 
a method for the development of dynamic and adaptive product configuration systems 
which directly follow alternations to the underlying modular architecture. 1.2 Objective of the contribution 3 
Therefore, the overall goal of this thesis is to simulate different MPA alternatives in the 
combined environment of individual customer needs and business environment condi￾tions by using a product configuration system in order to determine the most performant 
solutions under the prevailing circumstances. 
Following this main target, this work contributes to the following research areas: 
 As the data management for MPAs needs to cope with a large number of mod￾ules, components and constraints amongst these modules, the data basis for 
the configuration system needs to be adapted to those prerequisites, leading to 
the use of specific tools, methods and concepts provided by the Model-Based 
Systems Engineering (MBSE). The thesis describes the development of a product 
configuration system with a data structure relying on the concepts of MBSE, es￾pecially the explication of the modular kit with its underlying dependencies and 
constraints. A major issue to address is to be able to dynamically adapt the con￾figuration system to the underlying product. It needs to be stated, that this the￾sis does not supply an individual MBSE approach as opposed to the standardized 
view of the INCOSE Group, but makes use of the thereby supplied methods, 
concepts and data structuring tools. 
 With this database needing to closely interact with the configuration system, 
the interface design between the MBSE environment and the configuration sys￾tem is a key component. Therefore, this thesis takes a close look on the interface 
design. 
 As the configuration system itself representing the core tool for the identifica￾tion of the customers’ needs, the requirements, design and set-up of an MBSE￾based configuration system is described. 
 The multi-dimensional performance analysis for determining the most perfor￾mant product architecture alternative amongst the initially developed alterna￾tives is a key part. There are several challenges to be met by the optimisation 
algorithm. This contribution provides a new mathematical approach for taking 
multi-dimensional calculations into account. 
 As the output of the proposed simulation is strongly affected by the imple￾mented analysis dimensions, an objective determination of these to be analysed 
factors is crucial. As the framework parameters impose a significant impact on 
the determination process, an approach for identifying these dimensions by an￾alysing relevant impact-effect chains within the MPA is proposed in the follow￾ing work. 4 1 Introduction 
1.3 Thesis structure 
At first, during section 2 of this contribution, the elaborated challenges coming with MPA 
alternatives decision-making is presented. During this section the individual research 
questions as well as the research hypothesis are stated. 
An overview of the current state of the art is given in section 3. A brief terminology and 
taxonomy section defines the most important terms. In this chapter, the recent research 
considering the development of MPAs as well as the corresponding modular kits is given. 
It also contains a section with the various methods for the performance assessment of 
MPAs within the pertinent literature being described. Additionally, as it will be used as a 
tool for the determination of the MPA simulation analysis dimensions, the Impact Model
according to [Hac20] is described briefly. These two aspects are further brought into 
context with the underlying business processes, such as Engineer-to-Order and Config￾ure-to-Order processes. Additionally, as the used simulation’s data basis consists of a 
MBSE-modelled data structure, a clear definition and description of MBSE and its funda￾mentals is given. Furthermore, the terms MBSE and MBE (Model-Based-Engineering), are 
thoroughly differentiated as well. The use of MBSE as a possible solution of the enhance￾ment of a data structures consistency and maintainability is described as well as its use 
as a single source of truth. It also occurred during the research in the pertinent literature, 
that there are two apparently opposing parties about which system to use as single 
source of truth. On the one hand, it is voted for the use of MBSE, whereas on the other 
hand, the use of Product-Lifecycle-Management (PLM) systems is stated. Therefore, a 
close analysis of these two research areas and their interconnection is displayed. The 
next section of the state of the art considers the use of configuration systems. Different 
types and implementations are stated and further compared as well as the state of the 
art concerning configuration algorithms and relevant mathematical approaches for the 
development of this thesis’ algorithm. Section 3 ends with a definition of the considered 
demands of further research, which is supported by a co-citation bibliographic analysis, 
considering the relevant literature used as a method of displaying the contribution’s rel￾evance. Based upon these findings, a clear definition of the research requirements is 
given. 
In chapter 4, the two developed main methods are described, with Method 1 represent￾ing the simulation-based decision making. This Method 1 is described using the example 
of a medical stent. This stent, also referred to as Flow Diverter, is used to patch blood 
vessel defects and provides a suitable data basis for a detailed explanation. Due to its 
deliberately kept simple product architecture, the developed individual parts of the sim￾ulation tool can be comprehensively described. Therefore, the chapter begins with a def￾inition of the Flow Diverter and its relevant characteristics. The next step is to describe 
the generic set-up of the simulation with its individual parts, providing the framework 
for the following explanation. The generation and set-up of the MBSE data basis, consid￾ering the data structure, its development and implementation forms the first part. Fur￾thermore, the modelling of the configuration relevant constraints is described in detail 
as well as the development and implementation of the interface between the MBSE 1.3 Thesis structure 5 
environment and the configuration system as Method 2. With the configuration system 
itself forms the core element for the simulation, its development and characteristics are 
described in the following. As this configuration system provides the environment for the 
formation of the multi-dimensional performance assessment index, the geometric-math￾ematical approach is described subsequently. This Hyperspace algorithm based on the 
developed Configuration-Value Vector is a major part of the overall simulation. In order 
to display the application and results of the simulation, it is performed using the Flow 
Diverter product example. The simulation results are then displayed using different visu￾alization tools. 
In chapter 5, the developed simulation and configuration methods are validated by being 
applied to a more complex MPA. This is based upon a case study within a German high￾tech enterprise which has focused on designing and manufacturing customer-individual 
laser processing systems. As a next step, a thorough description of the performed simu￾lation with a close description of the customer request data as a simulation input is given. 
As a result of the applied simulation, the heatmap visualizations of the individual MPA 
alternatives’ performances is displayed. In order to verify the simulation’s correct per￾formance, a sensitivity analysis is performed. Additionally, a validation of the configura￾tion system as well as the simulation is carried out by comparing the MBSE-based con￾figuration system’s results to manual configuration results. Using Module-Interface￾Graphs as a visual representation of the system’s performance, similarities and differ￾ences between the simulation and the manual configurations can be pointed out. 
Chapter 6 ends the underlying contribution, referring to the initially imposed research 
questions and the research hypothesis. Additionally, it supplies a brief conclusion and 
outlook to possible future work. 
All annexes can be found in chapter 7, followed by the references in chapter 1. 
 2 Challenges in modular product architecture alternative 
decisions 
During this section, the challenges addressed with this contribution are described and 
formulated as research questions. As being the main issue, the challenges with modular￾ization methods supplying various alternatives for MPAs and corresponding modular kits 
are stated. Accordingly, this contribution is to supply a configuration-based approach, 
enabling the simulation of MPA alternatives in order to assess their individual perfor￾mances already during their early design stages without the need for their implementa￾tion. This approach further is to determine the amongst the individual circumstances’ 
most performant degree of configurability vs. customer-individual design. The presented 
research aims to enable an increased flexibility, dynamic, transparency and consistency 
throughout the MPA development process and therefore, increased market competitive￾ness. 
The next section is to describe the stated research problem in close detail. 
2.1 Research environment 
As presented before, when trying to cope with the challenges of reducing internal variety 
while keeping external variety still high, the concept of modular product architectures 
supplies one possible and well-proven solution [Kra18]. The general process of develop￾ing modular process architectures and the resulting issues with different available alter￾natives is explained in the following Figure 2-1. 
Springer-Verlag GmbH, DE, part of Springer Nature 2022
F. M. Dambietz, Performance simulation of modular product architectures by 
model-based configuration, Produktentwicklung und Konstruktionstechnik 21,
https://doi.org/10.1007/978-3-662-64233-7_2
© The Author(s), under exclusive license to 8 2 Challenges in modular product architecture alternative decisions
When starting from an already existing, not methodically structured product architec￾ture, the first step is to perform a modularization of the product architecture. This prod￾uct architecture is displayed in Figure 2-1 as the architecture of the originating product 
generation PG x. Several different methodical approaches can be used which are well 
described within the pertinent literature and thoroughly validated during the past years 
by research and practice. As they all bring their different advantages and disadvantages 
and often are not only applicable to one specific industry or company situation, different 
methods can be used for the same case. During chapter 3.2, various concepts of modu￾larization methods are described for better understanding, but in general, the discrete 
applied method is not crucial for the current explanation of the architecture alternative 
decision issue. During the process of modularization, even one single method can gener￾ate various alternative outputs depending on the team applying the method. Secondly, 
when using different methods with different orientation, such as functional or product 
strategic orientation, the resulting modular product alternatives can differ to a large ex￾tent. 
Having executed the methodical modularization process, the key task of the performing 
team is to choose the best alternative from the existing ones. The chosen one, which is 
meant to perform best within the existing and future business environment, is to take as 
well company as well as customer requirements into account. Until today, this is usually 
done by following the individual experts’ opinion, which is in general based upon a lim￾ited number of criteria such as number of modules, number of standardised components 
or the degree of commonality and, not to forget individual experience or the company 
management’s opinion. The finally chosen MPA alternative then gets implemented into 
the company’s product and process structure. In the above Figure 2-1, this to be 
Figure 2-1: Research environment based upon MPA alternative issues [Sei20b]2.1 Research environment 9 
implemented MPA is displayed as the architecture of the consecutive product generation 
PG x + 1. These first three steps, - the initial modularization, the choice of the final to be 
implemented product architecture and its implementation in general -, are considered 
as highly resource-consuming over a long period and are additionally characterized by a 
high degree of company and market performance uncertainty. Furthermore, a signifi￾cantly low knowledge about the final MPA costs and possibly necessary new processes is 
persistent. Having implemented the MPA of PG x + 1, the next phase is to use and assess 
the newly developed architecture and -process. The ideal situation would be not to de￾tect any deficiencies, but it is highly likely that alternations to the modular structure con￾cerning standard components or module dependencies need to be made due to mis￾judged customer requirements or modules applied with a differing frequency than orig￾inally assumed. This change effort results in a further time and resource investment and 
does not come within the early phase of product development, where change costs are 
still low. As those changes need to be performed several years after the initial architec￾ture has been designed, this effort is quite high. These optimization processes need to 
be iteratively performed several times, each time taking into account the latest lessons￾learned effects as well as the latest changes to the existing MPA. After a certain amount 
of iteration steps, the implemented MPA, in Figure 2-1 displayed as the architecture of 
PG x + n, performs according to the initially defined requirements. 
As there is no ideal solution to the MPA and modular kit implementation decision, the 
individual company’s strategies are to be implemented within the modularization pro￾cess. This leads to a variety of alternative ratios of standardized and differentiated com￾ponents and modules [Sei19a]. 
All the individual modularization methods and MPA assessment methods have one key 
fact in common. As they all contain different aspects of individually adjustable module 
generation criteria, there is no single, nor ideal MPA alternative to be automatically de￾rived by applying these methods. As there are different framework conditions available 
for the methods, varying module compositions or strategic orientations can be devel￾oped [Bur16]. Up to the current state of the art, the differentiation between these alter￾natives is mainly based upon expert knowledge decisions and few indicating factors, such 
as the number of variant components. WINDHEIM proposed a visualization-based decision 
support method by implementing a decision dashboard, but still relies on its manual￾based application and provides a fixed set of decision-support dimensions [Win19]. 
As the following Figure 2-2 shows, change costs within late development phases are sev￾eral factors higher than they would have been if already known during the initial imple￾mentation phase. 10 2 Challenges in modular product architecture alternative decisions
With Figure 2-2 displaying the general development process, which contains several lev￾els of design and test steps by using the V-Model [Gra20], it can be seen that during the 
early steps of product development, all design and development aspects only are at a 
conceptual level, leading to small change costs [Kue20]. 
The later changes are applied to the developed structure with respect to the V-Model, 
the greater these change costs are. This is due to already implemented structures or 
structures already undergoing different test levels requiring a large change effort and 
therefore result in a significant amount of no longer used development results [Gra20]. 
The earlier these Lessons-learned can be generated in this described development pro￾cess, the earlier they can analogically be applied for the initial MPA. As a next step, they 
can then be used in order to develop a second generation of a MPA, which is adapted to 
the real and quantitatively assessed requirements of the company’s business and cus￾tomer environment. 
The amount of time and investment between the first and the second generation of the 
individual company’s MPA as displayed in Figure 2-1 as well as the success margin differ￾ence between the better performing second generation and the less well performing first 
generation is one major part of the motivation for improving the decision-making pro￾cess before implementing the initial MPA. Additionally, being able to reduce the amount 
of iteration loops for the performance enhancement of the implemented MPA as de￾picted in Figure 2-1 forms the next important motivation aspect. Furthermore, as these 
individual versions of product generations and MPAs need to be maintained during their 
implementation and usage processes, which is considered as a major task within business 
processes, the maintainability enhancement of MPAs is the third goal of this thesis. 
On the basis of the research environment, the following section 2.2is to introduce the 
relevant research questions, followed by the research hypothesis. 
Figure 2-2: V-Modell for product development, implemen e 2-2: V-Modell for product development, implementation and integration phases accordi tation and integration phases according to [Gra20] ng to [Gra20]2.2 Research questions and research hypothesis 11 
2.2 Research questions and research hypothesis 
According to the in section 2 described research problem, in total five research questions 
can be derived from the above-described situation, leading to the overall research hy￾pothesis. 
Research question 1 
How can the decision making for MPA alternatives be methodically and quantitatively 
supported during the early phases of the development process whilst taking both cus￾tomer and company framework conditions into account? 
The requirement of producing a quantitatively comparable decision-making support 
value for different MPA alternatives leads to the management of a large amount of data. 
As these data are not formattable into a communal data format, as they represent infor￾mation from different areas such as modules, components, requirements, dependencies 
or constraints, the need of a database which can cope with these different data formats 
in an economic way is inevitable. 
As shown during section 4, this support can be given by a product configuration system 
for deriving suitable product variants for a customer-specific set of requirements. 
This configuration system needs to contain all MPA specific knowledge about the mod￾ules, the components, their dependencies and constraints as well as their connection to 
specific requirements. Usually, not all modules can randomly be configured to generate 
all possible product variants. As they have a certain set of rules underlying, which are 
already represented in the modular kit, the number of conditions such a configuration 
system has to check when determining a specific product variant increases exponentially 
with the number of modules and constraints. Based upon the hypothesis, that a SysML￾based MBSE data structure modelling can be used for the implementation of the MPA 
and the corresponding set of constraints for such a configuration system, the next re￾search question can be derived as: 
Research question 2 
Is it reasonable to separate the modelled MPA using the tools and concepts of MBSE 
and the corresponding configuration system into individual, but linked systems? 12 2 Challenges in modular product architecture alternative decisions
As such a data structuring opens up the possibility of implementing a dynamic configu￾ration system [Sei20a], another challenge to address is the degree of configurability ver￾sus the degree of customer-individual design processes. As a configuration system is 
based on a modular kit, the amount of configurable product variants is limited by the 
capabilities of the underlying modular kit. The more customer-relevant properties this 
modular kit includes, the higher its degree of configurability can be. Nevertheless, this 
always comes with the downside of a larger, more complex and supposedly increased 
degree of variety for the underlying MPA. Furthermore, there are different possibilities 
and target figures amongst which the MPA can be developed. The main three branches 
can be seen as the Common Parts/Module Strategy, the Modular Kit Strategy or the Plat￾form Strategy, with each of them providing the possibility to develop alternative archi￾tectures with alternated degrees of configurability and customer individualisation. This 
correlation is displayed in the following Figure 2-3. 
The three strategies described have in common that they work with predefined modules, 
which differ in scope depending on the strategy. Within the strategies, the arrows in the 
upper illustration part show whether reuse of the predefined modules is only possible 
within a product family or across product families. Both standard modules and variant 
modules can be planned within a product family or across the product families. The Com￾mon Parts/Module Strategy, see Figure 2-3 (left), features small modules (standard and 
variant modules) whose communal use is meant to be used across product families. With 
Figure 2-3: Alternative solutions of product family modularization strategies on the basis of [Kra21]2.2 Research questions and research hypothesis 13 
the Platform Strategy, on the other hand, see Figure 2-3 (right), large standard modules 
form the platform and therefore the basis for the generation of product variants together 
with smaller variant modules is given. The Modular Kit Strategy, see Figure 2-3 (centre), 
is between the two strategies described, as it aims to reduce the external diversity within 
a product family with as few as possible diversity within a product family with as few 
modules as possible. This leads to modules of medium size compared to the Common 
Parts/Module- and Platform Strategy, so that a high reuse degree of the modules within 
the product family can be used the configuration of product variants within alternative 
product architectures. 
As the lower section of Figure 2-3 displays, the three different strategies also can lead to 
alternative architectures within their sector, mainly depending on the two aspects of 
configurability and customer-individual design, which are opposing each other. The 
larger the individual design ratio grows (upper triangle), the more customer-individual 
adaptations can be made, resulting in a highly individualized, but less modularized prod￾uct architecture (symbolized by blue colour). With a decreasing level of individuality, the 
degree of configurability – at the same rate with the degree of over-dimensioning – in￾creases. As configuration processes always require a fixed set of available modules, these 
can only be standard (white) or variant (grey). The ratio of standard vs. variant modules 
within the MPA can be varied on the basis of different modularization framework param￾eters. Within this contribution, one major hypothesis is based on the assumption, that 
there is a sweet-spot within the ratio of configurability and customer-individual design 
as symbolised in Figure 2-3. Accordingly, the third research question can be derived as: 
Research question 3 
How can the optimum degree of configurability be objectively and reproducibly ob￾tained amongst the given MPA alternatives? 
As this research question can e.g. be tackled by or a dynamic configuration system trans￾ferring the modularization knowledge towards the customer without requiring the cus￾tomer to possess expert modularization knowledge – compare section 4.3, the fourth 
research question can be derived: 
Research question 4 
How does a consistent configuration system need to be designed in order to transfer 
the customer product perspective into the company product and process perspective? 14 2 Challenges in modular product architecture alternative decisions
This already states the importance of the interface design between the expert￾knowledge based MBSE-system and the applied configuration system and is therefore 
closely regarded in the following. 
Especially for companies with a special need for the translation between a customer 
product defining the requirements to the company product as displayed in the following 
Figure 2-4, this is of significant importance. 
Figure 2-4 displays this translation process with the during section 5 used product exam￾ple of customer-individual laser processing machines. The left-hand side shows the to be 
manufactured customer part, which defines the exact expressions of the customer re￾quirements. These then need to be translated by the configuration system into the com￾pany’s perspective in order to define the matching company product variant as displayed 
in Figure 2-4 right-hand side. 
Another important fact to be mentioned is, that there often are several different product 
variants representing a theoretically valid solution for an individual set of customer re￾quirements. This changes rapidly when taking additional influence factors into account. 
These influence factors need to be taken into account when deriving the most perfor￾mant product variant amongst the given variants for the customer, leading to only one 
possible solution. 
These aspects are also key to deciding which MPA alternative is to be implemented, as 
the resulting requirement-product variant linkage is predefined by the underlying prod￾uct architecture. Therefore, the analysis dimensions which are to be used when trying 
to build a quantitative performance indicator for the alternative decision support are 
crucial. 
As the analysis dimensions in general influence the output of the analysis, it is a key task 
to properly and methodically identify the effects which are to be measured and calcu￾lated in order to prevent miscalculations. Therefore, the fifth research question can be 
stated as follows: 
Research question 5 
Figure 2-4: Translation process between customer product (left) and company product (right)2.2 Research questions and research hypothesis 15 
How can suitable effects for the MPA performance analysis be methodically derived 
while considering different customer-company environment conditions? 
In general, the research problem this contribution is addressing is how to methodically 
and quantitatively support the performance analysis in the early phases of the develop￾ment of MPA and modular kit alternatives. The research questions are therefore ad￾dressed by the following research hypothesis: 
Research hypothesis 
A MBSE-based configuration system used within a simulation of various multidimen￾sional customer- and business framework conditions can be used as a method to assess 
alternative MPA performances during their early design state. 
Based upon the above-stated research question and the corresponding research hypoth￾esis, the following section is to display the state of the art for the relevant sections of this 
thesis. 
 3 State of the art 
The following section describes the state of the art concerning the relevant thematic ar￾eas this contribution’s research is based on. 
According to the research questions as well as the stated research hypothesis, there are 
four essential clusters identified, leading to the general set-up of the required state of 
the art and are displayed in the following Figure 3-1, representing an Area of Relevance 
and Contribution (ARC)-diagram. 
As Figure 3-1 shows, there are four essential research areas to be considered. At first, 
the methodical development and assessment of modular product architectures, includ￾ing the various methodical approaches such as the Integrated PKT-Approach need to be 
considered. Furthermore, the modelling of impacts and effects on MPAs, as it is e.g. done 
by using the Impact Model is considered as well – see Figure 3-1 upper right corner. 
Secondly, as a central part of the developed method is formed by product configuration 
systems, this research area needs to be closely analysed with an focus on modular kits, 
Figure 3-1: ARC-diagram with the identified research areas
Springer-Verlag GmbH, DE, part of Springer Nature 2022
F. M. Dambietz, Performance simulation of modular product architectures by 
model-based configuration, Produktentwicklung und Konstruktionstechnik 21,
https://doi.org/10.1007/978-3-662-64233-7_3
© The Author(s), under exclusive license to 18 3 State of the art
specific configuration algorithms and the translation process between customer- and 
company perspectives – see Figure 3-1 lower right corner. 
The third area considers the ontology management – compare Figure 3-1 lower left cor￾ner- including specific approaches such as PLM systems. 
The fourth research area contains the MBSE-modelling, including the specific SysML-Lan￾guage and the connected MBSE tasks, such as consistency and maintainability enhance￾ment – see Figure 3-1 upper left corner. 
In the following section 3.1, the most important terms for this thesis are described. 
3.1 Terminology and Taxonomy 
In the following, the most relevant terms for this thesis are described. 
Component 
Components in this context are considered as the lowest level of perception in the cor￾responding product architecture [Kra18]. An individual component can consist of either 
one single part or multiple parts – in the industrial context often referred to as article 
numbers. 
Modular product architecture 
A product architecture describes the combination of as well the functional and physical 
description of a product. It decomposes the existing product architecture into a hierar￾chical structure, integrating groups of lower-level components. In the case of MPAs, this 
structuring comes with certain degrees of modularity characteristics, such as Common￾ality, Combinability, Functional binding, Interface standardization and Decoupling. These 
main modular properties serve as target figures when developing MPAs and are dis￾played in the following Figure 3-2. 
Figure 3-2: Modular properties according to Salvador [Sal07], figure based on [Ble11]3.1 Terminology and Taxonomy 19
Modular Kit 
There are different definitions describing modular kits – in German called “Baukasten”, 
such as in [Lin11], [Scu15], [Bur16] and [Kra18]. On the basis of these definitions, an ex￾panded modular kit definition can be derived: 
“A modular kit describes the clear composition of as well the modular product architec￾ture with all relevant technical, functional and product strategic properties as well as the 
corresponding set of rules and constraints required for the configuration of corresponding 
product variants.” 
It becomes apparent, that a modular kit does not provide a directly usable product, as it 
only contains the complete number of configurable modules. By developing and adding 
an adequate set of constraints to this modular kit, a configurable product architecture is 
determined [Bur16]. The following Figure 3-3 displays the combination of a modular kit 
and its set of constraints. 
Figure 3-3: Correlation of modules and set of constraints forming modular kits 
As depicted in Figure 3-3, the modular kit consists of an individual combination of stand￾ardised (white) and variant (grey) modules. As this left-hand part of the configurable MPA 
only contains the individual modules, the corresponding set of dependencies between 
these modules is defined by the modular kit’s set of constraints (Figure 3-3 right-hand 
side). As this set of constraints is always applied in a similar manner to the set of modules, 
it can be considered as standardised (white). 
Customer relevant properties 
As a majorly important part of as well the methodical approaches to the development of 
MPAs as well as for the underlying thesis, customer relevant properties describe the per￾ception of the external variety for physical products. They are used for the customer￾perspective differentiation of product variants and can correspondingly be used for the 
determination of individual product variants [Kra18]. Customer relevant properties are 
considered as the company-perspective understanding of customer demands and cus￾tomer requirements in the case of a customer-product and company-product translation 
situation. As a modular product architecture usually does not only rely on pure customer￾relevant properties but also from relevant properties from different areas, the term of 
Customer-relevant properties is expanded as a result of this research towards the term 20 3 State of the art 
of Conjoint Customer-relevant properties (CCrPs), including also company, - market and 
customer properties. 
In the next section, a brief overview over the different methodical approaches for the 
development of MPAs is given. 
3.2 Development of modular product architectures 
In order to cope with the intensifying demand of customer orientation, individualization 
and an increasing market competition, the concept of modularization supplies one pos￾sible solution to the appearing issues. This strategy implies, that the number of variants 
decreases and leads to a lower variance-induced complexity in the entire company. This 
can influence a company’s success significantly and lead to decreased costs in all areas 
of the company [Kra18a], [Rip17]. The following section is to give a brief overview of the 
most established modularization methods. 
In general, modularization methods can be categorized into product-strategic and tech￾nical-functional methods [Rip13]. Common examples are the Theory of Modular Design
according to STONE [Sto97], the Design Structure Matrix (DSM) according to PIMMLER AND 
EPPINGER [Pim94], [Epp12], the Modular Function Deployment by ERIXON [98] or the Life 
Phases Modularization [Kip10], [Ble11], [Kra18]. 
STONE presents an approach for the technical-functional modularization. Within this 
method, three different heuristics are defined: transformation and transmission, branch￾ing and dominating flow. On these heuristics’ basis, different MPA concepts, are then 
developed with respect to the customer requirements. PIMMLER AND EPPINGER have further 
developed the Design Structure Matrix. This matrix was further extended by LINDEMANN 
[Lin09], in order to display the couplings amongst different component levels. The basic 
idea of using the coupling matrix is to implement components with many couplings into 
one module. As an approach for an algorithmic implementation of this method, the com￾ponents with their individual couplings are clustered along the matrix’ diagonal, propos￾ing module candidates. 
As for product strategic approaches, the Modular Function Deployment as developed by 
ERIXON can be stated. On the basis of module drivers, various module candidates are iden￾tified. These module candidates can then be analysed according to various criteria in or￾der to determine the final to be implemented MPA [Eri98]. 
As a combination of both these major modularization method streams, the Integrated 
PKT-Approach [Kra13] with the Life Phases Modularization Approach [Ble11] aims to im￾plement aspects from as well the product-strategic as well as the technical-functional 
perspective. As the underlying contribution is mainly based upon this individual modu￾larization approach, it is described in deeper detail. 
The Integrated PKT-Approach is based upon the results of the design-for-variety product 
design and strongly focuses on reducing the internal variety of a product architecture 
while still keeping the external, offered variety at a high level. As the Integrated PKT￾Approach consists of a method kit with methods for the development as well as the 3.3 Performance assessment of modular product architectures 21 
assessment of MPAs, a thorough explanation of this approach is given during section 3.3 
together with the other most relevant MPA performance assessment methods. 
3.3 Performance assessment of modular product architectures 
Due to the fact, that most of the briefly described modularization methods lead to not 
one single MPA, but to various MPA alternatives, a crucial step within the modularization 
process is the decision making about which of these developed MPA alternatives is to be 
implemented. 
In the following, various already existing methods or method kits for the performance 
assessment of MPAs are described. As this contribution is about performance 
assessment of MPA alternatives, these methods provide a suitable outset point for the 
state of the art analysis and implication definition for the developed simulation method. 
In general, performance assessment methods can be clustered into four major categories 
[Win19]. These clusters categorize the individual methods by their analysis scope and 
their specificity and can be stated as 
 Purely structural evaluation methods 
 Purely costing-based evaluation methods 
 Universal methods 
 Comprehensive methods 
The first category, containing purely structural evaluation methods have a strong focus 
on the specific product architecture characteristics and therefore, to the pure modular 
structure itself. With a major orientation towards the functional modularization 
standards as proposed by SALVADOR [Sal07], e.g. interface standardization or functional 
binding as well as decoupling and commonality take up an important position. Such 
purely structural evaluation methods e.g. are proposed by BAYLIS ET AL. [Bay18] with the 
Product Family Platform Selection or the approach for Commonality Decisions in Product 
Family Design as presented by FELLINI ET AL. [Fel06]. 
As opposed to this above described category, purely costing-based evaluation methods 
aim for a performance measurement based upon cost-considering measurements. They 
generally use cost indicators through the entire product value chain with easy aquireable 
and quantifiable data. Representatives of this category are e.g. with the Variety Induced 
Complexity in Mass Customisation by BLECKER AND ABDELKAFI [Ble07], [Abd08] or the 
approach presented by MEYER AND LEHNERD to measuring Product Platform Performances
[Mey97] as well as the Cost-based Selection of MPA by RIPPERDA [Rip19]. 
Both of these approaches only consider either technical-functional or product strategic 
aspects, the third category contains methods aiming to combine both aspects. The major 
difference between universal and comprehensive methods is the number of appliable 
methods, with universal methods consisting of a single method and comprehensive 22 3 State of the art
methods consisiting of a methodical kit for the MPA performance assessment. The 
representatives of universal methods relevant for this contribution are e.g. the Balanced 
Scorecard as proposed by JUNGE [Jun05] or the Planning for Product Platforms as 
presented by ULRICH AND ROBERTSON [Rob98]. This category also includes the by WINDHEIM
presented an approach for Cooperative Decision Making in Product Family Design 
[Win19]. 
The most embracing approaches for assessing MPA performances are categorized within 
the comprehensive methods, considering as well product strategic and technical￾functional aspects with individually choosable mehtods from a method kit in order to 
adapt to the specific use case. As multi-dimensional analysis and their state of the art are 
crucial for this thesis, the extended Product Family Master Plan (PFMP²) as presented by 
KVIST [Kvi10], the Integrated Approach to Product Family Design as proposed by SIMPSON 
ET AL. [Sim12] and the Integrated PKT-Approach as described by KRAUSE AND GEBHARD 
[Kra18] with their underlying sets of methods are to be considered. 
The following Table 3-1 displays the mentioned relevant methods and compares their 
performance according to the identified criteria. 
Table 3-1: Comparison of different methods for the performance assessment of MPAs3.3 Performance assessment of modular product architectures 23 
To begin with, the above-mentioned methods are compared according to the relevant 
criteria. With respect to the individual method’s strengths and capabilities, four relevant 
dimensions originating from the research requirements as defined in section 3.8.2 can 
be identified in total: 
 Consideration of structural (technical-functional) modularization aspects 
 Consideration of product-strategic modularization aspects 
 Consideration of the company’s perspective, including trade-offs in favour for 
customer’s perspective 
 Consideration of all (relevant) life phases 
It can clearly be seen in Table 3-1, that there is no described method which is able to fully 
address the requirements of considering technical-functional and product strategic as￾pects of MPAs while taking at the same time as well customer and company (internal and 
external) perspectives into account. With respect to further criteria originating from the 
research questions and overall goal of this contribution – as shown during section 3.8 
and Table 3-1 – the three approaches with the highest score are described in further 
detail. These are the Balanced Scorecard, the Integrated Approach to Product Family De￾sign and the Integrated PKT-Approach.
In the following, a brief description of the above stated representative methods is given. 
The methods which are considered as most relevant according to Table 3-1 and Table 3-2 
are described in closer detail. 
Product Family Platform Selection [Bay18] 
As a purely structural performance evaluation method, the approach presented by BAYLIS 
ET AL [Bay18] assesses qualitative trade-offs amongst modularitiy and commonality. The 
structural part of this method is based upon the DSM approach developed by PIMMLER 
AND EPPINGER [Pim94] and further extended by LINDEMANN ET AL. [Lin09]. It enables the 
indification of various component alternatives placed along a specific pareto line. These 
alternatives are then assessed by their degree of commonality and modularity, leading 
to decision criteria for the performance analysis. 
Commonality Decisions in Product Family Design [Fel06] 
This strucutral assessment approach presented by FELLINI ET AL. [Fel06] determines the 
most performant solution based upon a performance loss index, with the minimum 
performance loss defining the most performant available solution. As a basis, a 
hypothetical optimal solution is mathematically described, originating from hypothetical 
ideal requirements. Deviations of the real requirements from these ideal requirements 
are considered as trade-offs between alternative solutions and generate a performance 
loss. This quantifiable value then is used as a decision support index. 24 3 State of the art
Product Platform Performance [Mey97] 
This cost-based approach uses performance indicators such as manufacturing- and sales 
cost, the cost-price ratio of the Cost of goods sold (COGS), the efficiency of cycle times 
and plattforms as well as the ratio of development costs to achieved sales. These factors 
can all be obtained from alternative solutions, leading to quantifiable, but still not linked 
decision criteria. 
Balanced Scorecard [Jun05] 
With the Balanced Scorecard representing the first universal method, both technical￾functional as well as product strategic aspects are considered. The main goal of this 
method is to use a large variety of measurement indices such as development costs, 
order-lead time or complexity in order to control whether the modularization efforts 
meet the preliminary set targets. These measurements are to be analysed for the four 
perspectives production, finance, marketing and sales and development as depicted in 
the following Figure 3-4. 
The main advantage of this approach is the use of a database in order to analyse large 
data amounts. Nevertheless, it has a strong focus on the company’s perspective for the 
individual use cases. 
 
Figure 3-4: Process of the Balanced Scorecard according to [Jun05]3.3 Performance assessment of modular product architectures 25 
Cost-based Selection of MPA [Rip19] 
This cost-based method consists of three phases, the phases for the cost prognosis, the 
semi- quantitative evaluation and definition of additional measures for further cost re￾ductio, which are used in order to determine the product’s complexity costs. According 
to the within these three phases identified values, a cost-supported decision about which 
MPA alternative is to be implemented within the company. This approach is generally 
used for companies offering low-volume but highly variants products. 
Variety Induced Complexity in Mass Customisation [Ble07][Abd08] 
This performance evaluation method extends the previously described Product Platform 
Performance approach and is designed for the decision support when considering mass 
customization MPAs. As a major extension, the index for the amount of parallel work is 
introduced by the authors. 
Planning for Product Platforms [Rob98] 
This approach uses a two-dimensional trade-off framework for assessing the 
performance of MPA alternatives. These two dimensions are represented by technical 
and structural measures on the one hand, and product strategic measures on the other 
hand. The basic idea is, that both of these measures are contradictory. Therefore, each 
MPA describes a specific trade-off between these two indices, leading to a binary 
comparison of alternatives. 
Cooperative Decision Making in Product Family Design [Win19]. 
This method supplies a decision support for MPA alternatives by implementing a 
decision-support dashboard. This dashboard presents the decision problem analysis, the 
collection and preparation of the decision relevant data as well as their visualization. It 
is a Stakeholder-oriented approach, enabling cooperative decision making. The main 
advantages are set within the determination and processing of decision relevant 
information, enhancing a higher transparency, and therefore causality, of the decision 
making. 
Extended Product Family Master Plan (PFMP²) [Har06][Kvi10] 
This comprehensive evaluation method extends the originally presented PFMP by HARLOU 
ET AL. [Har06], addressing both technical-functional and product strategic aspects of a 
MPA. As the original PFMP does not consider all aspects from the relevant life cycle 
phases, the PFMP² inludes further dimensions, such as supply chain performance values, 
sales numbers or design guidelines. Nevertheless, the main issue with this approach is a 
lacking interconnection within these analysis dimensions, which especially has a 
significant result impact when considering large data amounts [Mor16]. 26 3 State of the art
Integrated Approach to Product Family Design [Sim12] 
This approach aims for meeting the within the PFMP stated missing combination of 
factors by developing an assessment measurement consisting of a combined diversity 
and commonality dimension. Therefore, the degree of variety or commonality can be 
seen as the main distinguishing aspect within this approach, supplying the outset point 
for analysing the functional binding of functions to individual modules and components. 
Within this method, a hypothetical ideal solution is also used as a comparison guideline, 
enabling the possibility to identify improvement sections within the underlying MPA. 
As Figure 3-5 displays, trade-offs between different MPA alternatives are analysedon the 
basis of a performance deviation index and a non-commonality index. These are derived 
for each MPA alternatives and displayed in the Product Variety Trade-Off Chart (PVTC). 
In this diagramm, the no-preffered alternatives are based in the upper right corner, 
wheras the desired MPA alternatives are set in the lower right corner. 
Integrated PKT-Approach [Kra18]
As described during section 3.2, the Integrated PKT-Approach consists of various meth￾ods which can be used for the evaluation of MPA performances. Taking both technical￾functionals as well as product strategic aspects into account, various independent per￾formance indices can be generated. As an example, the degree of variety, resulting from 
the Design for Variety [Kip12] or the Variety Induced Complexity Costs [Rip19] with the 
proposition of semi-quantitative data can be determined. The work of WINDHEIM [Win19], 
aims to implement Cooperative Decision Making into the MPA evaluation process and 
supplying decision alternatives based upon structural and strategic product architecture 
aspects. The modelling of effects of individual aspects within the MPA is also supported 
by the development of the Impact Model [Hac20]. 
As the Integrated PKT-Approach serves as a basis for this contribution, it is described with 
the for this thesis relevant methodical parts in the following. 
Figure 3-5: Product Variety Trade-Off Chart with two alternatives [Sim12]3.3 Performance assessment of modular product architectures 27 
The Integrated PKT-Approach is designed on the results of the Design-for-Variety and 
aims to reduce the internal variety within a product architecture while still keeping the 
external and therefore offered variety still high. Both of these variety levels are schemat￾ically displayed as the smaller (internal variety) and larger (external variety) parts of the 
cone in the following Figure 3-6, displaying the correlation of products and processes 
with their internal and external variety. 
The additional main aspects of the Integrated PKT-Approach can be stated as follows: 
 Workshop-based procedure in order to integrate product-specific professional 
expertise. 
 Specifically developed visualization methods which enable the solution-finding 
and decision making within the modularization team. 
 Targeted re-structuring, change or new development of components in order to 
reduce the overall component variety. 
 Combinable methods for the individual application within specific company 
situations. 
Considering the process perspective, the goal is to minimize the variety-induced pro-cess 
complexity by applying variant-robust processes or variance postponement as far as pos￾sible whilst inhibiting specially designed process structures. The product perspective 
aims for a standardization within modules and components in order to reduce the total 
number of parts, increase component re-usability and maximize therefore scaling 
Figure 3-6: Integrated PKT-Approach for the methodical reduction of internal variety while 
keeping external variety high, according to [Kra18]28 3 State of the art
effects. The extent of these goals is defined by the type of the implemented modular 
architecture strategy as described within Figure 2-3. 
The Integrated PKT-Approach can be considered as a methodical kit, being composed 
from individual but linked methods. Each individual method is used to fulfil the needs of 
a specific problem area, like e.g. the development of a MPAs and modular kits. As this 
modular development kit requires a close analysis of the product architecture and the 
underlying variety, a development of the MPA with respect to the individual product life 
phases is proven to be an adequate solution. 
As the Integrated PKT-Approach is used as a basis for the presented research, the two 
relevant methods Module-Interface Graph (MIG) and the Network Diagram are de￾scribed in further detail. 
The MIG displays the product design reduced to the essential aspects. It also shows in￾formation about all product family product variants. An example of a simplified MIG for 
laser processing systems is displayed in the following Figure 3-7. 
All components are displayed with respect to their overall form and position within the 
product. Furthermore, the degree of variety is shown by the colour of the individual com￾ponents. Standard components, which only exist in one version, are displayed in white, 
whereas variant components are shown in grey. A dashed-lined component represents 
its optionality. All components are connected via arrows, indicating different types of 
flows between them. The colour coding enables a differentiation between the individual 
flow types [Geb14], [Kra18]. 
Figure 3-7: Exemplary display of Module Interface Graph (MIG), based on [Geb14] and [Kra18]3.3 Performance assessment of modular product architectures 29
The Network Diagram is used in order to develop individual component and module ar￾chitectures for the individual product life phases. As a developing baseline, individual 
Module Drivers and corresponding Module Driver Expressions, mostly from product-stra￾tegic perspectives are used. These Module Drivers vary from life phase to life phase. For 
the production life phase, a Module Driver e.g. can be Separate Testing, enabling module￾individual test during the assembly for e.g. the Module Driver Expression Electric test. For 
e.g. the sales life phase, a Module Driver can be Configurability [Kra18]. The following 
Figure 3-8 displays the generic set-up of the Network Diagram. 
The Network Diagram consists of four columns, where the Module Drivers, Module Driver 
Expressions, Components and Modules are listed and linked. Ideally, a clear one-to-one 
allocation between Module Drivers and Modules is to be aimed for. As such a Network 
Diagram exists for each individual life phase, the next step is to consolidate this infor￾mation during the subsequent Harmonisation process. This leads to a discussion-based 
finalisation of the modularized product architecture. 
This Harmonisation process is performed using the Module Process Chart (MPC), sup￾porting the development process by determining conflicts between separate life phases 
[Ble10]. The following Figure 3-9 displays the schematic set-up of the MPC by displaying 
four components (a-d) and four individual life phases. 
Figure 3-8: Generic set-up of the Network Diagram, based on [Kra18]
Figure 3-9: Schematic display of the MPC according to [Gre20], based upon [Ble10]30 3 State of the art
It can be seen, that individual components, clustered into modules are correlated with 
the individual life phases according to the products life cycle. The colour coding displays 
again the degree of variety (grey) or standardisation (white). Amongst the individual life 
phases, lines connect the components, displaying the individual flows along the value 
creation chain. Furthermore, the end product is displayed as a supplementary life phase. 
During the harmonisation process, the individual modular structures displayed in the 
MPC life phases need to be consolidated into one combined architecture. This coordina￾tion is done by only allowing modules to grow from left to right and not to split up again 
– apart from the sales life phase. This process is carried out by the modularization team 
by discussing alternative solutions, leading to several valid final MPAs. In the end, one of 
these alternative MPAs is chosen by the expert team and then implemented [Gre20].
These three described methods are only an excerpt of the method modular kit the Inte￾grated PKT-Approach consists of. The complete method set-up leads to the Life Phases 
Modularization as displayed in the following Figure 3-10. 
It can be seen in the above Figure 3-10, that the Life Phases Modularization is the result 
of the Design for Variety process. It is based on components adapted to the need for 
reduction of internal component and process variety. For the Life Phases Modularization, 
the determination of the Status Quo provides the outset point. The next two subsequent 
steps provide both technical-functional as well as product-strategic oriented modulari￾sation concepts by applying e.g. the DSM or the Network Diagram to the product family. 
Afterwards, as already explained for the Network Diagram definition, these individual 
information from technical-functional modularization steps as well as product strategic 
concepts for the individual life phases get consolidated and harmonized. The result of 
the procedure is a concept of the final MPA and correspondingly, a modular kit, which 
Figure 3-10: Life Phases Modularization within the Integrated PKT-Approach, according to [Kra18]3.4 Modular kits within business processes 31
implements advantages for all life phases and for as well product strategic and technical￾functional perspectives. 
At this point, a detailed definition of modular kits within the business process structure 
is given. 
3.4 Modular kits within business processes 
In general, business processes can be distinguished by analysing their degree of product 
development, completion and customer orientation during design and production. KILGER 
ET AL. address this issue by classifying anticipative and reactive processes [Kil12] as dis￾played in the following Figure 3-11. 
The described purely anticipative processes, such as Make-To-Order (MTO) processes, 
which also include the specific variant of Engineer-to-Order (ETO) processes. These pro￾cesses describe customer-individualized product development, design and manufactur￾ing. They are opposed by reactive processes, such as Make-to-Stock (MTS). Within this 
process form, produced goods (often bulk-items) remain stored until being ordered by a 
future customer. Located in between these pure anticipative and reactive processes, the 
Assemble-to-Order (ATO) and Configure-to-Order (CTO) processes contain mutual as￾pects of both anticipative and reactive processes. They mainly differ in the underlying 
degree of module completion, as with CTO-processes the modules are only available as 
finished designs, whereas with ATO-processes, the subsequent production has already 
taken place [Krt05]. As pure ETO or MTS processes are note quite common within stand￾ard business structures, the latter ATO or CTO processes are to be regarded as the most 
crucial structures. These processes drastically increase their business efficiency with a 
methodically developed MPA, the simultaneous engineering of CTO-processes in the en￾vironment of complexity-cost oriented variety management is inevitable [Sei19a]. This 
directly leads to the development of modular kits, as the process of modularization and 
the development of modular kits are usually regarded as consecutive steps [Kop04]. 
Figure 3-11: Business processes according to [Kil12]32 3 State of the art
In the following, the Impact Model, describing impact and effect chains within MPAs is 
described as a methodical approach to derive performance analysis dimensions for MPA 
alternatives. 
3.5 The Impact Model: analysis of effects and impacts of MPAs 
The Impact Model describes the effects of modular product structures onto the product 
life phases product development, procurement, production, sales and marketing and use 
and service as well as on the economic targets time, costs, quality and flexibility. 
The modular product structures are described in the Impact Model by the properties and 
characteristics of modular product structures [Hac17]. The impacts are represented in 
impact chains, starting from the characteristics and features of modular product struc￾tures, which consist of primary effects, secondary effects and economic effects. 
The Impact Model and the data types are shown in Figure 3-12 within the grey framing. 
The data model shows all data types and information about their linkages. Nevertheless, 
the data model does not yet contain any information on the individual links. The ele￾ments which are connected in blue represent the main strand of the working model of 
modular product structures. 
Figure 3-12: Generic display of the Impact Model according to [Hac17] [Hac20] 
Additional information has been added to the Impact Model of modular product struc￾tures and its individual elements, e.g. more detailed conditions for the individual effects. 
Some effects only occur under certain boundary conditions. For example, there is a dif￾ference between a product structure which is modularised for a large-batch manufac￾turer or structures for a small-batch manufacturer. One example is the economic effect 
of procurement costs. This effect is more pronounced in the case of large series manu￾facturers and has a smaller influence in the case of small series manufacturers [Hac17]. 
These boundary conditions can be described mathematically and are also part of the im￾plemented data model. This data model provides the basis for the model-based 3.6 Model-Based Systems-Engineering (MBSE) 33 
implementation of the data models in SysML as described by SCHWEDE ET AL. [Scw19]. 
Within this contribution, the Impact Model is used in order to determine the Impact 
Chains with their underlying Effect Chains within individual business environments as 
shown in Figure 3-12. These criteria are then used as performance analysis dimensions 
and therefore, as the developed simulation’s parameters. 
The next section is to describe the state of the art considering the MBSE and SysML en￾vironment, which is used as a data basis for the presented research. 
3.6 Model-Based Systems-Engineering (MBSE) 
This section introduces the MBSE concepts used during this contribution. As a first step, 
the differentiation and relation between Model-Based Engineering (MBE) and Model￾Based Systems Engineering (MBSE) is presented. 
Model-Based Engineering - MBE 
MBE is generally described as an engineering approach using models as an integral part 
of the engineering process. This results in an extended visualization and documentation 
as well as a more consistent communication when using 3D annotated product defini￾tions [Mcd17]. Core to MBE is the integration of descriptive and computational models 
to the design process. A model is hereby described as a mathematical representation of 
a system, entity, phenomenon or process [Omi15]. MBE therefore aims at increasing the 
effectiveness of engineering using these models for the import of artifacts into the de￾velopment process [Pae17]. In this situation, software plays an important role, but does 
not drive the development process itself [Lie18]. This software part is described by the 
model-based definitions (MBD), which replaces standardised 2D or 3D drawings by addi￾tional product information which is directly translated from the development process 
into the model space. In this case, the product information is semantically expressed in 
a computer-readable format [Mcd17]. Therefore, standard drawings are by some au￾thors stated as not being longer the state of the art in engineering information commu￾nication. Instead, using model-based product definitions with a single product consisting 
of several distinct models, each expressing a specific product aspect, should be used 
[Mcd18]. 
Model-Based Systems Engineering - MBSE
MBSE generally describes the holistic, interdisciplinary approach for a model-based Top￾Down declaration of technical systems. These declarations usually originate from re￾quirements of the underlying use cases. According to ALT, the core of the modelling pro￾cess is formed by the set-up of effect chains according to the schematic of input-pro￾cessing-output. The connection formation over various abstraction levels is done by dif￾ferent allocation levels [Alt12]. In order to perform this modelling process, this 34 3 State of the art 
engineering-orientated description of system models makes use of specific methods and 
a descriptive language. As both these methods as well as the description language SysML
are strongly connected, they were developed interactively [Iwa13]. Making use of these 
modelling methods and SysML, a functional system architecture can be modelled on a 
system level. At this point, it is important to keep a neutral position to the solution, ena￾bling a technology-independent modelling [Lam13]. In general, the all-enclosing MBSE 
approach consists of three core elements: the ontology, the framework and the view￾points. The ontology identifies and describes concepts, terms and dependencies of the 
system level. The framework describes the usage of the ontology by viewpoints. A view￾point defines a system excerpt, declaring its specification onto a certain point of the on￾tology. This is the reason for the very generic and therefore broadly applicable MBSE 
behaviour [Hol13]. This also enables the specification, analysis, design process and veri￾fication support of a specific system [Fri12]. Additionally, the horizontal and vertical 
traceability (forwards and backwards) of individual elements and their inherent logic can 
be enabled [Gil14]. All in all, MBSE is presented as a holistic approach for a systems spec￾ification. It includes the modelling of structures, functions and behaviours based upon 
their initial requirements in one single, unified model on an abstract level by expressing 
graphical and semantic contexts [Li19]. 
Based upon these findings, MBSE can be seen as an integral part of MBE. The Interna￾tional Council of Systems Engineering describes MBE as 
“an approach to engineering that uses models as an integral part of the technical baseline 
that includes the requirements, analysis, design, implementation, and verification of a 
capability, system, and/or product throughout the acquisition life cycle [Ndi11].” 
This majorly describes the combined inclusion of all relevant development data, such as 
CAD or FEM-Data in order to enable a combined development approach on a generic 
level. Therefore, models are used in order to give the development team an advanced 
understanding of the system’s structure, correlation and behaviour already within early 
development phases. This includes the Model-Based Systems Engineering, which is de￾scribed as
“the formalized application of modelling to support system requirements, design, analy￾sis, verification and validation activities beginning in the conceptual design phase and 
continuing throughout development and later life cycle phases [Inc20].” 
This is based upon the software-supported modelling of requirements and their corre￾sponding discipline-specific system architectures. In order to further enhance the conti￾nuity of the development process as well as the system maintenance throughout all life 
cycle phases, these discipline-specific system architectures are linked in a central root 
data core using the object oriented SysML language. This leads to an interdisciplinary and 
interconnected system model. 3.6 Model-Based Systems-Engineering (MBSE) 35
This major advantage as opposed to the classical document-centred approach is visual￾ized in the following Figure 3-13 according to [Alt12]. 
The left-hand side of Figure 3-13 displays the classic document centred development 
process throughout the individual life cycle phases. As these individual steps are not 
linked to each other, they are susceptible to inconsistencies. Especially with large and 
complex data structures, redundant information cannot be evaded, leading to possible 
versioning conflicts within the development process. This issue is further increased with 
the maintenance of these data structures and the corresponding product generation de￾velopment. Furthermore, a document-centred approach impedes a parallel develop￾ment of various product aspects which are at the same time dependant from each other, 
such as hard- and software. In order to counter these issues, the MBSE approach can 
provide one possible solution. As Figure 3-13 shows, there is one central root data core, 
linking all product development life cycle phases. This central data core is constantly up￾dated and therefore kept at a high consistency level. Adaptions and changes to the ex￾isting data core can be stored as individually versioned instances, easing the develop￾ment of further generations, as the original data state can be revised if required. Sec￾ondly, especially with large and complex data structures, the development process is 
considerably more efficient as with the classic document-centred approach. As all data 
and information are stored within specifically designed models, the individually needed 
data is only derived from these models when needed. This significantly reduces the 
amount of data processing and maintenance. 
3.6.1 Fundamentals of Model-Based Systems Engineering 
MBSE has been developed using abstract system models for the model-based support of 
product development [Hol12]. The MBSE approach allows system elements to be mod￾elled and information to be linked so that information can be stored and used in a net￾work model. The SysML language has been developed as graphical modelling approach 
for MBSE environments. There are various software solutions providing support to the 
Figure 3-13: Document-centred approach vs. Model-based approach according to [Alt12]36 3 State of the art
MBSE product development, such as e.g. Papyrus 1
or the during this presented research 
used Cameo Systems Modeler (CSM)2
. In the following, a brief introduction to the MBSE 
fundamentals is given. 
In general, there are four main pillars the SysML-approach is based upon [Inc15] as 
shown in the following Figure 3-14. 
These four pillars are used to define the description and interaction of the modelled 
product architecture or a specific use case. The first pillar describes the generic model 
structure with the individual structure blocks and individualized objects (1). As this struc￾ture needs to be assigned with a specific behaviour, using activity diagrams builds the 
second pillar (2). The third pillar describes the requirements from which the developed 
structure and behaviour is modelled upon (3). As a last main pillar, the parametric struc￾ture for the modelled use case is described as a formulated relation of individually vari￾able parameters (4), quantifying the generic behaviour of the modelled structure. 
1 Eclipse Foundation, Inc. 2934 Baseline Road, Suite 202 Ottawa, Ontario, Canada, K2H 1B2 
2 NoMagic, Inc: One Allen Center | 700 Central Expressway South, Suite 110 | Allen, TX 75013 
Figure 3-14: Four main pillars of SysML according to [Inc15]3.6 Model-Based Systems-Engineering (MBSE) 37
The SysML notation is based upon nine specific diagrams and tables. Four of them are 
used to create the structure and four to create the behaviour, completed by the require￾ments diagram [Inc20]. The following Figure 3-15 displays this generic SysML Diagram 
structure. 
On the right-hand side of Figure 3-15, the structure diagrams are displayed. Using Block￾Definition-, Internal Block-, Assurance- and Package diagrams, the generic structure of 
the modelled system is described. Within these diagrams, the geometric and structural 
information as well as their relations and dependencies are defined. Based on this object￾oriented modelling, the corresponding logic and functions can also be described using 
the behaviour diagrams as displayed in Figure 3-15 left-hand side. This branch is split into 
the activity diagram, state-diagram, sequence diagram and the use case diagram. As they 
are all used as descriptive elements for the initially modelled structure, they are usually 
considered as consecutive diagrams based upon the structural diagrams. In order to in￾corporate the complete product development process, the requirements diagram dis￾plays the initially defined model requirements. The key aspect of the SysML modelling is, 
that all these described diagrams are based upon one central root data core and are 
therefore all interconnected [Han18a]. Apart from consistency reasons, this enables a 
continuous modelling and traceability from the initial requirements to the corresponding 
structures, logics, functions and possible system states [Ram12]. 
Thus, the usage of MBSE opens up a holistic and consistent integration of a MPAs ontol￾ogy. The individual models can be validated against each other to ensure continuous data 
consistency, even if the models are in a new version or have been modified [Sei19a]. 
3.6.2 Consistency enhancement using MBSE 
As stated before, the concepts and tools provided by MBSE significantly increases the 
available system’s consistency. 
Within consistency management, the model theory can support this process using a ho￾listic and interconnected data model. If product development methods are based on in￾dividual documents that are not linked to each other, data consistency is not guaranteed 
and redundant information sources may arise. Existing data-providing models, such as 
Figure 3-15: Nine SysML-Diagrams according to [Inc15]38 3 State of the art
FEM or CAM models, are thus no longer consistent and inflict changes which may have a 
severe cost impact while still being susceptible to faults. These inconsistency issues also 
occur in methods for the development of modular product families, as large data 
amounts are used, which are not consistently linked with each other. These inconsistency 
errors can also be seen as contractions. Inconsistencies are thus often a source of con￾tradictions in models, which are caused by a lack of consistency management and not 
explicitly documented knowledge [Han18b]. 
The following Figure 3-16 displays the total potential sum of inconsistencies. 
In this context, all inconsistencies within a system’s development are sub-divided into 
identifiable and unidentifiable inconsistencies. The identified inconsistencies can be fur￾ther distinguished into controllable and uncontrollable inconsistencies. The controllable 
inconsistencies can then be separated into solvable, reduced and low-impact inconsist￾encies [Han20]. Using a model-based approach as a single-source of truth [Kau14], the 
ratio of identifiably and therefore, controllable and solvable inconsistencies can be sig￾nificantly increased even for complex systems, providing a major advantage to the clas￾sical document-centred approach. This type of consistency can be of vertical or horizon￾tal characteristic. The horizontal consistency describes the data consistency across dif￾ferent models of the product family within one single product generation, whereas the 
vertical consistency encloses multiple product generations, as they e.g. occur as the re￾sult of MPA maintenance. This is a major step towards providing a system not containing 
any contradictions, which can correspondingly be considered as continuously consistent 
[Her05], [Han20]. 
Figure 3-16: Different types and relations of inconsistencies according to [Han20]3.6 Model-Based Systems-Engineering (MBSE) 39
3.6.3 Single-source of truth: MBSE vs. PLM 
One of the main reasons for using a data management software is its use as "single 
source of truth", i.e. as the sole data master for consistent data maintenance [Kau14]. 
The importance of such a system is evident with the increasing scope of products, espe￾cially since these include a major mechatronic share. At this point, a dispute between 
using Product-Lifecycle-Systems (PLM) with the inclusion of Product-Data-Management￾Systems (PDM) and the use of MBSE can be noticed in the pertinent literature [Stj15]. 
This section is to display the relation and possible interaction between these two main 
approaches. 
Figure 3-17 visualizes the differentiation between PLM and MBSE. 
Figure 3-17: Relation of PLM (left) and MBSE (right) systems 
As Figure 3-17 shows (left-hand side), the concept of PLM is generally used to structure 
large amounts of geometric and structural system information. Conventional PLM sys￾tems have their strength mainly in the administration of CAD data. So far, a physical item 
hierarchy has been created using the bill of material (BOM), on the basis of which differ￾ent models from different subsystems were merged [Sel09]. 
However, as the data formats of the individual subsystems from individual disciplines are 
not always compatible, properly defining the system’s ontology is not necessarily guar￾anteed [Kau14]. At this point, the use of MBSE concepts and tools as well as the applica￾tion of the underlying semantic language SysML can significantly supply support as dis￾played in Figure 3-17 (right-hand side). By creating an integrated meta model with an 
interdisciplinary character, a system of different levels of abstraction can be generated. 40 3 State of the art 
MBSE enables the possibility to efficiently link abstract structural and behavioural infor￾mation [Mue15]. 
This central meta-model is displayed as the central cube within Figure 3-17, with various 
models representing the same objects from different perspectives, similar to the faces 
of a cube representing the same volume from alternative point of views. Furthermore, 
the linking requirements to individual product architecture elements can consistently be 
integrated. Additional boundary conditions or links for components and modules such as 
those provided for by the MIG of the Integrated PKT-Approach [Kra18] can also be im￾plemented. Hence, MBSE can be used to create individually adapted, but still integrated 
compatible models and methods to the existing data structure. 
As Figure 3-17 displays, certain tools and concepts provided by MBSE can be used as an 
extension of conventional PLM systems. EIGNER considers a data framework with model￾based link representations as a great support for PLM systems. Further, the author states 
that pure PLM systems have strong limitations in terms of system accessibility and free 
programmability [Eig12]. 
In particular, the forward and backward integration of all systems can be seen as the 
most significant benefits created by the implementation of MBSE into the development 
process [Her13]. As this contribution’s key aspect is about using a product configuration 
system based upon a consistent data source, this aspect itself needs to be taken into 
account as well. As described in section 4.3, a configurator needs to link customer's re￾quirements via customer-relevant properties to discrete modules. Accordingly, the data￾base of such a configuration system must be able to store qualitative data, such as re￾quirement links and customer-relevant properties, as well as quantifiable values, such as 
costs. 
The combined use of PDM and MBSE systems as a single-source of truth for product con￾figuration systems becomes even more apparent when considering the most important 
requirements for configuration systems. Based upon a complete information system, a 
consistent product configuration and the possibility for plausibility checks need to be 
performed [Goe13], [Dre08]. LIEBISCH shows that this can only be achieved by using a suit￾able modelling language as it can be supplied by the use of adequate MBSE tools [Lie14]. 
As a conclusion, the use of MBSE as an extension of existing PLM systems can be stated, 
providing a basis for a flexible, intelligent configuration system. Additionally, the data 
structuring for the MPA development, implementation and maintenance is provided by 
the application of MBSE systems. SENDLER ET AL. describe the connection between PLM 
and SysML as the basis for a data technology consistency, as not only the geometry and 
structure of a system architecture are managed, but also its logic and functions, based 
upon individual requirements behind the individual system [Sen13]. This interconnection 
is further implicated, as there is specific software available enabling the linking of PLM 
and MBSE systems. The ARAS CORPORATION already offers suitable interfaces [Ara16]. 3.6 Model-Based Systems-Engineering (MBSE) 41 
3.6.4 MBSE concepts supporting the development of modular product architectures 
This section is to give a brief example about how the tools and concepts of MBSE can be 
used within the Integrated PKT-Approach for the development of MPA. 
As one key fact to MPA is their composition of different variants, the modelling of these 
variants is one key fact be analysed. Within the pertinent literature, there are several 
different approaches available, such as e.g. the VAMOS-approach with the corresponding 
MBSE-Plugin [Lam17], the CMS plugin pure::variants [Beu19] or the modelling of variants 
as conceptionally shown in [Han##]. 
The Variant Modeling with SysML, brief VAMOS, describes a SysML profile, which imple￾ments concepts of the variant modelling into the modelling vocabulary of SysML. One 
key aspect is formed by the so-called Variation Point, which marks elements containing 
variants, which themselves can be modelled in a Package Diagram. Between these vari￾ants, constraints can be defined [Lam17]. 
The second possibility is proposed by the CMS plugin pure::variants. This approach sup￾ports the handling of variability throughout the complete development process. A de￾clarative approach is used in order to describe variability and dependencies. Family mod￾els are used for the final implementation. This type of modelling is limited to describing 
one individual product [Beu19]. 
As this thesis is based upon previous research with respect to the modelling of product 
families, HANNA ET AL. provide another alternative for the modelling of variant architec￾tures. By implementing the product family as a tree structure into CMS, with variants, 
components and modules being represented by part-items and linked by composition 
connectors, the structural set-up of an MPA is modelled [Han17]. It needs to be stated, 
that this approach is specifically developed for the modelling of product families and in 
this case adapted to the Integrated PKT-Approach. Nevertheless, this type of modelling 
product architectures in Block-Definition Diagrams with all elements as parts is a com￾mon way in the field of product development as shown in [Bur16] and is not to be con￾fused with standard existing views as e.g. described by the INCOSE group. 
For the following part of the contribution, the last approach based upon the research of 
HANNA ET AL. is used. 
As for the in 3.3 exemplary stated methodical tools for the Integrated PKT-Approach, a 
model-based implementation within the central meta-model is displayed in the following 
Figure 3-18. 42 3 State of the art
In the centre of Figure 3-18, the structure tree of the SysML model is shown. It supplies 
the single-source of truth for e.g. the two tools MIG and VAM of the variant based prod￾uct design (left-hand side) and the two modelled methodical tools DSM and MPC of life 
phase modularisation (right-hand side). Within this central root data core, all relevant 
model elements which are used can be found. These include e.g. the individual modules’ 
components which are used in the different models. Figure 3-18 displays the same com￾ponent (marked in blue) used in these different models, but is stored in the central root 
data core. This ensures a high level of consistency, since changes to a component are 
automatically transferred to the models in which it is used [Han18a]. In addition to the 
objects function and components for describing a MPA, other objects required for a me￾thodical product development or following systems such as e.g. configuration systems 
are also stored. This data is e.g. customer requirements or customer-relevant properties 
[Sei20a]. 
In the following section, the state of the art considering configuration systems is de￾scribed. 
 
Figure 3-18: exemplary tools of the Integrated PKT-Approach modelled in an MBSE-environment based 
upon a central root data core, excerpt of Cameo Systems Modeler according to [Han18a], [Sei20c]3.7 Configuration systems 43
3.7 Configuration systems 
Based on a MPA, configuration systems are indispensable for mastering increasingly 
comprehensive, variant-rich product architectures [Plie11]. LIEBISCH describes a configu￾rator as an instrument to optimally map discrete customer requirements to a suitable 
product variant. However, a general limitation is that the configuration options can usu￾ally never cover the complete range of customer requirements [Lie14]. Since customers 
do not buy customer-relevant features, but rather decide on variant characteristics on 
the basis of these, a configuration system generally has the task of processing all infor￾mation between customer requirements and the final bill of materials, which corre￾sponds to a kind of "translation" [Kor09]. An important fact to state is, that the state-of￾the-art configuration systems only are able to supply a bill of materials containing a list 
of individual modules. The specific correlation between these modules as well as a de￾tailed bill of materials containing the specific parts with all relevant information, such as 
material cost or order-lead time is not available. 
As already stated above, this derivation of the most suitable product variant for the indi￾vidual customer’s needs is key to the company’s success as the customer is only willing 
to invest for the implicit and explicit value a certain product can provide him while ad￾dressing all but not more than his individual set of requirements [Her14]. Therefore, an 
intuitive transfer of the knowledge which is inherited within the modular kit towards the 
customer is a major goal to be challenged. 
The pertinent literature supports the hypothesis of this work that one possible way to 
achieve this individual transfer of a company’s knowledge towards its customer is by us￾ing product configuration systems [Her13], [Her14], [Kau14], [Lie14], [Cic18], [Zen19]. As 
described above, product configuration systems collect relevant customer needs and 
transform them into specific requirements which can then be used in order to determine 
the specific modules from the modular kit meeting those requirements as displayed in 
the following. 
As Figure 3-19 displays, there is a clear separation between the customer perspective as 
represented by the customer needs and the company’s perspective as expressed by the 
customer requirements. This translation process [Lie14] the main configuration process 
task to be performed in addition to the three prior configuration information gathering 
steps. 
Figure 3-19: Generic configuration system process according to [Ris15]44 3 State of the art
3.7.1 Types of configuration systems 
Generally, configuration systems are divided into three main classes [Sha20] as displayed 
in the following Figure 3-20. 
These three types are distinguished by the target group they are designed for. As Figure 
3-20 displays, development configuration systems are mainly designed to support R&D 
processes. Development and design configurators are designed for internal use within a 
product development department. They serve to translate a design problem into a con￾figuration system, within which all design knowledge, such as design rules, design guide￾lines or manufacturing restrictions is stored. The product developer is thus not redun￾dant, but supported by the computational system during the development of complex 
systems. 
Offer configuration systems instead are usually used by sales agents to increase the flex￾ibility and speed of their offer generation and can typically be found in the Business-to￾Business (B2B) environment. These offer configurators, (resp. sales configurators) are in￾tegrated frontend applications, which are mainly used as sales support. They are used to 
translate customer requirements into technical specifications and to partially automate 
the generation of customer quotations by means of calculations, generation of quotation 
documents and, if necessary, visualisation of the end product. The sales configurators 
represent interfaces between the sales department and the development or production 
departments and allow the configured variants to be checked for technical plausibility 
and feasibility [Abb13]. 
Figure 3-20: Types of configuration systems acc. to [Sha20] and addressed 
solution within this contribution in blue3.7 Configuration systems 45
The last category contains product configuration systems, which can directly be used by 
the customer. Such systems are mainly implemented in the Business-to-Customer (B2C) 
environment, as they require a low level of product expertise [Erk09]. In addition, current 
product configuration systems allow the recording of user behaviour, including abort, 
resumption and times of configuration, from which important data can be obtained with 
regard to a preference analysis of different product variants. 
The presented developed configuration system represents an extended combination of 
both product- and offer configuration systems as shown in Figure 3-20. As common con￾figuration systems only produce a Module BOM based upon static implemented con￾straints, the developed configuration system is able to generate a Part BOM for each 
determined product variant with a dynamically adjustable set of constraints and the im￾plementation of a weighted input set of customer requirements. 
In general, configuration systems consist of an interaction platform and a data processing 
tool [And09]. The interaction platform corresponds to the frontend, describing the 
means by which the underlying product architecture is made accessible to the user. The 
data processing tool provides the possibility to manage the data set. 
The terms frontend and backend describe a stratification in information technology, 
whereby the frontend is closer to the user and therefore, the data input, whereas the 
backend is closer to the system and therefore, the data processing. The following Figure 
3-21 displays this generic connection between user, frontend and backend [Raj18]. 
One of the frontend’s main tasks is the presentation level of a computer application that 
is visible to the viewer, for example in the form of a graphical user interface (GUI), which 
closes the gap between the user interface and the logical processing actions in the back￾ground. This is what makes a comfortable interaction with the backend possible for a 
user, which is otherwise only possible by directly accessing the data structure, requiring 
expertise knowledge. One important fact considering the frontend generation is to be 
stated. As a frontend needs to comply at a very high level with the individual customer 
segment of the to be configured product, the frontend always needs to be designed spe￾cifically for the underlying product [Bri19].
Furthermore, the frontend’s second main task is to gather all relevant implicit and explicit 
knowledge necessary for determining the most adequate product variant. These config￾uration relevant data on the one hand are the customer demands or customer require￾ments as a generic definition about the product variant’s expected capabilities. On the 
other hand, the specific expressions of the customer variants are inevitable information 
Figure 3-21: Generic setup of configuration systems: User-Frontend-Backend correlation, according to [Raj18]46 3 State of the art 
to be collected by the frontend design. This information obtained must always be stored 
in a version and time consistent manner, which is why software-based systems are indis￾pensable at this point. This data initially only represents the problem area without gen￾erating a solution [Raj18]. 
A derivation of customer-relevant properties from this data and the translation on the 
basis of the existing MPA is carried out in the backend of the configuration system. The 
backend is the data access level, and therefore the part of an application which is not 
visible to the user. It contains all relevant logical and structural data information of the 
application and thus represents the actual functionality of an application. 
As this thesis contains a configuration system relying on a multi-dimensional decision￾making, the relevant state of the art for approaches to multi-dimensional configuration 
algorithms is explained in the following. 
3.7.2 Approaches to multi-dimensional configuration algorithms 
Within this section, the state of the art considering multi-dimensional configuration al￾gorithms is given. 
The analysis and therefore determination of the most performant product variant alter￾native within the given alternative does not comply with directly calculable systems as 
WEISZ ET AL. mentioned. These problems consist of a non-descript equation system with 
differing numbers of non-descript variables, requiring a non-trivial optimisation algo￾rithm in order to solve this multi-dimensional mathematical problem [Wei18]. As the de￾veloped method contains a developed algorithm for approaching such multi-dimensional 
problems, the state of the art for such algorithms or methods being already applied to 
multi-dimensional configuration problems is stated. 
 Within the field of configuration algorithms, there exists a large number of alternative 
methods and algorithms to be applied to different base problems. According to LIEBISCH, 
they can mainly be divided into two main sectors. The first part of algorithms can be 
allocated to option-based-algorithms, whereas the second part is sorted into target-fig￾ure oriented algorithms [Lie14]. 
The first sector, the target-figure oriented algorithms, intends to address the underlying 
modular kit with the intention of matching every single posed customer requirement. 
The usually are based upon simple and sequential match-checking algorithms under con￾sideration of the given modular kit constraints. Since every boundary condition is consid￾ered, regardless of whether it is relevant to the current problem, this leads to very long 
calculation times and prevents the consideration of partial solutions to the problem.
As these two aspects impose a severe issue when addressing complex structures, the first 
model-based algorithms were implemented. By using decision trees for individual con￾figuration problems, complex and consecutively modelled architectures can be split into 
advance-calculable problems through recursive application. As the basic structure for 
these algorithms mainly can be seen as a tree chart – compare also Figure 3-22, the 3.7 Configuration systems 47
individual tree branches, representing the dependencies and constraints can be de￾creased with every configuration iteration step. 
By moving down the tree branch structure level by level, the complexity of the still in 
advance being data model is significantly decreased with every step [Had06]. This kind 
of algorithm can also be performed efficiently by applying target-figure oriented systems, 
but with the sole condition of requiring a perfect solution for all customer requirements. 
Such a specific algorithm is e.g. proposed by KRIETER ET AL., where the configuration prob￾lem is stated as a propagating decision method, with every tree chart knot requiring ei￾ther an optional or mandatory decision. The implementation of an advance cross-branch 
check for decision consequences leads thereby to a further reduction of the amount of 
to be considered constraints. This significantly increases this configuration algorithm’s 
performance [Kri19]. 
When it comes to modular kits not allowing for perfect configuration fits but just for 
partial fits, the used algorithm is required to be designed according to the principle of 
option-based systems. Within these algorithms, every module of the underlying modular 
kit is considered as a potential option, which can be chosen to be integrated into the 
product variant. Thereby, step by step the configuration process allocates these options 
to every single customer demand. This does not allow for only one single configuration 
solution, but several solutions with differing degrees of customer demand satisfaction. 
This is due to option-based algorithms not needing to fulfil the constraint of meeting all 
Figure 3-22: Exemplary definition of target-oriented algorithm tree chart, based on [Had06]48 3 State of the art
customer demands and therefore can in the least case return a solution meeting only 
one individual customer demand [Zen19]. Therefore, systematics for identifying the most 
adequate solution amongst these individually returned configurations is necessary. 
Such a systematic is e.g. proposed by CICCONI ET AL. The authors present an approach 
based upon modelled product architectures within the configuration algorithm using the 
customer demands as the decision algorithm framework. Using only this influencing fac￾tor, the by the algorithm derived configuration solutions are assessed and distinguished 
upon their degree of customer demand satisfaction [Cic18]. 
As these algorithms all come with the same issue of considering all derived configuration 
solutions as equally performant and therefore are only differentiated by the apparent 
degree of customer demand satisfaction, other relevant factors are not taken into ac￾count. As it is to be estimated, that not all customer requirements can correspond with 
the underlying MPA, especially when considering product architectures with a large num￾ber of modules and constraints, the amount of satisfied customer requirements is not 
the only important factor. This results in misleading configuration results if the decision 
is only based upon this factor. SCHNEEWEISS AND HOFSTEDT claim that in such cases, custom￾ers tend to prioritise amongst their initially given requirements, leading to the configu￾ration being a balance between customer satisfaction and product variant performance 
based upon subsequent customer requirements and the modular kit [Scn13]. 
3.7.3 The Dijkstra-algorithm as basis for the configuration system 
For the during this thesis presented configuration algorithm, a method for the determi￾nation of valid configuration paths is required. The developed method is based upon an 
algorithm which is usually used for car navigation systems. 
The Dijkstra-algorithm comes from a class of algorithms originally developed to deter￾mine the shortest path between two points. The following Figure 3-23 displays an exem￾plary, simplified roadmap, which is used as a calculation basis of the Dijkstra-algorithm. 
In the case of using the Dijkstra-algorithms as a car navigation algorithm, the circles 
would represent the cities and the arrows would represent the roads. 
The algorithm calculates the distance for every valid path from a defined starting point 
to a defined end point. The final step of the algorithm results in the comparison of the 
path lengths and the subsequent derivation of the shortest possible solution. As being a 
representative of these so called greedy-algorithms, further adaptions have been made 
Figure 3-23: Exemplary and simplified roadmap for Dijkstra-algorithm, based on [Dij59] and [Bro19]3.8 Definition of the considered demand for further research 49 
to the original algorithm, increasing the number of points, between which valid paths 
and their corresponding dimension values can be calculated. With these specific adap￾tions, this number can rise up to an infinite amount [Dij59], [Bro19]. 
3.7.4 The Hyperspace as a basis for the geometric configuration algorithm 
An additional part of the configuration and simulation method is based upon a geometric 
solution in multiple dimensions. This leads to a geometric space which is highly likely to 
have a dimension number n with the characteristic 
݊൐͵
This leads to a solution space being mathematically referred to as a Hyperspace. It is im￾portant to state for the developed thesis, that this multi-dimensional space can either 
possess Euclidian or different characteristics [Die00]. 
In the following section, the demand for further research this thesis aims to address is 
defined. 
3.8 Definition of the considered demand for further research 
In the following section, demands for further research are displayed, leading to specific 
requirements upon which the developed methods are based on. 
3.8.1 Bibliographic analysis 
According to the research questions stated in section 2.2, the field of interest is clearly 
defined. In order to analyse the relevance of this contribution, based upon the state of 
the art and its interconnections, a co-citation analysis is one of the possible ways to 
properly identify existing links or gaps within this research area. 
By reducing the number of contributions to be analysed by this bibliographic analysis to 
only the most pertinent ones from the fields of modular product architectures, modular￾ization, PLM or MBSE based modular kits, configuration system and architecture alterna￾tive analysis, a total sum of 103 contributions remained. All relevant articles originating 
from Scopus, Web of Science and Google Scholar databases can be found in annex 7.1. 
Using VOSviewer as a bibliographic analysis tool and analysing the keyword connections 
with fractional counting, the outcome of this analysis is shown in the following Figure 
3-24. 50 3 State of the art
 The figure clearly shows four different, individual clusters which are linked to the re￾search areas of Modularization, MBSE and SysML, Ontology and PLM and Product Con￾figuration Systems. It becomes obvious, that the impression being made while reading 
the pertinent literature, that the connections between modularization, PLM and MBSE 
are expressed quite strongly. The expansion of PLM systems as a suitable database form 
for MPAs by using MBSE can also be found within this analysis. Furthermore, product 
configuration systems are also linked to the area of modularization, which seems reason￾able as they strongly rely on a modular kit as a data basis. 
Interestingly, there is no direct connection between MBSE/SysML and Product Configu￾ration Systems visible. As already described, the use of MBSE for developing dynamic and 
adaptive product configuration systems seems to be inevitable. Furthermore, the con￾sistent and continuous expression of the product architecture in the environment of 
Cameo Systems Modeler up the possibility for an software-based analysis concerning the 
determination of the most performant product architecture alternative amongst the 
given alternatives. For those two research areas, no pertinent research was found while 
studying the literature. Therefore, this thesis is to provide one possible solution for clos￾ing this gap by developing a methodical approach for a multi-dimensional simulation 
when determining the most suitable modular product alternative by using a MBSE-based 
configuration system as a key element. 
During the following section, the research requirements forming the baseline for the 
methods developed within the presented research are stated. 
Figure 3-24: Bibliographic keyword-analysis of product configuration systems, PLM systems, SysML/MBSE 
systems and methodical MPA modularization and depicted research gap [Sei19a]3.8 Definition of the considered demand for further research 51 
3.8.2 Definition of research requirements 
As a result of the above-described state of the art as well as of the in Figure 3-24 dis￾played research gap, individual requirements for the developed methods can be derived. 
As these requirements need to implement aspects from the displayed clusters in Figure 
3-1, they are also structured into four categories: MBSE data basis requirements, Config￾uration system requirements, MPA simulation requirements and – as these different re￾search areas need to be combined – interface and translation requirements, with the 
most important ones stated in the following. 
MBSE data basis requirements 
According to the research hypothesis and the different aspects of MBSE as displayed dur￾ing section 3.6, the data basis for the developed methods is provided by using the MBSE 
concepts and tools. These model-based data basis prerequisites can be clustered into 
two main categories as follows: 
Data-based requirements according [Dan16] 
 Large amounts of data need to be stored in a universally applicable and consistent 
format. 
With large data amounts and especially data in different formats to be stored and 
processed while keeping consistency during change and versioning processes still at 
an adequate level, the concept of MBSE provides one suitable solution as already 
described during chapter 3.6. 
Modular-architecture based requirements [Boc19], [Han18b], [Sei20a], [Sei20b], [Kue20] 
 The knowledge from the modularization process must be represented with all known 
parameters from different perspectives. 
First of all, the structure needs to support the representation of knowledge, generated 
during the modularization process. the MPA of the individual company needs to be ex￾pressed within this data structure at a highly granular level. Not only there is the need to 
integrate the individual modules with their corresponding components, but as well their 
degree of variety, optional or compulsory properties. According to the goal of imple￾menting the modular kit, which is composed of as well the MPA and its underlying set of 
dependencies, a major task of the to be developed data structure is modelling these de￾pendencies between customer-relevant properties, modules and components. On the 
one hand, there are dependencies from modules requiring other modules. On the other 
hand, there are dependencies, where the use of a specific module in the individual prod￾uct variant inhibits the use of another module in the same product variant. These inter￾correlations and inhibiting dependencies are considered as constraints. All in all, the set 52 3 State of the art 
of dependencies and constraints which is to be expressed by the data structure generates 
an increasingly complex network of rules, being directly dependant from the MPA’s com￾plexity. This network needs to be implementable and accessible not by using code loops 
such as e.g. if-then conditions, as this would strongly inhibit dynamic adjustments and 
the maintenance ability of the MPA. Therefore, one major requirement to the data basis 
is the intuitive and accessible definition and dynamically adjustable setting of these de￾pendencies and constraints. As there are different perspectives to be integrated, a data 
model for structuring as well the customers perspective and its relation towards the com￾pany’s perspective by using the MPA approach is necessary. From a customer perspec￾tive, the most important information to be integrated are the individual customer re￾quirements. As the customer usually only possesses information about his individual set 
of requirements without knowing about the to be purchased system’s specifications, the 
transition between customer requirements and the corresponding company perspective 
(the customer relevant properties), needs also to be performed by the data model. 
In the following, the prerequisites for the developed configuration system method are 
described. 
Configuration system prerequisites 
In general, the configuration system needs to act as a translation part between the cus￾tomer and the company as described during section 3.7 and therefore transfer the cus￾tomer’s requirements methodically into a matching product variant. This leads to the 
following configuration system requirements according to [Wue00], [Ble04], [Sch06], 
[Dre08], [Goe09], [Kru10], [Lie14], [Bur16] and [Raj18]: 
 Customer needs must be determined, interpreted and compiled into a company-per￾spective, which can also be seen as customer-relevant properties. 
 Specific and customer-need matching product variants must be derived upon these 
customer-relevant properties. 
 The configuration system must be based upon a modular kit. 
 All components and their dependencies must be transferred to the product configu￾ration system. 
 A modelling language that can process complex interrelationships and dependencies 
and still present them in maintainable way must be used. 
 For the determination of complex product variants, the plausibility of the module 
composition must be guaranteed. 
 The MPA and the corresponding set of constraints should be developed and modelled 
at the same time. 
Based upon these configuration system requirements, the simulation requirements are 
stated. 3.8 Definition of the considered demand for further research 53 
MPA simulation prerequisites 
This simulation process needs to fulfil a certain set of requirements. 
These prerequisites can be split into modular-architecture-based prerequisites , transla￾tion prerequisites and technical prerequisites according to the work of [Kov19], [Boc19], 
[Cle20] and [Sei20a] and are stated in the following. 
Modular-architecture-based prerequisites 
 The modular kits with all dependencies and constraints must be represented. 
This is the most crucial modular-architecture-based prerequisites and is to represent 
the developed modular kits and therefore different MPAs. Of major importance are 
their varying sets of dependencies and constraints within these architectures 
amongst modules, components and requirements [Bur16].
 Alternative MPAs need to be implemented. 
The simulation therefore needs to be based upon these alternative architectures 
with the possibility of dynamically integrating new alternatives [Boc19]. Dynamically 
in this context describes a generative algorithm which loops automatically through 
all existing input-alternatives without the user needing to change the simulation it￾self. 
 A robustness towards changes of the MPA should be enabled. 
This leads to the next prerequisites within this category, the robustness towards 
changes of the data basis [Kov19]. When alternations to the underlying MPAs are 
developed by the modularization team, those changes need to be intuitively intro￾duced into the simulation system. 
Translation prerequisites 
 The transition between the customer product requirements understanding and the 
company understanding of the customer needs must be enabled. 
The translation prerequisites are to describe and implement the transition between 
the customers’ understanding of the requirements and the company’s understand￾ing of the customer request needs. This is to be performed in a quantitative and 
repeatable way by the simulation [Cle20]. This prerequisite’s importance is strongly 
dependant on the ratio of configurability or product differentiation against com￾monality within the company’s product architecture as represented in the following 
Figure 3-25. 54 3 State of the art
As Figure 3-25 displays, customers usually tend to demand for a high degree of prod￾uct differentiation in order the differentially meet specific requirements. This has a 
direct impact onto the implemented MPA’s degree of variance. Therefore, the sales 
agents and the portfolio managers intend to match this opinion, aiming for a re￾duced over-dimensioning and an increased reaction speed and flexibility in order to 
meet specific customer requirements – compare Figure 3-25 left-hand side. On the 
other hand, the company perspective is to implement as many common parts as 
possible. This reduces the work load for the sales department, as training and 
presentation can be reduced. Additionally, for the production department, pro￾cesses can be standardised with fewer parts, which enables an increased application 
of the overall resources. The logistics department thereby needs to handle fewer 
internal and external traffic from a reduced number of suppliers, followed by the 
development team which can due to these measures more likely meet the manufac￾turing cost goals – compare Figure 3-25 right hand side. 
Both parties “pull” on the to be implemented MPA strategy, leading to an ideally 
balanced point between product differentiation and product commonality. 
In general, this tendency is considered as leaning towards the commonality (right￾hand, company-perspective), as the positive effects of standardization and variety 
reduction counter the marginally reduced configurability [Sei20a]. 
With respect of the prerequisites to implement the translation of these two differing 
perspectives, it can be stated that a higher degree of commonality can still lead to 
an increased customer satisfaction if this inherent knowledge is adequately trans￾ferred towards the customer. By allowing the individual customers to attain close 
knowledge about their ordered benefits and, probable cost advantages due to a in￾creased degree of standardization, the modular kits acceptance can be increased 
[Lie14]. 
Figure 3-25: Pulling-Forces diagram, according to [Eil11]3.8 Definition of the considered demand for further research 55 
Technical prerequisites
 A dynamic ontology sequencing must be enabled. 
Furthermore, corresponding with the robustness for changes mentioned earlier, a 
dynamic and generic determination of the logic structure and therefore ontology of 
the simulation is inevitable. This aims for an interchangeability and generic use ena￾blement of the developed method when addressing alternative products. 
 Multiple, non-discrete variables must be co-calculated. 
The last prerequisites is to develop an approach about how to co-analyse and opti￾mise multiple non-discrete variables in order to cope with differing customer and 
business environments [Dan16]. This aspect includes the processing of individual 
analysis dimensions as well as performance-influencing factors. 
As the individual parts of the developed methods need to interact with each other, such 
as the configuration system needing to access the modelled MPA within the MBSE envi￾ronment, specific interfaces need to either be used or, if there are none, need to be de￾veloped. These interfaces need to meet certain requirements, which are stated in the 
following.
Interface development prerequisites 
As the research within the existing commercial solutions as well as the pertinent litera￾ture has shown – compare also section 3.6 and section 3.7 – there are no state-of-the art 
solutions to the proposed research problem. Therefore, the interface needs to be devel￾oped specifically for the configuration and simulation methods, which’s requirements 
can be split into the following two categories: 
Data-structure and product configuration system-based prerequisites [Dan16], [Sei19a] 
 The compliance with the requirements of data structure and the transfer of the rele￾vant information must be enabled.
The interface needs to be able to transfer all configuration relevant data, including 
all objects, such as customer-relevant properties, modules, dependencies and con￾straints. In order to enable this transferability, the interface needs to be compliant 
with both the model-based environment and the product configuration system 
structure. 
 The compatibility and consistency between systems must be achieved.
Furthermore, a data consistency in both directions is to be kept. This directly results 
in the interface needing to follow the model-based approach by deriving the re￾quired information only when needed from a general root data set, which is 56 3 State of the art 
constantly updated with the model-based root structure, which uses concepts and 
tools of MBSE. 
General prerequisites [Sei20a], [Cle20], [Bon05] 
 A dynamic derivation of the necessary data is required. 
As already described, the dependencies and constraints implemented for every MPA 
alternative are not to be hard-coded within the product configuration systems algo￾rithm for efficiency and maintainability reasons. Therefore, the interface needs to 
enable a dynamic and generic constraint derivation by the product configuration 
system based upon the MBSE data structure. This results in the configuration algo￾rithm being completely product-unspecific apart from the connection of customer 
needs to customer-relevant properties and generating the otherwise large amount 
of if-then-else conditions by referring to the modelled data structure. 
 A data and system maintenance without special IT expertise should be enabled.
The last prerequisite to be fulfilled by the developed interface concerns the general 
maintainability of the system. Therefore, when maintaining, altering or further de￾veloping the underlying MPA alternative, the interface still needs to provide all rel￾evant data without requiring expert IT-knowledge for adapting the interface to the 
new MPA alternative. 
Subsumption of prerequisites 
On the basis of the above-stated prerequisites, four main prerequisites for the to be de￾veloped methods are developed: 
 A performance assessment by using multi-dimensional criteria must be applied, orig￾inating both from the customer’s and the company’s perspective. Furthermore, these 
multiple criteria should form a combined evaluation factor. 
 The customer’s perspective must be included, including trade-offs in favour for the 
company’s perspective. 
 The adaptation effort of the method when being applied to a specific use case should 
be minimized. 
 Different data types for large and complex MPAs need to be integrated, processed, 
validated, checked for plausibility and maintained consistently. 3.8 Definition of the considered demand for further research 57
With respect to the criteria used for the classification of MPA performance assessment 
methods in section 3.3, the original Table 3-1 is expanded by the above-stated four major 
prerequisites. This leads to the following classification of the already existing methods, 
as Table 3-2 shows. 
Table 3-2: Comparison of relevant MPA performance assessment methods with known requirements (left) 
and additionally developed prerequisites (right)58 3 State of the art 
Table 3-2 displays on the different stated MPA performance assessment methods classi￾fied by the in total eight criteria and prerequisites. The four left columns of criteria have 
already been displayed and explained during section 3.3, whereas the right four columns 
represent the newly derived requirements. 
It is clearly visible, that none of the displayed approaches can address all relevant criteria 
to full extent. Nevertheless, the Integrated PKT-Approach meets the requirements best, 
which is the reason for the presented research being based upon this set of methods. 
The eight relevant criteria together with the detailed prerequisites as described in the 
section above form the outset point for the developed methods, which are explained in 
close detail during the following chapter 4. 
 4 Simulation approach for the performance analysis of 
modular product architectures 
During this section, the developed simulation approach for the performance analysis of 
MPA alternatives is generically described. Furthermore, this section contains a detailed 
description of the developed model-based data structure, the interface to the developed 
configuration system and the configuration system itself. In order to increase the descrip￾tions understandability, a simple explanation example is used, which is described in the 
following. 
The following section 4.1 gives a general overview considering the two main developed 
methods – the configuration system as well as the performance analysis simulation – 
together with their relevant interconnection. 
4.1 Overview to the correlation of the simulation and configuration methods 
In this section, the connection between the two developed methods for the MPA perfor￾mance analysis simulation – which is called Method 1 in the following – and the method￾ical derivation of product variants according to individual customer needs – Method 2 – 
is described. 
The following Figure 4-1 describes the connection between the two methods as well as 
their inputs and outputs on a generic level. A thorough and detailed explanation is given 
during the subsequent chapters. 
 
Springer-Verlag GmbH, DE, part of Springer Nature 2022
F. M. Dambietz, Performance simulation of modular product architectures by 
model-based configuration, Produktentwicklung und Konstruktionstechnik 21,
https://doi.org/10.1007/978-3-662-64233-7_4
© The Author(s), under exclusive license to 60 4 Simulation approach for the performance analysis of modular product architectures
It can clearly be seen, that Method 1 for the MPA performance analysis simulation fully 
embraces the configuration system, which is the core element of Method 2. 
Both methods are based upon the modelled description of initially developed MPA alter￾natives. This input, compare also Figure 4-1 left side, usually is created by applying man￾ual methods, such as the Integrated PKT-Approach with its workshop-based modulariza￾tion methods. Additionally, these MPA alternatives come with specific data attributes, 
which are generally implemented in company PDM systems, such as the discrete article 
numbers, part costs, production times and order-lead times. As these data possess a 
large variety of data types and need to be properly maintained and checked for plausi￾bility, it is a reasonable approach to transfer these individual and non-linked data into an 
interconnected meta-model – compare also section 4.3.1. 
Figure 4-1: Schematic overview of the set-up and interconnection between the two developed methods4.1 Overview to the correlation of the simulation and configuration methods 61 
This modelled MPA alternatives, which can be seen in Figure 4-1 – left part of Method 1
box – serves as the data basis for both Method 1 and Method 2. As the configuration 
system is fully incorporated as a central element of Method 1, it needs to be explained 
first. 
With all relevant paths for the configuration system method being displayed in Figure 4-1 
as dashed lines and arrows, the configuration process begins on the top-right part of Fig￾ure 4-1 with the initial requirements of one individual customer. These requirements 
serve as an input for the configuration system and are used for the derivation of the 
matching product variants. At this stage, the configuration system uses one specific mod￾elled MPA alternative as a data basis. At this point, the MPA in addition to the modelled 
set of constraints form the applied modular kit. This modular kit is used to algorithmically 
derive the matching product variant for the initial customer requirements, which is also 
the output of Method 2, compare also Figure 4-1 upper-right corner – Method 2 box. 
As Method 1 describes the performance analysis simulation for MPA alternatives, it is 
also based on the modelled MPA alternatives. The paths for Method 2 in Figure 4-1 are 
displayed as continuous lines. 
The input to the simulation method is composed of two different aspects, forming a con￾stant input data set. On the one hand, multiple sets of customer requirements – as dis￾played in Figure 4-1 in the top-right bar – form the first input part. The second part is 
formed by the dimensions, under which the MPA alternatives are to be analysed, such 
as variance, order-lead time or cost. These dimensions are represented in a vectorized 
form by the Configuration-Value-Vector (CVV) as displayed in Figure 4-1 top-left bar. 
Therefore, the analysis dimensions as well as the multiple set of customer requirements 
stay the same for all simulation iterations. 
This input is transferred to Method 1. This method applies multiple iterative configura￾tion steps on the basis of different MPA alternatives by configuring product variants for 
the simulation input customer requirements. At first, the first modelled MPA alternative 
is used as a basis to create the modular kit for the configuration system. By applying this 
modular kit to the initial customer requirements, the configuration system determines 
product variants for each customer within the input data set, resulting in several cus￾tomer requirement – product variant data sets based on the first MPA alternative. By 
applying the CVV analysis dimensions to these individual product variants, a performance 
index calculation is carried out. Therefore, a single performance index is the result of the 
first iteration loop of Method 1. This same process is carried out for each individual MPA 
alternative, leading to performance indices for each individual MPA alternative – com￾pare also Figure 4-1 right-lower corner with the iteration loop. As these indices are based 
on the CVV-input data, it represents a multi-dimensional decision criterion upon which 
the modularization team can base the decision about which MPA alternative shows the 
highest level of performance amongst the initially developed alternative MPAs. 62 4 Simulation approach for the performance analysis of modular product architectures
In the following, Method 1 and Method 2 are described in close detail using a simplified 
explanation product example, which is briefly described in the following section 4.2. 
4.2 Definition of the Flow Diverter explanation example 
For reasons of explanation, the example of a medical product that is used in this contri￾bution is of reduced complexity and adapted to the specific method use cases, allowing 
a clear focus on the functionality of the methodical approach. In the following section, 
necessary background information for the Flow Diverter product example is described1
. 
As the Flow Diverter product is used to patch blood vessel aneurisms, a brief explanation 
of their nature is given. Representing a pathological dilatation of a blood vessel, which 
preferentially occur at various intersections and bifurcations of the blood vessel tree, 
aneurisms usually require artificial patching [Gas05]. Amongst other blood vessels, brain 
vessels are mainly affected with alternating degrees of frequency (see Figure 4-2) 
[Gas05], [Hac10]. As a rupture-preventing method for the aneurysm, leading to life-en￾dangering brain bleeding, such aneurysms are taken care of with Flow Diverters under 
certain conditions [Gas05]. A Flow Diverter is a braided stent that is implanted into the 
blood vessel in front of the aneurysm, reconstructing the vessel and altering the blood 
flow into the aneurysm so that it can regress to the aneurysm [Dur11]. 
A crucial condition for this is that the Flow Diverter needs to match as comprehensively 
as possible to the interior of the blood vessel, which is why the Flow Diverters diameter 
should be at least as large as the diameter of the vessel [Sei20b]. In addition to that, 
although the Flow Diverter’s length is to be chosen as short as possible, it must cover the 
1 Compare also the Project “BELLUCI”, enabled by the Bundesministerium für Bildung und Forschung (8MBF) in cooperation 
with the Acandis GmbH, the University Clinic Hamburg (UKE), the Institute of Mechanics Magdeburg (IFME) and the Institute 
for Product Development and Mechanical Engineering Design Hamburg (PKT) from 2018 to 2021.
Figure 4-2: Flow Diverter frequency distribution (a), exemplary product family (b) and anatomic set-up de￾scription (c) according to [Sei20b]4.2 Definition of the Flow Diverter explanation example 63
aneurysm to an adequate extent (at least 5 mm before and after the anatomic defect) 
and, as far as possible, not terminating in a vessel bend [Dur11]. With respect to these 
requirements, several manufacturers offer Flow Diverters with alternative length and di￾ameter variations, from which the treating physician needs to choose a matching size 
(compare Figure 4-2). 
For the upcoming method explanation, the Flow Diverter product example is divided into 
three individual modules with several components based upon [Kuh21]. It needs to be 
stated, that the explanation example has been adapted in order to enable a more fo￾cused explanation of the method. The following Figure 4-3 displays the schematic set-up 
of the used Flow Diverter product. 
Figure 4-3 displays the differentiation of the Flow Diverter into three individual modules. 
The central Aneurysm Module is used in order to patch the anatomic defect itself and 
consists of three components. These components differ in their weaving pattern, as the 
weaving pattern is relevant for the detectability with X-Ray systems. As the anatomic 
defects have a smaller distal and a larger proximal part, these X-Ray detection compo￾nents are placed on either side of this central module. The left and right Distal and Prox￾imal Modules both consist of two components, with the patching components being var￾iant in length and diameter, whereas the X-Ray detection components are standardised. 
Another important fact for the explanation example is that the Flow Diverter can be man￾ufactured from two different shape memory alloys. 
All in all, the via the application of the simulation method to be reached goal is to identify 
the ideal MPA with the ideal set of diameter and length expressions considering the two 
before mentioned constraints. By using an anatomy database with a total amount of 100 
Figure 4-3: Flow Diverter explanation example, based upon [Kuh21]64 4 Simulation approach for the performance analysis of modular product architectures
vascular defects described, the diameter fit and the length fit are regarded as two sepa￾rate optimization dimensions when simulating the MPA alternatives. 
The following chapter 4.3 explains the developed methodical configuration system using 
the Flow Diverter product example. 
4.3 The configuration system as element of the simulation method 
In this section, the developed product configuration system as the central part of 
Method 2 for the methodical derivation of product variants (PV) is described. In order to 
increase the explanation transparency, a simplified explanation example is used. 
In the following Figure 4-4, the generic set-up of Method 2 is displayed with all relevant 
and detailed input-, processing-, and output steps. 
The left part of Figure 4-4 displays the within the model-based environment modelled 
MPA. In this case, only one single MPA alternative is displayed, as the configuration sys￾tem only addresses one single modular kit originating from the MPA. In this MBSE-mod￾elled MPA, there is on the one hand the meta-model displaying the set-up and relations 
of the relevant MPA, including individual components, modules, module variants and 
customer relevant properties. Together with the data attributes from the PDM system 
as shown in Figure 4-1, the individual components are further detailed into individual 
parts with article numbers, material costs, order-lead times etc. According to the initially 
Figure 4-4: Schematic set-up of product configuration system (Method 2)4.3 The configuration system as element of the simulation method 65 
imposed requirements during section 3.8.2, the MPA needs to be modelled at the same 
time as the corresponding set of dependencies and constraints, linking e.g. the individual 
customer-relevant properties and their corresponding modules by a described set of con￾figuration rules. As all these data cannot be processed within the MBSE environment due 
to missing possibilities for individualized programming and visualization, these data need 
to be exported in a format, that is accessible by the configuration system. As Figure 4-4 
shows, this transition is performed by the developed Rollup Pattern interface, which is 
further detailed in section 4.3.5. These exported data, especially the MPA and the set of 
constraints, form within the configuration system the modular kit data basis. Further￾more, these exported data contain also relevant information about the MPA compo￾nents’ characteristics according to the dimensions imposed by the CVV-values. As dis￾played in Figure 4-4 top-left, these dimensions are implemented in a vectorized format. 
In this case, there are three relevant parameters, the module configurability, the manu￾facturing cost and the order-lead time. These parameters are later used for the determi￾nation of the most matching product variant. Due to that, discrete values for all compo￾nents representing these CVV dimensions are also part of the configuration modular kit. 
When it comes to the methodical determination of product variants, the customer re￾quirements as displayed in Figure 4-4 top-right bar represent the main input. In this case, 
two input values – defect length and defect diameter – are relevant. The next step is to 
translate the customer perspective, which is represented by the anatomic defect’s char￾acteristics, into the company’s perspective. This company perspective is represented by 
a set of customer-relevant properties leading to a matching product variant. 
This product variant determination is divided into two main steps as Figure 4-4 middle 
part displays. At first, all valid product variants matching the initial set of customer-rele￾vant properties are determined on the basis of the MPA. For this step, an adapted Dijks￾tra-algorithm is used, which is further described in section 4.3.7. This algorithm returns 
all valid paths between customer-relevant properties and corresponding module vari￾ants, leading to a set of valid product variants. Nevertheless, only one individual product 
variant can be returned towards the customer as a result of the configuration process. 
Therefore, the individual valid product variants need to be assessed by the CVV-dimen￾sions in order to derive, which of these valid product variants matches the customer re￾quirements best. This is done by applying the developed Hyperspace-algorithm, which is 
further described in section 4.3.8. This algorithm is able to derive a multi-dimensional 
decision criterion and can therefore support the decision process about which product 
variant matches the customer requirements the most. Accordingly, the final product var￾iant is determined and returned towards the customer as it can be seen in Figure 4-4 
right hand side. This includes the display of a product variant visualization, a complete 
list of the relevant module variants and components, leading to a complete article-num￾ber based BOM. Furthermore, it can be assessed, to which extent the customer require￾ments have been bet, which is displayed by the configuration depth index. 66 4 Simulation approach for the performance analysis of modular product architectures 
In the following, the MPA data basis structuring as developed for the configuration sys￾tem method is described. 
4.3.1 MPA data basis structuring 
In order to be able to model the relevant MPA in the above-described manner, one main 
issue which is to be closely regarded is the specially adapted data basis. This data basis 
represents the starting point the modularization team’s knowledge transfer, the descrip￾tion of the different modules with their dependencies and constraints forming the alter￾native MPAs and corresponding modular kits. It forms as well the data basis for the prod￾uct configuration system. Accordingly, this data basis is a key element for the overall 
performance of the methodical approach and is realized using a SysML-based approach 
according to the during section 3.8.2 stated requirements. 
According to the above-mentioned requirements, the criteria for choosing the most suit￾able data model for the implementation into the CSM-environment can be defined as 
the following: 
 The conjoint customer relevant properties (CCrP) and therefore the customer’s per￾spective must be displayed – compare section 3.1. 
 The modular kit with its components, modules, module variants and the set of de￾pendencies and constraints amongst them must be described. 
 The variance/optionality within the MPA must be expressed. 
 The possibility to assign individual values to the MPA’s components should be given. 
 The possibility to export scalar (single) elements for further processing should be en￾abled. 
This leads to the implementation of the Network Diagram from the Integrated PKT-Ap￾proach being used as the basis for the presented research, the most suitable, methodi￾cally proven database is the Network Diagram, compare also Figure 3-8. This structure is 
a well-established mean for representing the dependencies between the customer’s 
view and the company’s view. By already translating the total collection of customer re￾quirements which can be met by the underlying MPA into customer-relevant properties, 
the transition between two probably differing understandings can be made. Further link￾ing these customer-relevant properties to module drivers, expressing different strategic 
targets, depending on the product life phase the Network Diagram is designed for, a clear 
definition of the modules’ aim is represented. Linking these module drivers and therefore 
the customer requirements to individual components, a kind of clustering for these com￾ponents can be made. These individual components therefore are summarized into mod￾ules. In general, the basic goal is to create a proper one-to-one allocation between cus￾tomer-relevant properties and modules. Nevertheless, considering the experience made 
from several different industry projects, this cannot always to be realized with still keep￾ing the economic efficiency at an adequate level. As already mentioned, these Network 
Diagrams are developed during the modularization phase by the modularization team 4.3 The configuration system as element of the simulation method 67
individually for the different product life phases. Due to the fact, that this specific Net￾work Diagram is used as a data structure for product configuration systems, the Network 
Diagram is going to be used. Nevertheless, the original Network Diagram according to 
KRAUSE AND GEBHARDT [Kra18] – compare also Figure 3-8 in section 3.3– needs to be 
adapted specifically in order to enable all above-stated requirements to be met. The fol￾lowing Figure 4-5 displays the generic scheme of the developed Configuration Network 
Diagram (CND). 
Within the developed scheme for the Configuration Network Diagram, the three main 
columns for customer-relevant properties, modules and module variants with their com￾ponents are integrated in the data structure. Within this diagram, it can clearly be defined 
which customer relevant property demands for which modules consisting of which spe￾cific components. 
As the major module driver of the sales life phase is described as configurability, the 
module drivers itself are not modelled within the CND. This single focus on one module 
driver allows for a more performant system. Therefore, module drivers are not imple￾mented within the MBSE-environment. As the above Figure 4-5 displays and with the 
major task for the later configuration process being linking customer-relevant properties 
to modules, this process flow can be implemented according to the MPA data model in 
a linear way. Furthermore, as shown in Figure 4-5, the variance or optionality within com￾ponents or modules can be implemented, displayed as white for standard, grey for vari￾ant and dash-lined for optional. Additionally, with the individual customer’s specific re￾quirements combined with their expressions serving as an input for the SysML-based 
configuration process, the developed configuration system is using the exported MPA￾Figure 4-5: Generic display of Configuration Network Diagram (CND), according to [Sei20a]68 4 Simulation approach for the performance analysis of modular product architectures
CND as a roadmap for the determination of the correspondingly matching modules. The 
total sum of determined modules in their specific variants finally form the derived prod￾uct variant, meeting the initial customer requirements. 
Nevertheless, as the exact determination of the module variants cannot be performed 
within the same Network Diagram, a sub-level network diagram for the connection be￾tween modules and their available module variants is required. 
The following Figure 4-6 shows a schematic display of this sub-level network diagram. 
This Figure 4-6 displays a variant and therefore in grey visualized module consisting of 
several individual module variants. As these module variants themselves represent the 
lowest level of variance consideration, they are all stylised in grey (variant) and can have 
different degrees of optionality. 
With the Network Diagram representing the finally chosen data structure for the product 
configuration system, the next step is to implement this structure into an MBSE-environ￾ment. 
This specifically adapted Network Diagram is implemented for the presented contribu￾tion using Cameo Systems Modeler (CSM). In the following section, a detailed description 
of the MBSE-data basis modelling is given using the Flow Diverter product example. 
Figure 4-6: Schematic display of the Module - Module variant diagram4.3 The configuration system as element of the simulation method 69
The following Figure 4-7 displays the generic MPA data structure implemented into CSM 
in relation to the expressed necessary data, based upon the research of HANNA ET AL.
[Han18a], compare also section 3.6.4. 
On left hand side, the basic root data core is shown. It is implemented as a package￾structure, representing the central core for storing all generic data used for modelling 
the product architecture. As this package structure is responsible for keeping the models’ 
consistency, alterations or new implementations generally are performed within this sec￾tion. The right-hand side of Figure 4-7 displays the necessary abstract data according to 
the configuration process flow. With customer requirements and their expressions al￾ways being considered as individual, these data are marked according to the PKT-nota￾tion in blue – compare also section 3.3. All subsequent data, as being defined by the MPA, 
are either standard or variant and therefore stylised either white or grey. 
There are five relevant packages to be considered for the MBSE-implementation as it can 
be seen in the above Figure 4-7. The first package contains the definitions for the indi￾vidual stereotypes. These stereotypes are Class-Definitions used for the object-oriented 
modelling of the Network Diagram. Their main target is to semantically define the root￾origin of the modelled structure. These class definitions determine whether the currently 
modelled object belongs to the class customer requirements, customer relevant proper￾ties, modules or components. Attributing every new implemented object with one of 
these stereotypes provides the absolute baseline for the data structure’s semantic de￾scription. 
The five packages visualized in the above Figure 4-7 contain all product architecture spe￾cific data and are therefore used for the modelling of the CND and its sub-level module 
Figure 4-7: Generic MPA root data structure (excerpt of Cameo Systems Modeler) according to [Sei20b], 
based upon the research of [Han18a]70 4 Simulation approach for the performance analysis of modular product architectures
variant diagrams. The following Figure 4-8 shows the CSM-implementation of the CND 
with the Flow Diverter example. 
This CND is modelled using the preliminary implemented objects into the five root data 
core packages. The Block-Definition-Diagram (BDD) used as a basic set-up is used as the 
overall CND framework. The left column of the CND visualizes the total set of conjoint 
customer-relevant properties (CCrPs), linked by allocations to their corresponding com￾ponents (C) in the second column. These components are then clustered according to 
the initial modularization into individual modules (M), which are also linked to the com￾ponents they consist of by the CSM-allocation function. Using the example of the Flow 
Diverter, one of the conjoint customer relevant properties (CCrP) can be seen in the above 
Figure 4-8 as patched_bloodvessel_diameter. As this property represents the initial start￾ing point for the CND, the matched components are modelled within the second column 
of the CND. According to the in Figure 4-3 displayed set-up of the Flow Diverter, the three 
components Distal_conical_Xray, Conical_patch and Proximal_conical_Xray are linked to 
this CCrP and the corresponding Aneurysm Module. This sets the basis for the module 
derivation via the configuration system. 
Another fact to be pointed out considers the modelling itself. As the to be modelled 
structure can consist of large numbers of objects to be instantiated, manually 
Figure 4-8: CND adapted to the Flow Diverter product example, incl. excerpt of modelling in CSM4.3 The configuration system as element of the simulation method 71 
implementing every single component is not feasible under an economic perspective. 
Therefore, using the Automatic Instantiation Wizard provided by Cameo Systems Mod￾eler enables the possibility to automatically instantiate the relevant objects. As the rele￾vant data basis for this automatic instantiation needs to be supplied by an already exist￾ing structure, the already described expansion of PDM systems by using MBSE environ￾ments can be considered. Thereby, using derived BOM’s from the company’s data man￾agement software are used in order to implement the general component hierarchy for 
the upcoming MPA alternatives. For this PDM to MBSE data transfer, the pertinent liter￾ature also describes specifically designed software, such as Doors1
, can be used to di￾rectly transfer not only individual objects but as well potential already existing depend￾encies. 
With the initial components instantiated and formatted automatically by using the de￾scribed automatic instantiation wizard and the stereotypes applied according to the de￾veloped scheme, the root data structure is initialized. 
For the underlying example, two customer-relevant properties are implemented, defin￾ing the patching of the aneurysm in length and in diameter. This customer relevant prop￾erties are as described above to perform the transition between the customer’s under￾standing (customer requirement) and the company’s understanding (customer-relevant 
property). The complete modelling can be seen in annex 7.2. 
One further important fact to be stated according to Figure 4-8 is, that all objects need 
to be allocated with as well a block stereotype (CSM-standard) and their individually dis￾tinguishing stereotype like e.g. customer-relevant property. This is due to the developed 
interface system, which is further described in 4.3.5. In order to allow a clear data struc￾turing within the MBSE environments, these CCrPs on the one hand modelled as block￾items, determining the preliminary object definition. The correspondingly assigned ste￾reotype class customer-relevant property as also added, enabling a consistent distin￾guishing of the individual object classes. This object-classification scheme is correspond￾ingly performed with the component and module objects, as the CSM-modelled section 
of the above Figure 4-8 (lower part) displays. 
According to the definition of the Flow Diverter example in section 4.2, it becomes ap￾parent that there is no one-to-one allocation of customer relevant properties to mod￾ules. This results in the module Flow Diverter being required to meet both CCrPs. 
Thereby, as well the individual product variant’s length and -diameter can be derived. An 
extended excerpt CND for the Flow Diverter product example is displayed in annex 7.2. 
1 IBM Engineering Requirements Management DOORS Family, IBM Allee 1, 71139 Ehingen 72 4 Simulation approach for the performance analysis of modular product architectures
As Figure 4-8 (upper section) displays a certain degree of variance, e.g. within the com￾ponent column (visualized in grey), this also needs to be implemented into the modelled 
CSM data structure. Therefore, based upon the work of WEILKIENS ET AL., cardinality num￾bers or multiplicity assignment factors can be used [Wei08] as displayed in the following 
Figure 4-9. 
Figure 4-9 displays the variance modelling within CSM for the component-class of the 
Flow Diverter. The circled number in the upper-left corner of Figure 4-9 marks the degree 
of variance. A factor of “0…1” marks the components optionality, a factor of “1” marks it 
as standard and a factor of “1...n” marks it as variant, with “n” representing the number 
of maximum available variants. This factor of all components within the modelled MPA 
can later be used as one relevant factor of the performance analysis. 
Similar to the implementation of the CND in CSM, the Module – Module variant diagrams
are modelled. It needs to be stated, that the shown modelling is specifically designed for 
the use in the Integrated PKT-Approach from the perspective of the product develop￾ment view. 
Figure 4-9: Variance modelling by assignment of multiplicity factors (excerpt of 
Cameo Systems Modeler)
Figure 4-10: Module-Module variant diagram incl. modelling in Cameo Systems Modeler4.3 The configuration system as element of the simulation method 73 
As shown in Figure 4-10, the modules from the CND of Figure 4-8 are re-occurring in this 
diagram a second time. Due to the central root data core of the CSM-MBSE environment, 
they are treated as the same, consistent object. This module consists of various module 
variants, defined by varying expressions of the Flow Diverters length and diameter. In 
Figure 4-10, the module Distal Module is split into two module variants, both with a di￾ameter of 3 mm, but with an allocated length attribute of either 10 mm or 20 mm. 
These two described BDDs for the CND and the Module-Module variant diagram are 
mainly split in order to increase the transparency and usability of the data structure by 
extracting information from one large, all-embracing BDD into in two individual BDDs. 
Those diagrams are still interconnected by being based upon the same MPA root data 
structure described earlier, with every change and version applied automatically being 
performed in all dependant diagrams. This keeps the models’ consistency at an adequate 
level. 
Preparing the MBSE-model for the developed methods, all possible variants are imple￾mented in the root data structure. Therefore, the diameter variations range from 3.0 mm 
to 5.0 mm, spaced evenly in 0.5 mm iterations. Compliant to the diameter, the length 
variations are evenly spaced in 5 mm intervals from 20 mm to 35 mm, which is consistent 
with the initial definition of Figure 4-2 in section 4.2. As to the current state all diameters 
can be combined with all lengths, in total 20 variant expressions can be stated. The fol￾lowing Figure 4-11 displays the module-module variant diagram with its complete data 
set. 
In order to increase the transparency for the modelled structure shown in Figure 4-11, 
the length and diameter variations are included as part-definitions to the variant com￾ponents. This also helps determining the matching module variant on the basis of the 
individual customer-relevant property’s expression. These expressions themselves are 
predefined by the individual anatomic defect. 
Figure 4-11: Modelling of all Flow Diverter product variants (excerpt of Cameo Systems Modeler)74 4 Simulation approach for the performance analysis of modular product architectures
These BDD-diagrams with the allocation-attributes visualized in CSM by blocks and link￾ing arrows define the complete MPA as shown in Figure 4-11. As this is only a visualiza￾tion method which’s transparency rapidly decreases with an increasing size of the prod￾uct architecture and therefore also inhibiting an efficient implementation of the MBSE￾data structure, an additional dependency setting tool is required. One possible solution 
provided by CSM are Dependency Matrices (DM). For the overall structuring of the MPA, 
there are four different DMs necessary, representing the MPA’s internal logical structure 
and ontology and are shown in annex 7.3. Two alternative DMs are displayed in the fol￾lowing Figure 4-12 for the modelled Distal Module structure as displayed in Figure 4-11. 
Such DMs conjoin two different scopes of data and display their individual dependencies. 
Therefore, Figure 4-12 displays the complete set-up of available expressions (left) con￾sidering the Distal Module’s diameter and length as well as their configurable module 
variants as well as an MPA alternative (right). With respect to the within Figure 2-3 de￾scribed product architecture strategies, the left MPA alternative represents the maxi￾mum expression of the Modular-Kit Strategy. Further expressions of this strategy are dis￾played within section 4.4.2 within Figure 4-30. The first items of the in Figure 4-12 dis￾played rows and columns show the considered scopes of the DMs. In this case, the MPA’s 
diameter range, identified by the class stereotype “variant diameter” is displayed in the 
DM’s rows, whereas the available length variants, identified by the class stereotype var￾iant length, are displayed in the DM’s columns. The connections which are visualized are 
from the type Association, and therefore from the same type as used in the BDDs, display 
the dependencies within the MPA. When regarding the visualized connections, it can be 
seen that all 20 theoretically available module variants are available for this MPA alter￾native. This therefore represents the maximum potentially implementable MPA. The 
specific set of dependencies can then be saved as a version of the underlying MPA by 
Figure 4-12: Dependency Matrix for maximum variance expression (left) and altered MPA 
(right) of one single module, the Distal Module (excerpt of Cameo Systems Modeler)4.3 The configuration system as element of the simulation method 75
defining this set of associations as an instance of the MPA. Hence, this instance can then 
be stored using its already defined storage space, the Instance package. These instances 
can be used as a basis for later product architecture maintenance activities. 
As the visualization of these DMs is not only a graphical but as well logical item, they are 
to be considered on the same level as the connecting allocation arrows described when 
using BDDs. Secondly, DMs not only display allocations but also enable the modulariza￾tion team to set or re-set connections between the considered scopes, allowing for an 
efficient and transparent data-implementation tool. 
By alternating the dependencies within this matrix, alternative MPAs can be generated, 
which is mainly relevant for the simulation method as described in section 4.4. They con￾tain different numbers or set-ups of module variants. Their component allocation com￾position can also be altered in order to generate alternative MPA’s. By transforming 
these alternative dependency set-ups into individual instances of the MPA, the version￾ing can be kept consistent without needing to model the whole data structure for every 
alternative MPA again. This represents a significant advantage compared to the conven￾tional MPA alternative generation, using PowerPoint or similar manual-based software 
in order to display and store the developed data. 
In the following, the modelling of the configuration relevant constraints is described. 
4.3.2 Modelling of configuration relevant constraints 
In order to implement such previously described MPAs with their corresponding set of 
dependencies and constraints, especially for more complex products, a specific tool has 
been developed. 
In order to implement all customer requirements, customer relevant properties and their 
corresponding modules, module variants, components as well as their dependencies ac￾cordingly to the individually developed MPA alternatives, a supporting tool for a holistic 
Figure 4-13: Module Capability Catalogue (MCC) with MIG for the Aneurysm Module76 4 Simulation approach for the performance analysis of modular product architectures 
and methodical data collection is introduced. This tool describes the capabilities, main 
functions and interfaces of each module and is therefore called Module Capability Cata￾logue (MCC). The following Figure 4-13 displays the set-up of the MCC. 
As Figure 4-13 shows, there are four main parts of the MCC. The upper part consists of 
the constraint definition (I), with all inhibiting or additionally required module depend￾encies. Furthermore, the variant expressions of the module, if existent, are stated (II). 
The variance status is also expressed by displaying this box as grey (variant) or white
(standard). The last part describes the module’s interfaces (III). Here, an exact definition 
of the module’s interfaces towards other modules is given. The bottom part (IV) displays 
a Module Interface Graph (MIG) of the individual module in order to give the applying 
user a graphical representation. This MCC tool supplies a major contribution of a com￾plete and consistent modelling of the individual MPA alternatives with their underlying 
modular kits and the corresponding set of dependencies and constraints. 
In order to provide a suitable basis for the following detailed description of the method, 
this section is to define the basic restrictions, dependencies, constraints and prerequi￾sites used for this simulation-based alternative decision method. 
First of all, there are two general constraints, which also can be seen as the two basic 
rules on top of which the configuration is designed. 
On the one hand, the Flow Diverter’s diameter needs to either match the underlying an￾atomic defect perfectly or to be slightly larger, with a maximum deviation of 0.5 mm 
[Gas05]. This results from the requirement of not generating any free space between the 
inserted Flow Diverter and the blood vessel in order to prevent the formation free space 
in the blood vessel. In order not to generate subsequent medical issues, the blood flow 
needs to be obstructed as little as possible, which is achieved by not producing any free 
space between the new artificial wall and the original blood vessel wall. If the underlying 
defect does not match one individual size of a Flow Diverter perfectly, the better choice 
is to use the larger size. 
The second constraint concerns the Flow Diverters’ individual length. As the to be 
patched defect in the blood vessel needs to be sealed completely, it is an obvious con￾straint that the length of the medical insert needs to at least match the defect’s length 
with an additional length on each end to smoothly transition before and after the defect. 
If there is no matching Flow Diverter available within the corresponding product archi￾tecture, the determined Flow Diverter needs to be the next longer one. 
With all MPA data being structured within the model-based environment, the logical step 
is to provide the additional data of these constraints as well in a model-based environ￾ment. Therefore, all configuration relevant data can be derived from the same model 
source and therefore increasing the systems consistency. 
Furthermore, with not hard-coding constraints into the product configuration systems 
but deriving them generically from the model-based data basis, the universality and of 
the transferability of the algorithm is supported. The following Figure 4-14 shows the 4.3 The configuration system as element of the simulation method 77
model-based implementation of the predefined set of rules. In this case, the modelled 
rules are not implemented using SysML, as the expression of the set of rules is only to be 
considered as a visualization and a method to consistently and continuously maintain 
these rule chains. These chains are to be exported from CMS for further use in an inde￾pendent software system. 
Using the parametric diagram-type, the two paths defining the scope of allowed devia￾tions for the individual product variants expressions are visible. Both originating from the 
customer-relevant properties patched blood vessel diameter and patched blood vessel 
length, the impact to the corresponding expressions for the module variants is visible. 
Visualized by the colon-symbol, the impact onto the variant length or diameter is mod￾elled. The allowed range for the deviations is parametrised by using parameter blocks, 
visualized by using the Figure 4-14 shown parametric objects. Using common mathemat￾ical or Boolean expressions such as “== “as an expression for equals etc. describes the 
semantic expression of the allowed sets of parameters. In the underlying case, the vari￾ant length is defined as equals or greater compared to the length of the customer-rele￾vant property’s expression. The range for the variant diameter is considered as requiring 
either an equal or by 0.5 mm larger diameter of the determined product variant than 
required by the customer-relevant property’s expression. With those two constraints be￾ing connected to the Flow Diverter module object, the parametrised constraint chain is 
fully implemented and therefore can be used for the corresponding product configura￾tion algorithm. 
At this point it needs to be stated, that the actual calculation is performed by the config￾uration system. The model-based environment and the corresponding MBSE methodol￾ogy is just used as a modelling environment for the parametric constraints, which are 
then exported into the configuration system. 
One major fact which becomes apparent when analysing the above described data struc￾ture is the existence of various different data types necessary to be implemented. These 
are necessary for finally getting to a configurable MBSE-MPA data structure, with 
Figure 4-14: Modelled configuration relevant constraints for the Flow Diverter example 
 (excerpt of Cameo Systems Modeler)78 4 Simulation approach for the performance analysis of modular product architectures
requirements, modules, customer relevant properties, constraints, values and parame￾ters. They all coexist within the same structure, but demand for a specific differentiation. 
Combined with this issue and when considering the generation of alternative MPAs by 
using the instance-generation function of Cameo Systems Modeler, the use of an MBSE 
environment for consistently offering a solution to the underlying task gets inevitable. 
The following section describes the definition of the configuration decision dimensions, 
which are relevant in the case of multiple possible product variants result from the de￾fined set of constraints and the modular kit. 
4.3.3 Configuration decision dimensions 
As the configuration relevant constraints can allow for multiple valid product variants on 
the basis of the initial customer requirements, the next step is to derive the configuration 
decision dimensions upon which the final product variant is to be determined. With re￾spect to Figure 4-1, these dimensions can be considered as the Configuration-Value-Vec￾tor (CVV), which is further described in the sections 4.3.5 and 4.3.8. 
As already described above, every company and every product need to be analysed by 
considering different aspects. These may differ individually and therefore produce mis￾leading results when using inadequate analysis criteria. In general, there are four dimen￾sions to be considered when analysing products or product architectures according to 
the Impact Model – compare also section 3.5: time, cost, flexibility and quality [Scw20]. 
In relation to these four dimensions, the three factors for time, cost and flexibility are 
chosen as decision criteria of the Flow Diverter example. With configurability being con￾sidered as comparable to product flexibility [Sei20b], the following Figure 4-15 describes 
the interconnection between the three chosen dimensions. 
The main constraint when regarding order-lead times results from the machine systems 
manufacturing the Flow Diverter. As those products get woven around a centre mandrill, 
the main issue impacting production times is the change effort performed by the worker 
when changing the machine from one diameter to another. Therefore, the smaller the 
Figure 4-15: The three analysis dimensions configurability, order￾lead time and cost for the Flow Diverter example4.3 The configuration system as element of the simulation method 79 
offered diameter range is, the shorter order-lead times can be and vice versa. Further￾more, as the Flow Diverter can be manufactured from two different materials, there is 
also a difference in their order-lead times. This strongly is in competition with the goal of 
offering a possible patching stent to every defect expressed in the anatomy database and 
therefore impacting the configurability property. 
Considering the cost analysis dimension, this factor includes mainly the production costs. 
The costing is therefore influenced by a composed set of machine and equipment cost, 
stock costs, manufacturing costs and product architecture maintenance costs. Neverthe￾less, other cost dimensions such as stock costs, sales and marketing costs as well as the 
underlying development costs can be considered as well. These costs are all increased 
when increasing the configurability of the product architecture due to an offered over￾dimensioning, as more expressions of the Flow Diverter are offered within the overall 
product family. 
Together with the two parameters diameter and length of the Flow Diverter for its con￾figurability, the lead-order times as well as the product architectures cost define the 
scope of the configuration decision framework. 
These defined analysis dimension can then be used for the multi-factor assessment algo￾rithm, which is described in detail during section 4.3.8. 
In the following section 4.3.4, the configuration system itself as the core element for 
Method 2, representing the methodical derivation of the matching product variant, is 
described. 
4.3.4 Implementation of the product configuration system 
As already described in chapter 4.1, the product configuration system is the key element 
for the MPA simulation. Especially its ability to connect as well the customer-oriented 
perspective as well as the company-oriented perspective offers a wide range of possibil￾ities [Sei20a]. 
This product configuration system is used by the method in order to the most appropri￾ate product variant determine for individual sets of customer requirements within the 
individual MPA alternative. 
As described in chapter 3.7, product configuration systems consist of two main parts, the 
frontend and the backend. Therefore, the MBSE-configuration is developed containing 
these two main parts as well. 
The following Figure 4-16 displays the generic set-up of the developed MBSE configura￾tion system. 80 4 Simulation approach for the performance analysis of modular product architectures
On the left-hand side of Figure 4-16, the input for the configuration system is displayed 
as the individual customer requirements. As the customer only possesses detailed infor￾mation about his application without being able to express his requirements (the cus￾tomer perspective) as customer-relevant properties (the company perspective), this 
translation needs to be done in cooperation with the sales agent, using the configuration 
system’s frontend. The application of the frontend can be seen as a close consideration 
of the customer’s requirements and the subsequent development of a list containing the 
individual conjoint customer-relevant properties (Figure 4-16, middle). This list of cus￾tomer relevant properties is then used to filter the most adequate modules from the 
modular kit in order to determine the suitable product variant in relation to the initial 
customer requirements as represented by the CVV dimensions, which is further de￾scribed in the following sections. The complete configuration process is done by taking 
as well the modelled MPA as well as the underlying set of dependencies from the MBSE￾environment into account as shown in Figure 4-16. The SysML-modelled MPA is displayed 
on the top-right corner, which defines together with the set of dependencies and con￾straints the modular kit as displayed in Figure 4-16 middle part. 
As the frontend represents the communication part towards the customer, an intuitive 
application and usability of the configuration system is crucial [Raj18]. A depiction of the 
Flow Diverter configuration system is shown in annex 7.4. 
Figure 4-16: Generic set-up of MBSE-based configuration system4.3 The configuration system as element of the simulation method 81 
Having collected the customer requirements in combination with the corresponding re￾quirement expression set, in this case the anatomic defect’s length and diameter, the 
next step is to methodically process these data for the determination of the most ade￾quate product variant. With this process requiring logical functions linking e.g. customer 
requirements to customer-relevant properties, this is performed using the generic 
backend configuration algorithm. 
The backends generalised aim is to use the input generated by the frontend system and 
determining the corresponding product variant on the basis of the available MPA struc￾ture. Furthermore, when no perfectly fitting product variant is available, the backend 
algorithm needs to decide which of the available product variants meets the underlying 
set of customer requirements the most while taking the implemented constraints (see 
section 4.3.2) into account. As these deviation constraints also are implemented within 
the MBSE-environment, the configuration algorithm needs to generically adopt these 
constraints into the underlying deviation algorithm. If the actual set of customer require￾ments even with taking these deviations into account cannot meet an available product 
variant, this needs to be noticed by the algorithm as well. Another requirement to be 
fulfilled by the algorithm is to store the complete configuration process chain for every 
individual set of customer requirements as well as the configuration solution as a prepa￾ration for the upcoming MPA performance simulation. An additional task of the backend 
is to display the determined product variant graphically on the frontend together with 
the available and possible deviated specification, allowing as well the customer as well 
as the sales agent to react to the result.
For the determination of matching customer-relevant properties and the corresponding 
product variant, there are two cases to be distinguished. The first case consists of a MPA 
only allowing for a clear one-to-one allocation of customer-relevant properties and prod￾uct variants. Therefore, only one valid product variant can be returned on the basis of 
the input customer requirements. The second possibility, which is usually more likely, 
can return multiple valid configuration solutions – and therefore product variants – on 
the basis of the individual product variants. At the start of each configuration process, it 
is checked whether the first or the second option of customer-requirements to product 
variants is given. On this analysis’ result, two different possibilities of configuration algo￾rithms are used. 
The first case, concerning the linear determination of the matching product variant, 
where only one valid solution is available is explained in the following. 
The following Figure 4-17 displays the interactions of the algorithm with the by the MBSE￾interface provided data sheets. 82 4 Simulation approach for the performance analysis of modular product architectures
In general, this hierarchical process is based upon five modelled DMs expressing the 
MPA. These DMs are then exported as XML files in order to access them via the externally 
set configuration system. As a first step, the customer requirements as well as their spe￾cific expressions are provided as an input by the above-described frontend. They are used 
within the first matrix in order to determine the matching pairs of customer require￾ments and conjoint customer relevant properties (CCrP). At this stage, it already can be 
stated whether all customer requirements can be met by the MPA. These determined 
CCrP’s are then used within the second matrix in order to match their corresponding 
modules. As a next step, as far as available for the underlying modular kit, the module 
variants are determined using the initially recorded expressions of the customer require￾ments. In the case of the Flow Diverter product example, this expression represents di￾ameter and length parameters, leading to a specific Flow Diverter variant. Having identi￾fied the suitable module variants, their matching components are allocated by using the 
fourth DM. As the components usually to represent a sum of individual pars, the last DM 
is used in order to correlate the lowest level of perception for the modularization – the 
components – with the lowest level of classical company structures – the article num￾bers. These are originally exported from an existing PDM system into the MBSE data ba￾sis. This lowest MPA level is required for determining e.g. the final product variant’s cost 
by summing up all individual values for all components and their individual parts and 
article numbers within all derived module variants. As usually there is not only one value 
to be considered for each part but several, these individual values are assigned in vecto￾rial form to the parts as described in section 4.3.5, forming the Configuration Value Vec￾tor (CVV). This described process is repeated recursively for each individual customer 
requirement that has initially been recorded by the configuration frontend. As a final 
result of the configuration process, the individually determined product variant and its 
Figure 4-17: Hierarchical configuration process of configuration system [Lau20]4.3 The configuration system as element of the simulation method 83 
corresponding bill of material including product variant parts with their specific article 
numbers – as originally being imported from a PDM system – are generated. As these 
product variants can have varying degrees of internal variance, Figure 4-17 displays this 
step as a gradient between white (standard) and grey (variant). 
One key aspect to be mentioned here is that this generic configuration process can be 
applied to any kind of MPA. As the configuration algorithm is designed to access only the 
in Figure 4-17 designed data structure and not its specific content, it is not product spe￾cific. This has major advantages for the maintainability of the configuration system when 
versioning the MPA during the development of further product generation. Secondly, 
when it comes to analysing alternative MPAs, this content-independent accessing struc￾ture is crucial. 
As the process for accessing and processing the information within such an exported DM 
is the same for each hierarchical step displayed in Figure 4-17, the exact algorithm is 
exemplarily described using the module to module variant step. As within this step the 
customer requirements’ expressions come into account, this is the most critical step. 
In order to cope with that task, the backend algorithm accesses the exported DM of the 
MBSE product architecture, where the modules are allocated to the module variants. The 
implemented function of how to access these DMs and how to determine the concurrent 
allocations is similar for all accessed DM within this algorithm. Therefore, the routine is 
described for this specific DM and can analogically transferred to the further DM inter￾actions. 
The following Figure 4-18 describes the general flowchart of the configuration algorithm 
for one configuration step. The upper half of Figure 4-18 displays the dynamic accessing 
of the exported DM, whereas the lower half of Figure 4-18 displays the generic configu￾ration algorithm on the basis of the externally inserted customer requirements, their ex￾pressions and the configuration constraints. This process is then recursively repeated for 
each pair of customer requirement and expression. 84 4 Simulation approach for the performance analysis of modular product architectures
When accessing an MBSE-based exported DM, the algorithm reads the data sheet line￾wise and storing the relevant data into a two-dimensional array with the columns of the 
original MBSE-DM represented by one array dimension and the DM’s rows represented 
by the second array dimension. Therefore, the first row and the first column of the 2D￾array contain the expressed names for as well the modules and the module variants with 
their specific expression. Whenever there is an allocation at the position (x, y) defined in 
the MBSE-environment, the transfer data represents this dependency by positioning a 
string-block to the exact known location. This string block is written to the corresponding 
array position “Array[x, y]”, while the positions with no MBSE-predefined allocations are 
defined as “empty”. This results in an algorithm-readable form of the DM, where all allo￾cations can be accessed efficiently as there is just one data structure level to be ad￾dressed. 
Regarding the Flow Diverter product example, such a possible connection is the repre￾sentation of the customer requirement patching an anatomic defect of 8 mm length to 
the corresponding module variant Flow Diverter with length 10 mm, as this module vari￾ant’s expression is the closest to the one required and still meeting the implemented 
length constraint. 
Figure 4-18: Exemplary flowchart of configuration algorithm and XML-file access 
for Module-Module variant determination4.3 The configuration system as element of the simulation method 85 
Analogically to this procedure the algorithm accesses three further DMs in order to de￾rive the corresponding product variant. By using the matching customer-relevant prop￾erties derived by analysing the above-described allocations, the corresponding modules 
to the individual customer-relevant properties are derived. This generates a complete 
set of basic modules, which can further be used in order to determine potentially addi￾tional modules required due to dependencies and constraints of the underlying modular 
kit. During this step, the algorithm is designed to recursively loop through the underlying 
DM until having reached the end of the data sheet as displayed in Figure 4-18 middle 
section. This is necessary due to the reason that the constraints defined in the modular 
kit are represented within the individual DMs and by iteratively looping through the sets 
of dependencies, additionally necessary or inhibiting modules are identified. This is de￾signed likewise for constraints inhibiting the use of an individual module due to function￾ally colliding modules or similar cases. As the algorithm stores the set of the currently 
configured set of modules, an inherent set of allocations between these modules is de￾rived. By constantly cross-checking this inherent structure with the real available alloca￾tion structure represented by the corresponding DM, missing allocations in the DM are 
an indicator for such inhibiting constrains. Modules, which are linked to such a missing 
allocation are removed from the current set of configured modules. As these modules 
always correspond implicitly or explicitly to a customer requirement, a backwards check 
for the identification of the customer requirement linked to the removed module is in￾evitable. As this customer requirement then cannot be fulfilled by the MPA, the algo￾rithm later needs to present that information to the customer and sales agent within the 
frontend system. 
If the product variant to be configured by the algorithm contains modules consisting of 
more than one component, on further step needs to be performed. Having determined 
the set of meeting module variants to the initial customer requirements, the algorithm 
accesses the last DM linking module variants to components. With a final set of individual 
components determined for the derived product variant, a bill of material can be re￾turned. As shown in Figure 4-17, this bill of material does not only contain information 
about from which modules and components the configuration consists, but as well about 
the variance of these elements (symbolised by grey-white colouring of the bill of material 
icon). This provides a major improvement towards existing PDM-system based solutions, 
as these just can derive bill of materials with a manual selection of top-structure assem￾bly groups. As this algorithm dynamically generates its set of rules based upon the ex￾ported MBSE-data, adaptations to the initial MBSE-data structure do not require any 
changes to the configuration system. Changes to the underlying MPA are noticed as soon 
as being exported from the MBSE environment via the interface and are then applied 
dynamically in the configuration algorithm. This design state meets the overall require￾ment of generating a universal and easily transferable algorithm independent to the to 
be configured product or MPA itself. As the information provided by the MBSE environ￾ment need to be transferred towards the configuration system, the next section 86 4 Simulation approach for the performance analysis of modular product architectures 
describes the interface and data exchange between the MBSE environment and the con￾figuration system. 
4.3.5 MBSE and configuration system data exchange system 
This section considers the description of the interface generation between the MBSE 
data structure and the corresponding, universal product configuration system. The fol￾lowing section describes the interface development on the basis of the requirements im￾posed in section 3.8.2. 
For the development of the interface system, the Extendend Markup-Language (XML)
data format was chosen – compare also annex 7.5. 
There are two different possibilities about how to develop the main interface between 
CSM and an external source as it can be represented by a configuration system. On the 
one hand, a fitting interface can be developed manually according to all specifications. 
On the other hand, using existing tools built within the MBSE environment which origi￾nally are used for different applications and then altering them to fit the above-men￾tioned requirements is the second possibility. Following both approaches, all relevant 
CSM tools, which are able to either address the underlying data structure and generate 
subsequent XML files are considered. There are four different tools which can be used. 
These are a pure Dependency Matrix based solution, the Generic Table approach, the 
Report Wizard approach and the Rollup Pattern approach which are described in the fol￾lowing. 
Matrix-solution 
The matrix-based solution describes the most basic of all four mentioned alternatives 
and is mainly based upon modelled and exported DMs. With these matrices supplying a 
compact and graphical representation of modelled dependencies, all different kinds of 
diagrams, UML elements as well as extended UML elements can be displayed. As they 
are based upon rows and columns with either filled or empty cells, the associated (re￾lated elements) can be displayed, exported and further used. DMs can show various re￾lation elements, such as basic allocations or relations, or semantic dependencies by mod￾elling dependencies through properties. 
Generic Table 
This tool enables the management of selected elements with respect to their properties 
in one single, individually configurable and exportable table. It can also be used to edit 
property values of the listed model elements, create selected type items or to derive new 
properties from the existing model. It is mainly used for information communication pur￾poses, displaying directly connected requirements and properties. 
Report Wizard 
The Report Wizard is designed as an interface support system, enabling text-based tem￾plates for an automated report generation of large data collections. Corresponding re￾quirements to model elements can thereby be automatically extracted from the SysML4.3 The configuration system as element of the simulation method 87
environment into plain text or other text-based tools such as Office Open XML. This tool 
is generally used for presenting development states and process completion states for 
MBSE-supported design processes. 
Rollup Pattern 
Rollup Patterns enable one of the most used cases within software-supported engineer￾ing processes. By recursively propagating individual values up to higher hierarchical lev￾els, such as e.g. from component to module level, the total modelled system values such 
as cost or mass can be calculated. In order to suit the pertinent use cases, these rollup 
parametric blocks can individually be modelled to fit the specific calculation needs. Once 
instantiated, it can be automatically applied to specific models, allowing also for simulat￾ing dynamically varying model states. 
The following Figure 4-19 shows the described different Cameo Systems Modeler tools 
as well as a specifically developed interface solution and compares them against the 
mentioned requirements. 
It is clearly visible in Figure 4-19, that the specifically designed interface is not corre￾sponding with all requirements, which mainly results from the major implementation ef￾fort as well as future versioning issues. Such a manually developed interface requires 
constant maintenance or needs to be implemented into the basic software’s root core. 
Both issues are not economically efficient or feasible for the underlying purpose. All in 
Figure 4-19: Comparison and evaluation of alternative CSM interface tools88 4 Simulation approach for the performance analysis of modular product architectures
all, the Rollup Pattern approach meets most of the considered requirements, with strong 
points in the categories of re-usability, future-robustness against software versioning, 
low initial implementation effort, high data maintainability and solid versioning capabil￾ities. 
The Rollup Pattern is a tool providing recursive applications of parameter models to a 
linked structure and its substructure. Its general use is to enable model simulations with 
varying parameters, like e.g. modelling the energy consumption of an electrical system 
with changing states. This Rollup Pattern can individually be adjusted for simulating the 
relevant parameters and then be applied to any desired structure, as long as all items are 
interconnected by the same connecting type and all items are instantiated as block-type. 
The values for every object being parametrized can either be implemented manually or 
automatically using batch-functions in order to implement data from another, external 
data source. 
The following Figure 4-20 displays the generic set-up of a Rollup Pattern in CSM. 
The core part of the Rollup Pattern scheme in Figure 4-20 consists of a parametric dia￾gram, linking the predefined parameter objects to their logical function. The constraint 
block contains in the centre contains the logical function for summing up the substruc￾ture’s individual values (child values) in order to generate a combined sum for the next 
higher structure level (parent value). Regarding the above stated figure, the parameter 
block on the top represents the definition space for the CVV dimensions. The value stor￾age block on the right-hand side provides the current storage space for the child value
parameters, which is accessed bidirectionally from the logical constraint block in the cen￾tre. This constraint block applies the logical constraint described together with the linked 
parameters to every object for the current structure level and re-stores them intermedi￾ately. This process defines the child values for each considered object. Every full level 
iteration, the sum of these child values is generated and stored in the right-hand value 
storage block as actual parent value. Having reached the highest structure level, which is 
constantly checked by comparing the actual iteration’s level index to the highest level, 
the current parent value is exported as the total sum value into the attribute storage 
partition of the parameter block, defining the overall CVV value. This algorithm is applied 
recursively to the model space defined by the left-hand model-definition scope - block 
until the highest structure level is reached. 
Figure 4-20: Generic set-up of CSM Rollup Pattern4.3 The configuration system as element of the simulation method 89
For the Flow Diverter example, the corresponding Rollup Pattern as a part of the inter￾face between the MBSE environment and the configuration system is shown as an em￾bedded step in the configuration process in Figure 4-21. The modelled parameters are 
only to be used as an export variable for the later use in the independent configuration 
system. 
As the Rollup Pattern is part of the interface between the MBSE environment and the 
configuration system, its task is to export the relevant product part information originally 
retrieved from the PDM system into the modular kit. The modelled MPA is transferred 
using the DM-approach as explained during section 4.3.1. 
On the left-hand side of the Rollup Pattern model, the Flow Diverter product architecture 
is defined as the applicable model space. On the basis of the three defined parameters 
Order-Lead Time, Manufacturing Costs and Configurability (compare section 4.3.3), the 
pattern is recursively applied by adding up the individual values from lower levels (child 
values) to higher levels (parent levels). This pattern is applied until having reached the 
final hierarchy level, defining the total Configuration Value Vector (CVV), as explained 
during section 4.3.6. This final value is stored versionable and accessible in an Instance 
Figure 4-21: Rollup Pattern for the Flow Diverter product example (excerpt from Cameo Systems Modeler) 
as an embedded element of the configuration process90 4 Simulation approach for the performance analysis of modular product architectures 
Table, which can then be used as the data exchange basis. Furthermore, as it can be seen 
in Figure 4-21, the individual object definitions are also assigned to the parameters in the 
Rollup Pattern, defining the instantiable value characters, such as integer or real. By de￾signing and adapting once the Rollup Pattern to the underlying product example, this 
parameter set-up can effortlessly be applied to the whole assigned model space. 
In order to insert the relevant data values for the order-lead time, cost and configurabil￾ity, which can already be found in a Product Data Management (PDM) System and En￾terprise Resource Planning (ERP) system, the data transfer can either be done manually 
or by using specific software such as Doors. This interfacing software enables an auto￾mated data transfer into the MBSE environment which is also suitable for large MPAs 
with a large amount of individual data. This is the main connection from which the ex￾pansion of MBSE for an existing PDM-based system can be seen. By using existing geo￾metric and parametric values from a PDM-system and adding them to functional and 
logical structures in the MBSE environment, major benefits can be generated. 
The inserted data for the Rollup Pattern and the corresponding MPA alternative need 
then to be saved analogically to the MPA alternative’s structure as an instance, from 
which the required, attributed data can be called from. 
In order to be able to identify the corresponding MPA alternative and its specific value￾set, the MPA alternative numbering and structure needs to be compliant. When gener￾ating differing MPA alternatives with the same logical background, the same Rollup Pat￾tern constraint diagram can be applied to the alternative MPAs and the individual value￾sets saved as individual instances in the instance-package. It may also be necessary to 
adapt the Rollup Patterns constraint diagram when developing MPA alternatives, with 
these constraint diagrams being stored as individual instances as well [Sei20b]. 
With the Rollup Pattern meeting almost all relevant requirements for the developed in￾terface, there is one specific requirement still needing to be addressed. With the Rollup 
Pattern approach not complying with the requirement of exporting all relevant data, es￾pecially when considering the inter-object dependencies, a hybrid solution needs to be 
developed. By combining the capabilities of the Rollup Pattern approach with the possi￾bilities supplied by the matrix-approach, all requirements can be met sufficiently. 
Hereby, the matrix-solution part is required to export the dependencies between ob￾jects, while the Rollup Pattern allows for a dynamic application of a parameter value set 
containing all configuration relevant data. These configuration relevant data for the un￾derlying Flow Diverter product example are as described above the impact factor to the 
order-lead time, configurability and overall cost for the individual product variants. 
All data applied by the Rollup Pattern, all dependencies modelled by using the DMs as 
well as the product structure’s constraints can then be exported to individual XML data 
files in order to access them by an external source. This also allows the developed con￾figuration system to run without a live MBSE environment available at place, as all rele￾vant data is stored after being modelled in CSM within these specific XML files. 4.3 The configuration system as element of the simulation method 91 
In the case of the MPA allowing for several valid product variants being configured on 
the basis of the initial customer-relevant properties, a more capable configuration algo￾rithm for the configuration process is required. As a basis for this algorithm, a geometric 
parameter representation was developed as described during the following section 4.3.6, 
as it is the baseline for the determination of the most adequate product variant in the 
case of multiple valid configuration paths. 
4.3.6 The Configuration Value Vector 
With all components of the determined module variant derived, another task is still re￾maining in order to properly return a solution from the configuration process. As the 
individual modules and components are linked to specific values, like in the underlying 
product example the individual variant’s impact factor to the overall order-lead time and 
the product variant’s cost, these values need to be assigned to the configured set of 
module variants. As this value sets are also a key factor the upcoming simulation, these 
values need to be expressed in a specific format. This format needs to fulfil the require￾ment of multi-dimensional data processing. When regarding just an individual data knot, 
these data values can be seen as individual dimensions of a vector data set. This vector 
is composed of different dimensional values, with each dimension representing one 
value assigned to e.g. the module variant or the components it consists of. This vector is 
called Configuration Value Vector (CVV) and is schematically displayed in the following 
equation 1. 
ͳ݊݋݅ݏ݊݁݉݅ܦ൭  ൌ ݎ݋ݐܸܿ݁݁ݑ݈ܸܽ݊݋݅ݐܽݎݑ݂݃݅݊݋ܥ
ʹ݊݋݅ݏ݊݁݉݅ܦ
ǥ
൱ሺͳሻ
The CVV represents the geometric expression of a product variant, module or component 
with respect to the customers’ requirements. With the CVVs mapped for the complete 
MPA, the available solution space for the configuration problem is defined. Considering 
the modules their module variants and components as individual geometric representa￾tions in a vector format, a valid configuration solution can be seen as the sum of these 
individual vectors. This description is crucial for the during section 4.4 described simula￾tion, as it allows for a mathematical analysis of different configuration iterations. 
In the case of the Flow Diverter product example, the corresponding CVV consists of 
three dimensions as shown in the following equation 2. 
ݕݐ݈ܾ݅݅ܽݎݑ݂݃݅݊݋ܥ ൭ൌ௘௥ ௧௘௥௩஽௜௪௟௢ிݎ݋ݐܸܿ݁݁ݑ݈ܸܽ݊݋݅ݐܽݎݑ݂݃݅݊݋ܥ
ݐݏ݋ܿ݃݊݅ݎݑݐ݂ܿܽݑ݊ܽܯ
݁݉݅ܶ െ݁ܽ݀ ܮ െ ݎ݁݀ݎܱ
൱ሺʹሻ
These dimensions describe the above pre-determined analysis dimensions for the MPA 
simulation. The first vector item describes the individual process’s configurability which 
can be calculated by the developed Configuration depth factor. 92 4 Simulation approach for the performance analysis of modular product architectures 
This factor has been developed in terms of the presented contribution and expresses the 
normalized degree of customer requirement fulfilment by the accordingly determined 
product variant and is described by the following equation 3. 
௜݃ כ ௗ௥௘௨݈݁௖௢௡௙௜௚ݑ݀݋ܯ σ  ൌ݄ ݐ݌݁ܦ݊݋݅ݐܽݎݑ݂݃݅݊݋ܥ
௜݃ כ ௗ௖௘ௗ௨௥௢௧௜௡ݏݐ݊݁݉݁ݎ݅ݑݍ݁ݎݎ݁݉݋ݐݏݑܥ σ
ሺ͵ሻ
Equation 3 basically divides the number of configured modules by the total amount of 
requested modules, implicitly expressed by the customer requirements introduced to 
the configuration frontend. As not all customer requirements come with comparable im￾portance, a weighting factor gi is introduced. 
This weighting is usually performed using a linear language-to-number transverse scale, 
as customers implicitly express the importance of customer-relevant properties in three 
main stages: not important, intermediately important, important. These expressions can 
then be translated into a linear integer scale reaching from 1 – 3, where 3 expresses the 
degree of highest importance. 
With a configuration depth of 100%, the determined product variant is able to meet all 
initially defined customer requirements. As the underlying product example only de￾scribes two individual and equally important customer requirements, this dimension’s 
possible values correspondingly can either by 100%, 50% or 0%. 
The second value of the Flow Diverter CVV describes the individual configured product 
variant’s manufacturing cost, including machine cost, set-up-cost, tool cost and storage 
cost. The third CVV element describes the subsequent order-lead time for the individual 
product variant. 
With these three factors, every module variant (MV) for the corresponding individual 
customer requirement (CuR) can be considered as the sum of CVV’s of the related com￾ponents as stated in the following equation 4. 
ݕݐ݈ܾ݅݅ܽݎݑ݂݃݅݊݋ܥ ൭෍ൌ ሻܴݑܥ݈ܽݑ݀݅ݒ݅݀݊݅ሺܸܯ
ݐݏ݋ܥ݃݊݅ݎݑݐ݂ܿܽݑ݊ܽܯ
݁݉݅ܶ െ݁ܽ݀ ܮ െ ݎ݁݀ݎܱ
൱
௡
௞ୀ଴
ሺͶሻ
For every product variant (PV) consisting of several module variants, the product vari￾ant’s CVV is analogically described by the following equation 5 under the consideration 
of all initially defined customer requirements: 
ݕݐ݈ܾ݅݅ܽݎݑ݂݃݅݊݋ܥ ൭ܸ ܯ ෍ ൌ ሻܴݑܥ݈݈ܽሺܸܲ
ݐݏ݋ܥ݃݊݅ݎݑݐ݂ܿܽݑ݊ܽܯ
݁݉݅ܶ െ݁ܽ݀ ܮ െ ݎ݁݀ݎܱ
൱
௡
௞ୀ଴
ሺͷሻ4.3 The configuration system as element of the simulation method 93
With this approach considered, every individual product variant meeting the initial cus￾tomer requirements can be regarded as valid configuration path defined by its sum of 
component CVVs. All in all, the configuration system translates the customer perspective 
into the company’s perspective, using the user-oriented configuration frontend. The 
backend part determines upon this set of customer relevant properties the suitable prod￾uct variant and expresses the configuration solution as a geometric vector result. 
The following section describes the developed algorithm for the determination of the 
most adequate product variant in the case of several valid configuration paths on the 
basis of the CVV and the Rollup Pattern data exchange system. 
4.3.7 The adapted Dijkstra-algorithm for the determination of valid product variants 
In the case of the MPA enabling multiple valid configurations, these need to be identified 
as valid paths which can then be used for the subsequent decision process about which 
of these valid paths is finally to be returned as a configuration result. For this decision, 
the preferences are also represented by the Configuration Value Vector (CVV). 
The identification of the valid paths is performed by a specifically adapted geometric al￾gorithm, based upon the algorithm used e.g. for car navigation systems, the so-called 
Dijkstra-algorithm – compare also section 3.7.3. 
As a first step, all possible solutions as well as all partial solutions for the individual cus￾tomers' needs resulting from the modular kit need to be identified. As one possible solu￾tion of addressing the MPA’s model-based data structure and its underlying set of con￾straints, the Dijkstra-algorithm is used. This is a mathematical approach typically imple￾mented in car navigation systems. In this case, the MPA is considered as a map, where 
the customer-relevant properties are considered analogically to cities. The roads and 
crossings of the map define the modular kit’s modules and the underlying dependencies 
and constraints, which are further expressed in an additional dimension-layer. 
As the real calculation basis is expressed as an n-dimensional data base, the following 
Figure 4-22 is reduced to a 2D-transformation for explanation reasons. 
The transformation of the underlying MPA into a symmetrical adjacency matrix enables 
calculation of the individual branch lengths. These length values can then be used in or￾der for the determination of the solution space according to the input customer 
Figure 4-22: Module roadmap for adapted Dijkstra-algorithm according to [Sei20a]94 4 Simulation approach for the performance analysis of modular product architectures
requirements. The sole restriction for this adjacency matrix is n א] 0; ∞ [ with n repre￾senting the number of existing knots. These adjacency matrix values describe the path 
length to the next following knot. As all existing and modelled dimensions are to be taken 
into consideration, there is a specific adjacency matrix for every dimension combination. 
Therefore, these matrices can be seen as multiple individual but dependant layers of the 
module roadmap. This allows for a knot-to-knot distance calculation within the individ￾ual valid configuration paths. As one single adjacency matrix only enables a clear one-to￾one assignment of customer-relevant properties and therefore, modules, the described 
multi-level adjacency approach is required. This results in a theoretically unlimited num￾ber of interconnected dimensions [Sei20a] 
With the following binomial coefficient with the dimension order represented by n, the 
necessary number of adjacency matrices can be calculated (Equation 6). 
ቀ
݊
ʹቁ ൌ ݊Ǩ
ሺ݊െʹሻǨ כʹ Ǩሺ͸ሻ
According to the above-displayed module roadmap of Figure 4-22, the following Figure 
4-23 displays the matching adjacency matrix. 
With the adjacency matrix supplying a navigational calculation basis for the configuration 
algorithm, each customer requirement, which inherently is linked to a certain CCrP, can 
be allocated to subsequent module(s) through following the implemented module 
roadmap. The algorithm derives an individual path for each valid configuration alterna￾tive and saves them for further analysis. 
For the Flow Diverter product example, these alternative valid paths e.g. can consist of 
two product variants with the components being manufactured from alternative mate￾rials. Therefore, the first valid configuration path describes the combination of the Distal 
Module, the Aneurysm Module and the Proximal module with their defined diameter 
and length variations, which are manufactured from material A. The second valid config￾uration path includes the same diameter and length variations, but with the components 
being manufactured from material B. For the explanation example, material A comes 
with a higher material cost and a reduced order-lead time in relation to material B. On 
the basis of these input parameters, the two alternative configuration solutions need to 
Figure 4-23: Exemplary adjacency matrix for module roadmap4.3 The configuration system as element of the simulation method 95 
be analysed and assessed in order to determine the most matching one according to the 
customer requirements. 
With these available valid configuration paths stored, they are to be analysed using the 
in 4.3.8 presented Hyperspace algorithm in order to derive the most performant alterna￾tive, taking into account the underlying framework parameters. These parameters can 
either be defined by customer preferences, such as order-lead time, or company prefer￾ence, such as reduced engineering effort [Sei20a]. 
The following section is to describe the expression and processing of these individual 
data within the configuration value vector from a mathematical perspective. 
4.3.8 The multi-dimensional Hyperspace calculation algorithm 
In order to integrate varying business and customer environments, resulting in alterna￾tive input parameter expressions to the MPA analysis, a multi-dimensional combination 
algorithm has been developed. It takes also into account a weighting system for the in￾dividual analysis dimensions in order to increase the algorithm’s adjustability to the un￾derlying use case. 
The within this contribution proposed mathematical approach considers the given multi￾dimensional optimization problem as a geometric problem in a multi-dimensional Hyper￾space. It aims for a solution via an algorithm based upon an infinitesimal minimalization 
[Sei20a]. 
As already described, this decision-making process between individual valid configura￾tion paths represents a multi-variate problem and can therefore not purely be solved 
using a distinct system of equations. The final decision needs to be performed via an 
optimization algorithm. Furthermore, a system of differential equations would have a 
strong impact onto the algorithm’s performance due to the large calculation effort re￾quired, as all relevant parameters are strongly dependant. This results in a constantly 
alternating solution space with each new calculation iteration, rendering such purely al￾gebraic solutions not applicable. This significantly becomes apparent when applying such 
a system to alternative MPAs for alternative products or even the same MPA but with an 
altered system of customer requirement prioritisation constraints, as these changes de￾mand for a large algorithmic model adaptation. 
In order to cope with this issue, a geometric solution to this problem is proposed during 
this contribution. The basic idea of this algorithm is to combine and minimize joint multi￾dimensional areas by integrating dimension-wise twisted spatial areas over an ideally 
balanced solution. 
The outset point is the derivation of all possible configuration paths 
 ॰ א ݇STM௜݇96 4 Simulation approach for the performance analysis of modular product architectures 
followed by the optimization step as the next algorithmic process step. As already de￾scribed, a geometric solution forms the basis for this optimisation step. The configuration 
problem’s solution space is considered as a multi-dimensional geometric space, being 
mathematically referred to as a Hyperspace – compare also section 3.7.4. Within this 
Hyperspace, individual customer or business relevant objectives for each configuration 
task, such as cost, order-lead time or configurability as well as system performance, en￾gineering effort, spare parts availability, overall equipment effectiveness etc. form the 
individual Hyperspace dimensions. Those dimensions then need to be normalized, as 
they originally come with unequal units or are probably not expressible in absolute num￾bers. This normalization step leads to a dimensionless hypercube, 
(Schläfli-Symbol {4, 3d-2}) where d is the dimension number. This equals the number of 
customer- and company relevant objectives within the underlying MPA. In order to de￾termine the hypothetical ideally balanced solution for each configuration problem, the 
space diagonal of the hypercube is used, as its Idealpoint S at the normalized ending edge 
of the n-dimensional hypercube refers to a maximized and balanced expression of each 
dimension. Along this space diagonal, a product variant meeting all customer require￾ments to full extent by providing adequate modules from the modular kit would be lo￾cated. 
The consecutive step after initially defining the solution space via the Hyperspace defini￾tion, all modules for each individual product variant are to be mapped within this hyper￾cube. This is also the point, where the before stated prioritisation of the individual cus￾tomer and company relevant objects for the individual configuration problems is intro￾duced within the algorithm. 
As the above-described section shows, the three derived effects serving as MPA alterna￾tive analysis criteria, do not come with the same level of importance. As the by these 
three criteria produced impacts differ in their criticality on the product variant perfor￾mances, this impact variation needs to be taken into account by the developed configu￾ration system method. With this requirement leading to a weighting scheme for the in￾dividual to be considered effects, there are different possible solutions available within 
the pertinent literature. 
With every module containing a specific value for each dimension of the hypercube, rep￾resented by its individual CVV, a transformation vector, representing the prioritisation 
can be mathematically added. This transformation vector consists of a scalar prioritising 
number p for each dimension, and therefore, customer or company relevant objectives. 
The scalar multiplication of this transformation vector with the individual CVVs deter￾mine therefore the prioritised module CVVs as well as the final edge lengths of the hy￾percube. Therefore, using a linear, three-step semantic weighting scale is considered as 
the most suitable solution. As these factors need to be applied to the individual assess￾ment criteria which are further to be mathematically processed, transforming this se￾mantic weighting scale into a numerical weighting scale is necessary. The following equa￾tion 7 displays the resulting parameter set with the corresponding semantic and numer￾ical expressions for the used weighting scale. 4.3 The configuration system as element of the simulation method 97
The prioritising number p is defined via the following conditions according to [Sei20a]. 
൝
݀ݎܽ݀݊ܽݐݏ
ݏ݅ݏ݄ܽ݌݉݁ݐ݄݈݃݅ݏ
อݏ݅ݏ݄ܽ݌݉݁݃݊݋ݎݐݏ
ൌͲ݌
ൌͳ݌
݌ൌʹൡሺ͹ሻ
These individual values then need to be evaluated for the derived analysis criteria. For 
the underlying Flow Diverter product example with the three derived factors being the 
configuration depth, order-lead impact and manufacturing cost, the corresponding im￾pact weighting is exemplarily used as shown in the following Table 4-1. 
Table 4-1: Weighting factors for Flow Diverter product example according to [Sei20b] 
According to Table 4-1, this weighting can also be noted as a transformation vector ሬ
ܸܶሬሬሬሬԦas 
shown in the following equation 8. 
ሬ
ܸܶሬሬሬሬԦ
ி௟௢௪஽௜௩௘௥௧௘௥ ൭
ݕݐ݈ܾ݅݅ܽݎݑ݂݃݅݊݋ܥ
ݏݐݏ݋ܿ݃݊݅ݎݑݐ݂ܿܽݑ݊ܽܯ
݁݉݅ܶ െ݁ܽ݀ ܮ െ ݎ݁݀ݎܱ
൱ ൌ൭ͳ
ͳ
ʹ
൱ሺͺሻ
This transformation vector therefore describes the individual criteria’s weighting in a 
mathematical form and can be used for further calculations. As the CVV explained above 
describes the initial data provided by every component in order to mathematically de￾termine the individual value for the above derived criteria, the CVV’s individual dimen￾sions match the individual values of the transformation vector. Having determined the 
CVV of the individually determined product variant (PV) and therefore representing the 
sum of the individual components’ CVV, this transformation vector can be applied to the 
product variants CVV and thereby weighting the individual values as displayed in the fol￾lowing equation 9. 
ሬ
ܸܲሬሬሬሬԦ
ி௟௢௪஽௜௩௘௥௧௘௥௧௥௔௡௦௙௢௥௠௘ௗ ൌ ܸܲሬሬሬሬሬԦ
ி௟௢௪஽௜௩௘௥௧௘௥ כܸܶ ሬሬሬሬሬԦሺͻሻ
This prioritising systematic provides a significant improvement to existing optimisation 98 4 Simulation approach for the performance analysis of modular product architectures
algorithms. Therefore, the optimisation process results are drastically changed com￾pared to non-prioritising approaches. 
The mapping of the individual configuration solutions is performed by mapping all indi￾vidual modules and module variants for one configuration solution in the Hyperspace. As 
they represent data knots, they can be connected, leading to a joint Hyperspace curve. 
By performing this procedure for each of the determined configuration paths, a bunch of 
Hyperspace curves is created, defining the outset point for the mathematical determina￾tion of the most adequate configuration amongst the determined configuration paths. 
These curves can be considered as a set of polynomial functions of the nth order in the 
interval [0; Idealpoint S]. These polynomial functions therefore describe a set of twisted 
areas above the hypercube diagonal, which is exemplary shown for the three Flow Di￾verter dimensions configurability, manufacturing cost and order-lead time in the follow￾ing Figure 4-24. 
It can clearly be seen in Figure 4-24, that the two individual configuration paths form 
three different spatial areas, which are twisted over the hypercube diagonal. 
This hypercube diagonal d is hereby defined by the square root of the degree of dimen￾sions n multiplied with the edge length a of the hypercube as seen in equation 10: 
݀ ൌ ξ݊ כܽ ሺͳͲሻ
With the spatial diagonal representing the ideally balanced solution, every deviation 
from that diagonal can be considered as a performance loss of the individual perfor￾mance path. The greater the deviation from this diagonal, the greater correspondingly 
Figure 4-24: Exemplary display of Hyperspace cube with three individual configuration paths 
and three dimensions4.3 The configuration system as element of the simulation method 99 
the performance loss is. Therefore, the visible spatial areas as shown in Figure 4-24 can 
also be seen as performance losses. According to that, the balanced solution with respect 
to the customer's and company’s demands is represented by the mapped path with the 
least spatial deviation from the spatial diagonal. The corresponding mathematical solu￾tion is to calculate each dimensional area of the polynomial function over the hypercube 
diagonal. 
In order to enable this calculation, the individual configuration path functions need to be 
interpolated, being based upon the individual module and module variant CVV coordi￾nates as supporting points. According to the pertinent literature, there are various inter￾polation methods available, consisting of linear, partial, hermit, trigonometric or polyno￾mial interpolations [Die00]. For this specific case, the interpolation is performed as fol￾lows according to [Sei20a]: 
With a set of n + 1 data points (xi, yi) where no two are the same, the polynomial inter￾polation provides a suitable solution to this requirement (Equation 11). 
ܲሺݔ௜ሻ ൌݕ݂௜ݎ݋ ݈݈݅ܽא ሼͲǡͳǡ ǥ ǡ ݊ሽሺͳͳሻ
Using a transformed Lagrange-Formula, this leads to the use of the barycentric interpo￾lation (Equation 12) 
ܲሺݔሻ ൌ 
௜݂௝ߣ  σ
௝ݔെݔ
௡
௝ୀ଴
௝ߣ  σ
௝ݔെ ݔ
௡
௝ୀ଴
ሺͳʹሻ
by the application of barycentric weights (Equation 13) 
ߣ ௝ൌ ෑ  ͳ
௜ݔെ௝ ݔ
௡
௜ୀ଴
௝ஷ଴
ሺͳ͵ሻ
On the basis of these trough interpolation determined polynomial functions, the spatial 
area of each dimension for every individual configuration path can be calculated by inte￾grating the polynomial function over the interval [0; Idealpoint S]. (Equation 14). 
ܵ݌ܽݐ݈ܽܽ݅ݎ ௜ܽ݁ൌ න ܲ஽௜௠௘௡௦௜௢௡௜ሺݔ௜ሻ
ூௗ௘௔௟௣௢௜௡௧ௌ
଴
ሺͳͶሻ॰ א  ௜ݔ݄ݐ݅ݓݔ݀100 4 Simulation approach for the performance analysis of modular product architectures
Having integrated the spatial area with the included weighting of each dimension for an 
individual path, these areas need to be summed up, leading to a dimensionless measure 
deviationi for the deviation of this specific product variant configuration away from the 
ideal hypothetical solution. This deviation value is described by equation 15. 
݀݁ݒܽ݅ݐ݅݋ ௜݊ൌ ෍  න ܲ஽௜௠௘௡௦௜௢௡௜ሺݔ௜ሻ
ூௗ௘௔௟௣௢௜௡௧ௌ
଴
Գ א ݆ ǡ݄݅ݐ݅ݓݔ݀
௡
௝ୀ௢
ሺͳͷሻ
With the deviationi for all ki with k א ॰ determined, the amongst the considered config￾urations most balanced product variant can be chosen. With respect to the weighted 
customer's and company’s requirements on the basis of the underlying MPA the minimal 
value of deviationi and therefore the ideal configuration (Conf.) can be derived, which is 
displayed in the following equation 16: 
݋ܥ݂݊Ǥ ൌ ݉݅݊෍ ෍ න ܲ஽௜௠௘௡௦௜௢௡௜ሺݔ௜ሻ
ூௗ௘௔௟௣௢௜௡௧ௌ
଴
݀ݔݓ݅ݐ݄݅ǡ ݆ǡ ݇ א Գሺͳ͸ሻ
௡
௝ୀ௢
௡
௞ୀ଴
For the Flow Diverter Product example, the during section 4.3.5 described two valid con￾figuration paths for the same diameter and length expressions, but with different mate￾rials have been calculated according to the above-described Hyperspace algorithm. The 
following Table 4-2 displays the pure Hyperspace calculation result. 
It can clearly be seen, that the first valid configuration path with the Flow Diverter being 
manufactured from material A has a lower Hyperspace value than the product variant 
being manufactured from material B. This is mainly due to the reason, that material A 
has a shorter order-lead time than material B, which is weighted higher than the probably 
increased material costs according to the formulated CVV-weighting expressions as dis￾played in Table 4-1. Therefore, the product variant with material A as a basis is returned 
as the most matching according to the initial customer requirements. 
Table 4-2: Valid configuration paths for Flow Diverter explanation example4.3 The configuration system as element of the simulation method 101 
As a brief summary, this mathematical approach allows for a multi-factor analysis tool 
for several individual configuration paths with varying multi-dimensional customer and 
company framework parameters. Furthermore, a weighting system for the individual pa￾rameters is integrated, increasing the reality and adaptivity of the analysis algorithm. A 
significant improvement to the above presented algorithms made by the presented Hy￾perspace approach is its adaptability and flexibility. With one major requirement for such 
algorithms being their integrateability within existing MPA data structures, taking their 
corresponding sets of dependencies and constraints into account, this Hyperspace algo￾rithm can be considered as highly performant. It comes without any limitations to the 
number and types of the framework parameters and influencing analysis dimensions, 
due to the reason that they are all considered as normalized and dimension-less edges 
of an n-dimensional hypercube [Sei20a]. 
Additionally, there is one further main aspect of the developed Hyperspace algorithm 
that is crucial for this presented contribution’s target. Not only can alternative configu￾ration paths based upon one individual modular kit be analysed and compared in order 
to identify the most performant, but this can also be done for alternative modular kits 
originating from alternative MPAs themselves. By adapting the underlying MBSE-data 
structure and its set of dependencies and therefore altering the configuration data base, 
different configuration results with varying spatial area deviations can be generated. As 
the configuration system addresses only the data structure itself and generates its inher￾ent ontology on the basis of the data structure’s content dynamically, this process is eas￾ily automatable. Especially for companies having implemented Configure-to-Order-based 
Engineer-to-Order process structures [Sei19b], being generally applied by special equip￾ment manufacturers, this is a major issue. Alterations to already existing modules, which 
are yet pre-designed during the modularisation phase with consideration of the possibil￾ity of these adaptions, can be integrated into the MPA data structure tree as an additional 
crossing point. These data points can simply be blocked or accessed by altering the adja￾cency matrix values, which is dynamically performed by the configuration system’s ge￾neric algorithm. This enables a fast and sustainable performance assessment of either a 
single adaption to the underlying modular kit and its impact final product variant or even 
the impact of a complete change of the corresponding MPA. 
As explained in the section above, the Hyperspace-algorithm enables a multiple-dimen￾sional performance assessment tool for multiple effect criteria when analysing different 
product variant alternatives. With the number of dimensions that can be included in the 
Hyperspace model not being limited and represented by the number of dimensions the 
corresponding CVV consists of for the underlying product, the algorithm can be dynami￾cally applied to each corresponding modular kit. 
This mathematical Hyperspace approach enables a quantitative and multi-dimensional 
performance indicator for the derivation of the most matching product variant. In the 
following section 4.4, the developed Method 1, representing the MPA performance as￾sessment simulation, is described. 102 4 Simulation approach for the performance analysis of modular product architectures
4.4 Modular product architecture performance simulation method 
During this section, the developed simulation algorithm for the decision support of the 
to be implemented MPA alternative is described using the Flow Diverter product exam￾ple. 
The proposed Method 1’s main task is to identify the most suitable and most performant 
MPA amongst all determined alternatives within the process of modularisation. Further￾more, as every company is acting in a different business and customer environment, the 
influencing factors are to be taken into account. These factors form the pertinent simu￾lation framework. 
The following Figure 4-25 shows the general methodical approach for determining the 
most performant MPA amongst the given alternatives. A further detailed description is 
given in the following. 
The first step within the displayed Method 1 is to transform an existing product architec￾ture into a MPA by using modularization methods during the initial modularization 
phase. As already described, various methods lead to differing MPA alternatives. On this 
generic level, it is not crucial to define the individual modularization method. For the 
current explanation of the method, the Integrated PKT-Approach as a combination of 
both functional and product strategic methods is used. 
The resulting MPAs 1…x from the initial modularization phase define the total sum of 
alternatives in order to identify their individual performance index amongst the known 
analysis dimensions as identified by the Impact Model. These individual MPA alternatives 
can be designed according to the in Figure 4-25 displayed three alternative possibilities 
Common parts/Modules, Modular Kit or Platform strategy as well as their individual 
Figure 4-25: Generic methodical simulation-based MPA performance analysis – Method 1 –, 
according to [Sei20b] 4.4 Modular product architecture performance simulation method 103
expressions such as low-hanging fruits or high-performance alternatives. The until now 
state-of-the-art process comes down to experts using implicit knowledge and a limited 
number of analysing factors like e.g. the number of standard components or production 
costs within the individual alternative in order to conclude a qualitative result for the 
most performant alternative. As those MPA alternatives are composed of a vast amount 
of data with – depending on the product’s complexity – a large number of dependencies 
and constraints to be considered and the company’s business and customer environment 
being described by multiple different variables, a computer-based simulation seems to 
be the only reasonable way to process these large data volumes. Therefore, after having 
determined all different alternatives, simulating these alternatives while considering 
both customer and business environmental factors is the next step in order to create a 
basis for the subsequent multi-factor assessment phase. This enables a decision support 
about which alternative to implement. 
The following section gives an overview about the developed method with its individual 
steps. 
4.4.1 Overview to the simulation-based decision-making process 
Based upon the initially described general simulation set-up - compare Figure 4-1 - the 
key tool for this simulation consists of the developed MBSE product configuration sys￾tem. In general, the simulation consists of looping configuration iterations applied as 
shown on a generic level in the following Figure 4-26, further details are explained in the 
following. 
As an input to the simulation, multiple sets of customer requirements, which can e.g. be 
generated by using historic customer requests from a suitable timescale are used. As 
Figure 4-26 left-hand side displays, these customer requests consist of multiple sets of 
corresponding aneurysm diameters and lengths, which require a patching via a config￾ured medical stent. The configuration for the first of these pairs of customer requirement 
expressions is performed in the first iteration loop on the basis of the first MPA alterna￾tive (Figure 4-26 middle) with its corresponding modular kit according to the MBSE MPA 
model. This configuration process is performed multiple times, leading to an increasing 
dataset of corresponding customer requirements and product variants for one individual 
MPA alternative. 
Figure 4-26: Schematic display of recursive configuration process as key simulation element104 4 Simulation approach for the performance analysis of modular product architectures
Additionally, the CVV analysis dimensions are introduced as well. These criteria need to 
be pre-defined and implemented into the analysis algorithm. For the Flow Diverter prod￾uct example, these analysis dimensions are as known configurability, manufacturing 
costs and order-lead-time. Based upon individual customer and company prioritisations, 
these dimensions then are weighted, forming the customer-company framework condi￾tions. The configured product variants on the basis of the MPA alternatives are then 
stored in an independent configuration result file and used for the individual CVV-based 
performance index calculations for each MPA alternative 1…x as displayed in Figure 4-26 
right-hand side. 
According to chapter 3.7, this enables a cost- and time efficient approach to improve the 
development process for MPAs without the need of implementing and assessing them in 
real life. Nevertheless, as a simulation only can represent reality to a certain extent, the 
final decision needs to be made by as expert team [Win19]. In the following section 4.4.2, 
the simulation method is described in close detail. 
4.4.2 The MPA performance assessment simulation 
The following Figure 4-27 displays the first part of the simulation and describes the input 
parameters in detail. 
The multiple set of customer requirements are represented in Figure 4-27 with the ana￾tomic defect length and diameter expressions. In the depicted case, the first customer 
requires a patching of an anatomic defect of 3 mm in diameter and 10 mm in length, 
whereas the last customer presents input parameters with 5 mm in diameter and 35 mm 
in length. For each customer, such a pair of customer requirements and expressions is 
introduced, forming the multiple sets of customer requirements. Additionally, the CVV 
dimensions for the product variant determination as shown in Figure 4-27 lower-left 
Figure 4-27:Simulation input parameters as first step of the simulation method4.4 Modular product architecture performance simulation method 105
corner are introduced as well. These CVV dimensions are also used during the simulation 
process as analysis dimensions for the MPA alternative performance index calculation. 
These multiple sets of customer requirements and CVV dimensions together form the 
constant simulation input. This means, that for each simulation iteration on the basis of 
alternative MPAs, the customer requirements and the CVV dimensions stay the same 
and are not changed. 
For the underlying product example, the initial input data set is composed of a total 
amount of 100 anatomic defects described by their individual length and diameter. This 
data set represents the real situation, with the margin product variant expressions being 
demanded less frequently than those in the centre of the request scope. As described in 
section 4.2, the to be patched aneurisms are located in the diameter range from 2.5 to 
4.5 mm, with the majority being set between 2.5 and 3.5 mm [Sei20b]. 
The following Figure 4-28 displays the distribution of the individual diameters for the 
whole possible available range between 2.5 and 5.0 mm in relation of their customer 
demand frequency. 
Figure 4-28 displays the distribution of anatomic defects (blue graph). It can clearly be 
seen, that the majority of defects lies within the range of 2.5 to 3.5 mm. Correspondingly, 
as the Flow Diverters are meant to be either the same size or slightly larger, the second 
graph (red) displays the Flow Diverter diameter distribution. This graph is shifted by 
0.5 mm with respect to the blue graph, which is consistent with the constraint definition 
of Flow Diverter diameter to anatomic defect diameter as described during section 4.3.2. 
Furthermore, it is visible that the margin diameter ranges of 2.5 and 5.0 mm are not 
requested nearly as often as the central diameter range. This specific aspect needs to be 
considered when analysing the simulation output. 
As these multiple sets of 100 customer requests are now regarded as the baseline the to 
be implemented MPA alternative needs to comply with, these sets are the consistent 
input from the customer’s perspective for the upcoming simulation. 
Figure 4-28: Diameter distribution of aneurysms and corresponding Flow Diverters for simulation example 
with diameter shift between customer perspective (blue) and company perspective (red)106 4 Simulation approach for the performance analysis of modular product architectures
According to the generic set-up of the simulation depicted in the above Figure 4-26, the 
next step within the simulation process is to recursively use these input data as a baseline 
for the configuration of multiple sets of matching product variants on the basis of alter￾native MPAs which is displayed in the following Figure 4-29. 
It can be seen, that the multiple sets of customer requirements serve as the constant 
simulation input – compare Figure 4-29 left-hand side. These requirements are then used 
to configure the matching product variants on the basis of the within the MBSE environ￾ment modelled MPA alternative 1. This leads to a matching pair for each customer of 
customer requirements and corresponding product variants. For this step, the exact 
same configuration method as described during section 4.3 is used. According to Figure 
4-29, the first customer’s requirements are defined as an anatomic defect with 3 mm in 
diameter and 10 mm in length, leading to a matching product variant A, which can be a 
Flow Diverter with a diameter of 3.5 mm and a length of 15 mm – compare Figure 4-29 
top-level flow. The same is done for the other sets of customer requirement, leading to 
the same amount of product variants as there are sets of customer requirements. 
These multiple configuration processes are then repeated, each time with a different ar￾chitecture alternative as a data basis for the product configuration system, generating a 
Figure 4-29: Second step of the simulation method: Determination of multiple matching product variants4.4 Modular product architecture performance simulation method 107
different data set of corresponding customer requirements to product variants for each 
architecture alternative as Figure 4-29 displays with the individual configuration paths. 
The main differences distinguishing the MPA alternatives mainly consist of different 
modular kits containing different sets of dependencies and constraints, linking or prohib￾iting different combinations of modules. Furthermore, a difference in the internal variety 
and therefore the amount of available module variants is another distinctive mark for 
the MPA alternative. This last aspect is for explanation reasons used during this section 
with the Flow Diverter product example. 
The MPA alternatives defining the configurational data structure basis consist of individ￾ual MPA alternatives developed by the modularization team. For the current product 
example, three alternative MPAs have been developed as displayed in the following Fig￾ure 4-30. Due to explanation reasons, the changes to the individual MPA alternatives are 
restrained to expression changes of the available diameter or length expressions. 
The first MPA alternative contains all theoretically available module variants with ex￾pressing every diameter from 3.0 to 5.0 mm and all lengths from 20 to 35 mm. These in 
total 20 product variants are therefore used as the scope for the first iteration of the 
simulation. The second iteration of the simulation is based upon MPA alternative 2. As 
following Figure 4-30 shows, this alternative contains Flow Diverter product variant for 
all available diameter ranges, but only for two length expressions and therefore in total 
10 product variants. The same amount of product variants is expressed within MPA al￾ternative 3. This alternative provides a product variant for all length but not all diameter 
expressions.
When it comes to choosing one of these three alternatives to finally implement, there 
are three factors which need to be taken into account. These factors are the in section 
4.3.3 determined analysis dimensions order-lead time, cost, and configurability. As these 
Figure 4-30: Display of used three MPA alternatives for Flow Diverter simulation 
(excerpt of Cameo Systems Modeler)108 4 Simulation approach for the performance analysis of modular product architectures
three factors are dependant from each other, they need to be taken into account simul￾taneously. 
The following Figure 4-31 displays the remaining part of the simulation process as shown 
in the above Figure 4-26. 
The individual paths in Figure 4-31 display the multiple configuration paths for the sets 
of customer requirements based upon the individual MPA alternatives. The configured 
product variants and, most importantly, the performance of the individual MPA alterna￾tives are thereby assessed using the multi-dimensional Hyperspace calculation algorithm 
as shown in section 4.3.8. In this case, the Hyperspace algorithm is not only used during 
the configuration process for the determination of the most adequate product variant, 
but also for the overall performance index calculation of the individual MPA alternatives. 
This is done by using the above-mentioned analysis dimensions of configurability, order￾lead time and material cost with the same ranking of importance level as shown during 
section 4.3.8. The main difference to the application of the Hyperspace algorithm in the 
Figure 4-31: Step three of the simulation method: Determination of the MPA alternative performance index4.4 Modular product architecture performance simulation method 109 
configuration part is, that for the MPA performance calculation not only modules are 
used for the determination of the Hyperspace spatial area, but the multiple sets of con￾figured product variants. Thereby, the individual data knots for the interpolation of the 
Hyperspace function are represented by the conjoint CVVs for each individual configured 
product variant within one MPA alternative. This leads to separate Hyperspace areas for 
each individual MPA alternative. For this explanation example, with the three MPA alter￾natives as stated in Figure 4-30, three individual Hyperspace areas therefore are created. 
As these Hyperspace areas are multi-dimensional vectorized deviation values, a graphical 
representation apart from the pure algebraic Hyperspace value is required. This further 
step is displayed in Figure 4-31 as the transfer of the Hyperspace calculation result into a 
two-dimensional performance heatmap. Basically, this heatmap represents a well-per￾forming MPA alternative as mostly green, whereas a less performant MPA alternative 
contains a larger number of red areas. This heatmap is further described later within this 
section. As a result of the simulation process, individual algebraic Hyperspace values and 
performance heatmaps are created for each MPA alternative, leading to a multi-dimen￾sional decision support criterion for the final choice of the finally to be implemented MPA 
alternative. 
This should lead to a simulation output, that a MPA with the main diameter focus be￾tween 3.0 mm and 4.0 mm and a length distribution between 20 mm and 30 mm is a 
good starting point. Furthermore, as every product variant with a new diameter majorly 
impacts the costing factor due to additional tooling costs and stock costs, the ideal MPA 
alternative should contain as few diameter variants as possible. As a third aspect, with 
every new product variant impacting the order-lead time due to machine change times 
and the reduced possibility of large-batch manufacturing, as few product variants as pos￾sible should be included. Nevertheless, the fewer product variants there are available, 
the smaller the configurability and therefore, the customer orientation, can be. 
With the simulation of the three MPA alternatives performed, the following Figure 4-32 
displays the graphical simulation results. 110 4 Simulation approach for the performance analysis of modular product architectures
Figure 4-32 displays three different representations of the three individual MPA alterna￾tives. Figure 4-32: Display of simulation input (first row), 3D simulation output (second row) and heatmap simulation output (third row)4.4 Modular product architecture performance simulation method 111 
The first row displays the CSM-representation of the dependencies with respect to the 
provided diameter- and length expressions. These individual structures are the data basis 
for the three simulation iterations and are subsequently used by the configuration sys￾tem. 
The second row displays a 3D-graphical representation of the simulation output on the 
basis of the during chapter 4.3.8 developed Hyperspace modelling algorithm. In order to 
visually analyse the MPA alternative performance level, these 3D-representations display 
the Hyperspace area as a rotation transformation. This rotation results in a spatial area, 
where all deviations from the ground-level (X/Y – 0/0) level are to be considered as im￾pacting the overall performance negatively. Therefore, MPA alternative 1 has a strong 
negative performance index for the product variant with a diameter of 5.0 mm and 
35 mm in length, as this product variant is rarely requested but has the same cost and 
order-lead time impact as the other product variants. This matches the estimated out￾come. Considering MPA alternatives 2 and 3, it can clearly be seen that there is less de￾viation from the base level. This results in a visual representation of these two alterna￾tives already being more performant than MPA alternative 1. When closely comparing 
MPA alternatives 2 and 3, it can be seen that the total deviation above zero is less within 
MPA alternative 3. This matches with the expectation, that MPA alternative 3 is the most 
performant amongst the three instantiated MPA alternatives. 
This 3D-representation only is able to provide a clear and distinct feedback with low￾complexity and small product architectures. Furthermore, when analysing the perfor￾mance level based upon more than three dimensions, this representation still can only 
be the result of a multi-dimensional scaling algorithm. In order to counteract these issues 
for more complex structures, a performance index heatmap was developed as shown in 
row three of Figure 4-32. This heatmap displays the performance level of an MPA in a 
qualitative way, with parts of lower performance displayed in red and parts of higher 
performance displayed in green. Gradual differentiations of performance levels are dis￾played as colour shifts between red and green. Compared to the 3D-representation, parts 
with a large deviation from the ground level are marked as red in the heatmap and parts 
with a small Z-Axis deviation are marked as green. Accordingly, MPA alternative 1 con￾tains a red impact field at the same data point where the 3D-representation displays a 
large deviation from the ground level for the product variant of 5.0 mm in diameter and 
a length expression of 35 mm. Therefore, as a general and qualitative analysis rule, it can 
be stated, that for different MPA alternatives, the greener a heatmap representation is, 
the more performant it is on the basis of the implemented analysis dimensions. This so￾lution furthermore includes the weighting of the customer and company prioritisations 
and derives the most balanced solution amongst the available alternatives. 
This described simulation based upon multiple configuration iterations with the adjoint 
Hyperspace calculation does not only allow for a multi-dimensional decision support, but 
also for a rough estimation of the less performant modules and product variants within 
the MPA alternative as described in the following. 112 4 Simulation approach for the performance analysis of modular product architectures
The approach of considering product variants as polynomial functions of the nth order 
enables an identification of the most performant or least performant modules and prod￾uct variants within the MPA under a multi-dimensional perspective. Deriving the local 
and global maxima of each available configuration path (equations 17 and 18) under con￾sideration of the relevant analysis dimensions, an extended assertion for the enhance￾ment of the underlying MPA can be stated. Each module on or close to the Hyperspace
function coordinate with the properties of 
݂݀ሺݔ௜ሻ
 ൌ Ͳሺͳ͹ሻ
and 
݀ଶ݂ሺݔ௜ሻ
݀ݔ ൐ Ͳሺͳͺሻ
are considered as modules possessing a local or global maximum deviation from the ideal 
solution. By iteratively calculating and saving this crucial information concerning these 
individual specific modules, an objective outset point for a future product generation 
development with an increased performance of the corresponding MPA can be derived 
[Sei20a]. 
For the Flow Diverter product example, such a global maximum deviation can clearly be 
seen for MPA alternative 1 as displayed in the following. 
The Figure 4-33 displays the Flow Diverter MPA alternative 1 with the full extent of length 
and diameter expressions. According to the configuration-based simulation with the sub￾sequent Hyperspace performance index calculation, this alternative has been identified 
as the least performant one amongst the given three alternatives and the considered 
simulation framework analysis dimensions. When analysing the 3D- simulation result and 
the heatmap, the critical points mark the product variant with the maximum diameter 
and length expression – which as already explained – is requested rarely by customers 
Figure 4-33: Identification of maximum performance deviation module 
for the Flow Diverter explanation example4.5 Interim summary of the MPA simulation algorithm 113 
and is therefore impacting the MPA alternative negatively. This also matches with the 
mathematical analysis of the MPA alternative. When calculating the global maximum of 
MPA alternative 1, the result is the top end of the expressions being set at a diameter of 
5 mm and 35 mm in length. Therefore, this product variant is to be considered first when 
intending to improve the simulated MPA. 
In the following section, an interim summary considering the developed methods is 
given. Furthermore, as the developed methods are based on the Integrated PKT-Ap￾proach, its expansion by the developed methods is described as well. 
4.5 Interim summary of the MPA simulation algorithm 
With the simulation being based upon a configuration system, both the customer per￾spective as well as the company’s perspective can be taken into account. By pre-defining 
analysis criteria in order to form the framework for the simulation and by applying a spe￾cific weighting to these criteria, the actual business environment can be recreated ac￾cording to the required needs. By transferring the weighting results into a transformation 
vector, the weighting further can be mathematically applied to the individual simulation 
iteration CVV-results. In order to provide a combined performance indicator for the indi￾vidual MPA alternatives, the geometric-based Hyperspace algorithm is applied. This al￾gorithm creates a multi-dimensional decision criterion by expressing the individual MPA 
alternatives as a multi-dimensional spatial area. Comparing the spatial areas’ integrals 
and therefore calculating their real values, the smallest value defines the MPA alternative 
with the smallest spatial area as its graphical representation. This smallest spatial area 
represents the final multi-dimensional performance indicator and leads to the decision 
of the most performant MPA alternative. 
Nevertheless, this method can only provide a decision support, as the algorithm can only 
calculate the performance index on the given CVV values as well as the implemented 
analysis dimensions. Further human decision-supporting influence factors such as intui￾tion and implicit knowledge still remain important. By using the model-based approach 
for describing the MPA alternatives’ data structures, the transformation of implicit to 
explicit knowledge is already considered, but is not yet able to replace all human decision 
factors. Therefore, it is still strongly suggested to use the presented simulation-based 
approach as a quantitatively provable system to cope with inherent constraints of com￾plex systems, but not to blindly follow the simulation’s results. A possible solution to this 
issue e.g. would be to consider the most performant 10-20% of initially developed MPA 
alternatives when deciding about the finally to be implemented alternative. A ranking of 
the MPA alternatives based upon their combined performance index as well as the re￾sults for the individual analysis dimensions can be stated. 
The final decision can be based upon this ranking, but still should be kept to human ex￾perts, integrating their personal experience and additional knowledge which may not be 
expressed by the simulation’s scope. 114 4 Simulation approach for the performance analysis of modular product architectures
As the developed methods described during this section 4 is also part of the Integrated 
PKT-Approach, the following Figure 4-34 describes the expansion of the Integrated PKT￾Approach by displaying the developed methods’ position within the generic procedure 
as initially shown during section 3.3. 
With the product configuration system being a subsequent step after harmonizing the 
developed MPA, it can be seen as a fifth step after the Life Phases Modularization. During 
this step, the MBSE data basis is also prepared with the data generated during the previ￾ous modularization steps. 
As the harmonization process always allows for different MPA alternatives, the result of 
the modularization procedure are individual MPA alternatives, which need to be as￾sessed with respect to their individual performances in order to derive which of them 
performs best under the known circumstances. 
Therefore, the described Method 1 with the configuration-based simulation approach 
can be used during or subsequent to the harmonisation phase. As this approach leads to 
a multi-dimensional decision criterion with implementing both customer- and company 
perspectives for each MPA alternative, a quantitative mean for the final decision is pro￾vided. Nevertheless, this decision criterion should only be used as a decision support. 
The expertise of individual experts is always to be considered as well. 
With the result of the most performant MPA alternative leading to the decision about 
which alternative to implement. 
On this basis, the modular kit can be implemented. This modular kit can then be used by 
the developed method 2 – the configuration system – in order to derive product variants 
with their subsequent part BOM. 
Figure 4-34: Position of the developed methods in the process if the Life Phases Modularization within the 
Integrated PKT-Approach4.5 Interim summary of the MPA simulation algorithm 115 
A major advantage of the developed methods is their maintainability. When applying 
changes to the underlying MPA or the set of constraints defining the modular kit, the 
changes are applied automatically and with an increased level of consistency in compar￾ison to existing paper-based methods. 
In the following chapter 5, the validation of the developed methods is presented on the 
basis of a case study.5 Validation of the methods 
The following section is to validate the developed method by applying the individual 
method steps to a product family of customer-individual laser processing system. These 
systems are based upon specific and highly individual customer requirements from dif￾ferent industry branches such as automotive, aviation, public transportation and medical 
industries, those systems are offered with different degrees of automation, from manual 
feeding to fully automated, robot-based systems for loading, manufacturing, unloading. 
As all customer requests possess such a high degree of individuality, resulting from the 
different to be manufactured parts, those laser manufacturing systems are produced in 
very small batch sizes and are often even one-piece designs. 
5.1 Description of the case study 
This section is to describe the outset point for the upcoming case study. In order to mo￾tivate the performed methodical modularization process, the following Figure 5-1 gives 
an overview of the company’s product program. 
It becomes obvious at first glance that the considered product program contains a high 
degree of internal variety, resulting from the high external variety proposed towards the 
customers. This external variety is a direct result from the more and more competitive 
market this special equipment manufacturer is acting in. As the original product archi￾tecture evolved together with the increasing size of the company over the last two dec￾ades under a constant cost- and time pressure, standardized processes or a methodically 
developed product architecture were not implemented to full extent. As a result, when 
offering and designing new systems for an individual customer, already solved problems 
for specific customer requirements can only be re-used in an implicit way, as no specific 
Figure 5-1: Excerpt of the product program from the case study company [Erl20]
Springer-Verlag GmbH, DE, part of Springer Nature 2022
F. M. Dambietz, Performance simulation of modular product architectures by 
model-based configuration, Produktentwicklung und Konstruktionstechnik 21,
https://doi.org/10.1007/978-3-662-64233-7_5
© The Author(s), under exclusive license to 118 5 Validation of the methods
modular kit existed. This leads to long cycle times of individual systems, repetitive errors 
and problems diagnosed during late development phases, leading to increased overall 
product costs. In order to increase its competitivity, the company aims to address these 
issues with a methodical modularization approach in order to reduce its product archi￾tectures internal variety while keeping its external variety still high and therefore still 
reacting to most of the individual customers requests for quotations1
. 
As the changing of an existing product architecture into a new MPA is a highly cost-in￾tensive as well as strategically impacting step, having a possibility to assess the MPAs’ 
performance during its early design stages is crucial to the overall success. Being able to 
analyse the usability of the MPA within the known customer segments and their specific 
requirements enables early adaptions of the MPA before its first implementation. Ac￾cording the within section 2 described research problem, the main goal is to reduce the 
number of iterations and therefore MPA performance adaption time and -cost by pre￾determining the MPA alternatives’ performances. 
In order to achieve this preliminary analysis, the developed simulation for alternative 
MPAs is used. The general model-based data basis using the concepts of MBSE as mod￾elled in CSM, the configuration system and the corresponding simulation output are de￾scribed in the following. 
At first, the configuration system for the individually configurable laser welding machines 
is described. 
One issue to be stated is the relation between customer product and company product. 
As laser welding machines are usually specifically designed to manufacture an individual 
customer product, the laser welding system’s functions and characteristics are defined 
by the original customer product as shown in the following Figure 5-2. 
As this Figure 5-2 displays, the customer possesses intense knowledge about the cus￾tomer product which is to be manufactured by the laser welding system. Therefore, this 
customer product with its geometric and design aspects, the batch size, to be produced 
1 Compare also the Project „ProRobuSt“ enabled by the Bundesministerium für Bildung und Forschung (BMBF) with the partners 
Mankenberg, Lutz Aufzüge, Odego, ERLAS GmbH and the Institute for Product Development and Mechanical Engineering 
Design (PKT) from 2016 to 2018. 
Figure 5-2: Relation of customer product and translation into company product5.1 Description of the case study 119
quality etc. implicitly define the initial requirements for the laser welding machine. This 
machine is in this terminology described as the company product. Its functions and there￾fore customer relevant properties are defined by the requirements proposed by the cus￾tomer product. In this case, the motion principle of the laser welding system can be de￾fined by analysing the required degrees of motion freedom as well as the required mo￾tion speed in order to meet the proposed cycle times. 
It needs to be pointed out that the customer does not possess sufficient knowledge of 
the company product to express specific requirements towards the machine. Therefore, 
a translation between the customer requirements from the customer product to the 
company product needs to be performed. This translation step already defines the basic 
set-up for the configuration system frontend. A close interaction of the frontend with the 
customer on the basis of the individual customer product (and not on the basis of the 
laser welding system) is inevitable. A detailed description of the frontend in combination 
with the configuration system is given in section 5.2.3. 
Another important fact considering the laser welding configuration system is based upon 
the special equipment manufacturing environment of the case study. As these laser 
welding machines in general as custom-designed systems, the configuration depth of a 
pre-defined modular kit differs between each configured product variant. This is due to 
the fact, that not all customer-relevant properties are known during the modularization 
phase, leading to missing modules matching individual customer requirements. 
As this is a known fact, not only the product architecture was developed using modular￾ization methods, but also the company’s process structure was adapted to the specific 
needs of projects with varying degrees of their configuration depth. This newly devel￾oped process consists of three main branches which are shown in the following Figure 
5-3. 
Figure 5-3: Excerpt of MPC for three different processes: CTO; ETO; CTO-ETO, based on [Sei19b] 120 5 Validation of the methods 
With this excerpt from the overall Module Process Chart (MPC) [Bec13] displaying the 
decision knot for the three different process paths, the starting point is to determine the 
individual project’s configuration depth. 
With customer requirements only demanding for modules, which are available in the 
underlying modular kit, the complete laser welding system can be configured and man￾ufactured. In this case, the configuration depth is 100%, resulting in a Configure-to-Order
(CTO) process (green) with the integrated model-based configuration system. As the case 
study company being a special equipment manufacturer, this is only the case in several 
projects. If the customer requirements are highly individual and cannot be matched by 
the available MPA, the whole system needs to be designed without any available modu￾lar structure. This results in the most labour-intensive Engineer-to-Order (ETO) process 
(grey), which is as well occurring quite rarely. The most important, as it is used most 
often, process path describes a combination of the previous ETO and CTO process. This 
process path is used for projects with a configuration depth smaller than 100% and 
greater than 0%. This is usually the case, when existing modules meet customer require￾ments to a certain extent, but e.g. are not available in the required expression. In this 
case, the third process path, a hybrid Configure-to-Order based Engineer-to-Order (CTO￾ETO) process is used. The central element of this process is formed by the Product Variant 
Architect, who assesses, develops and releases adaptations to the existing modules ac￾cording to a standardized procedure. These adaptions are then re-integrated into the 
MBSE MPA, serving as an input for the then updated configuration system. 
As the identification of the process path, which corresponds with the actual customer 
product is a key aspect of the case study company’s management process, this is a key 
requirement to be met by the configuration system. 
Nevertheless, the more projects can be carried out by applying the pure CTO-process, 
the more efficient the business process can be. This directly results in an increased mar￾ket competitiveness and therefore increased company success. 
Therefore, a MPA possessing the highest degree of balance between a high degree of 
CTO projects without losing the key competence of special equipment manufacturing, as 
well as most ideal order-lead times, stock cost, configurability and overall equipment cost 
needs to be determined. With this basic premises as a target, the during this contribution 
described simulation is applied to the case. The following chapter 5.2 describes the im￾plementation of the case study at the case study company. 
5.2 Case Study implementation 
In this section, the implementation of the developed methods for the configuration and 
simulation of MPAs is described. 
5.2.1 Configuration implementation for the case study 
Considering the data basis as the simulation’s crucial starting point, at first a brief de￾scription about the MBSE-data basis is given. According to the developed method, using 5.2 Case Study implementation 121
the adapted configuration Network Diagram provides the most efficient data structuring 
scheme. For this product family with a significant number of individual components, 
modules, interfaces, dependencies and constraints, the implementation of the MPA us￾ing the during section 4.3.2 developed MCC is considered as inevitable. The following 
Figure 5-4 displays the set-up of the MCC for the Laser Module as an exemplary excerpt 
of the complete modelling process. 
Figure 5-4 displays at position (I) the relevant dependencies and constraints of the Laser 
Module. In this case, the Cooling, Safety and Control Modules are required. The variant 
expressions of the Laser Module – compare position (II) – are stated as variant expres￾sions of the laser power, ranging from two to six kilowatts in power. The relevant inter￾faces are depicted at position (III), where the Laser fibre, the Control Bus and the Coolant 
connector are displayed. The MIG at position (IV) is then used in addition with the afore￾mentioned three parameters to model the Laser Module within the MBSE environment. 
Figure 5-4: Module Capability Catalogue (MCC) with MIG for Laser module122 5 Validation of the methods
These structures as pre-defined by the individual MCC elements are then used for the 
automated instantiation of the MPA within the MBSE environment as described in sec￾tion 4.3.1. 
In order to provide all necessary data for the instantiation of the individual MPA alterna￾tives’ Network Diagrams, all customer-requirements as well as their corresponding cus￾tomer-relevant properties are to be instantiated as objects with their corresponding class 
stereotypes. In order to comply with the during the initial modularization developed 
structure, using the MCC as described above offers a well-suited solution to consistently 
implementing all relevant data. 
These MCC information can further be used when implementing the constraint diagrams. 
The first step correspondingly consists of sorting the individual objects by their stereo￾types into the matching columns of the CND. By using the MCC information, customer 
requirements can be linked to their corresponding customer relevant properties, using 
the allocation - dependency class provided by CSM. As these interconnections are of a 
considerable amount, the constraint-setting method of using DMs for allocating corre￾sponding object pairs offers a more efficient, error-resistant and intuitive solution in￾stead of using the graphical arrow-allocation method. On the basis of the instantiated 
root data core and the set dependencies, the Configuration Network Diagrams (CND) can 
be displayed. Figure 5-5 displays an exemplary part of the CND for the Laser Module. This 
model uses tools and concepts provided by CMS in order to consistently and continuously 
enhance the modelling and maintainability of the MPA. 
In this case, the customer relevant property of the displayed module describes the reali￾zation of the weld penetration depth. This CCrP is met by the Laser module, consisting of 
the components pumping cavity, which is variant – compare enumeration in the left up￾per corner of component blocks - in terms of available laser output power, the optic fibre, 
Figure 5-5: Part of the case study CND for the Laser Module (excerpt of Cameo Systems Modeler)5.2 Case Study implementation 123
the control system, the housing and the corresponding laser chiller. The individual objects 
are assigned with their individual stereotypes, leading to the machine-readable form for 
the object classification. 
As the module variants in the module-module variant diagram are determined by the 
expression of the CCrP, the correspondingly modelled constraint diagram for the Laser
module is displayed in the following Figure 5-6. By using the parameter-type diagram in 
CSM, the corresponding mathematical functions are implemented. Again, this model is 
not to serve as a simulation basis in CSM but as a visualization and data consistency tool 
for the use in the external configuration system. 
This constraint diagram defines the determination of the adequate Laser module variant 
by choosing the laser power according to the required weld penetration depth. In this 
case, the depth in [mm] requires an equal or greater laser power in [kW]. As this can be 
expressed as a mathematical function, the red parametric object block in Figure 5-6 con￾tains the function math.round(0), which is applied to the expression of the inserted CCrP. 
This expression defines the customer requirement for the welding depth in [mm], which 
is then rounded up to the next full integer number, returning the adequately correspond￾ing laser power in [kW]. Thereby, the required module variant for the Laser module can 
be identified, e.g. the Laser Module 4 kW for a welding depth expression of 4 mm.
Figure 5-6: Parametric diagram for Laser module (excerpt of Cameo Systems Modeler)124 5 Validation of the methods
As a following step, parametric diagrams for the individual modules are modelled for 
more complex parametrics. The following Figure 5-7 displays an exemplary parametric 
diagram for the dynamic parameters of the module X-Axis. 
This parametric diagram shows, that the CCrP enable movement in X-direction is influ￾enced by two relevant factors (I). These factors are the variant travel length and the var￾iant feedrate of the movement system. In order to derive the according to the customer’s 
demands adequate module variant, these two factors need to be taken into account. The 
red parameter blocks (II) mathematically define the decision-making process. 
As Figure 5-7 displays, the variant expression of the X-Axis travel length is calculated by 
the following constraint as displayed in the following equation 19: 
 ሺͳͻሻݕݐ݈ܾ݅݅ܽ݌ܽܿ݊݋݅ݏݏ݁ݎ݌ݔ݁ݐ݊ܽ݅ݎܽݒ݈݁ݑ݀݋݉ ൑ ݄ݐ݈݈݃݊݁݁ݒܽݎݐ ൅ ݄ݐ݈݈݃݊݁݃݊݅݀݁ݓ
Accordingly, the expression for the variant federate is derived as shown in equation 20: 
݄ݐ݈݈݃݊݁݁ݒܽݎݐ
Ͳሻʹሺݕݐ݈ܾ݅݅ܽ݌ܽܿ݊݋݅ݏݏ݁ݎ݌ݔ݁ݐ݊ܽ݅ݎܽݒ݈݁ݑ݀݋݉ ൑ ݁݉݅ݐ݈݁ܿݕܿ݃݊݅ݏݏ݁ܿ݋ݎ݌
These both equations are implemented in the parameter model as shown in Figure 5-7 - 
compare position (II). 
In order to properly calculate the factor values, there are two different input types dis￾played in Figure 5-7. These are the individually defined input values, displayed therefore 
Figure 5-7: Parametric diagram for the X-Axis Module (excerpt of Cameo Systems Modeler)5.2 Case Study implementation 125 
in blue (III), represent the input variables for the individual customer’s requirement ex￾pressions. With these input values, the mathematical expression in the parametric object 
compares the calculation result to the pre-set capability value, displayed in white (IV). 
These values need to be pre-defined in the MBSE-environment when modelling the 
MPA’s parametric models. In the case of the in Figure 5-7 modelled X-Axis parameter 
diagram, one of the constraints describes the necessary travel length. As an input param￾eter, the upper two blue variables, describing the welding lengths and positioning lengths
with a customer-individual multiplicity n are introduced. The travel length of the move￾ment system according to the implemented constraint needs to be set at either the same 
length or larger than the sum of all welding and positioning lengths. This comparison is 
based on the upper white input parameter, describing the module variants travel length 
capabilities. If there is a module variant available with a travel length equal or larger than 
the calculated required travel length value, a matching module variant can be returned. 
As already stated within section 4.3.2, the MBSE environment provides just the con￾straint framework, the actual calculation upon these constraints is done by the configu￾ration system. The actual values for the blue individual input values also originate from 
the configuration system, more precise from the frontend system. By modelling these 
constraints in the MBSE environments, changes to the modular kit and the underlying 
set of rules can be maintained or changed without the need of accessing the actual con￾figuration system. This has a significant impact on the overall system’s maintainability. 
These implementation steps were performed analogically to the complete MPA, leading 
to the required information and structured data for the developed Method 2 – the prod￾uct configuration system. With the MBSE data basis implemented, the next step is to 
describe the configuration system itself. 
As mentioned previously, the configuration system’s frontend needs to be designed ac￾cording to the customer product and translate all information the individual customers 
can tell into customer-relevant properties. 
In order to further describe the developed configuration system, a potential customer 
product is introduced in Figure 5-8. 126 5 Validation of the methods
The customer product in Figure 5-8 represents a water transfer system with two weld 
seams as displayed by the weld seam symbols. The first weld seam is defined as a circular 
weld seam on the top side, whereas the second seam is a rectangular weld seam on the 
right side. Both weld seams are defined as orthogonal weld seams with a required mini￾mum weld penetration depth of 2.5 mm. 
Table 5-1 gives further relevant information about the part supplied by the customer 
which is required to define the relevant frontend input parameters: 
With these information types in mind, the configuration frontend is designed around the 
customer-product information. As mentioned above, this is done best using a user-cen￾tred approach in order to allow all existing implicit and explicit customer knowledge to 
Figure 5-8: Potential customer part as demonstration part for the configuration system
Table 5-1: Additional customer information for example laser welding part5.2 Case Study implementation 127
be transferred into the company’s product-architecture schematics. As for the example 
of specialised laser welding machines, the customers usually possess a highly detailed 
description of the individual customer part. They consider process tact time, part quality, 
welding positions and depths etc. As for the machine system itself, customers in general 
are indifferent about which machine concept is used in order to meet their requirements. 
 When comparing all the above-mentioned influencing factors, it becomes apparent that 
most of these parameters are customer-product related and therefore can be found by 
closely analysing the customer part’s welding drawing. All relevant criteria, such as num￾ber, position, required depth, length and shape of the individual welds as well as their 
overall orientation in the machine’s workspace are described by the individual drawing 
views. Using these welding drawings as a baseline for the frontend design seems quite 
reasonable. 
Therefore, an interactive frontend has been designed, allowing the sales agent to insert 
together with the individual customer the relevant part’s drawing and to manually sketch 
the welds as lines, circles or freeform shapes onto the drawing. The following Figure 5-9 
displays the developed frontend with the exemplary customer part. 
In Figure 5-9, the customer part is displayed according to the standardized normal pro￾jection view. Both weld seams are already marked in green. Furthermore, the left lower 
Figure 5-9: Display of laser welding system configuration frontend with exemplary customer part and marked 
weld seams (green)128 5 Validation of the methods 
corner of Figure 5-9 contains manual entry fields for additional customer product infor￾mation, such as cycle times or positioning accuracies. 
At this point it needs to be stated, that the displayed frontend in Figure 5-9 is to be de￾veloped and adapted manually for each individual product as it is strongly customer- and 
market dependant. The algorithm, model-based data structure etc. is designed in order 
to be dynamically applicable and therefore not requiring any adaptions when changing 
the to be configured product. The algorithm behind the frontend then identifies the part 
perspectives, onto which weld seams are drawn and analyses whether the individually 
drawn welds can be processed by either a one-axis system for an individual line or a two￾axis system. In this case, as there are two welding planes identified, both with two-axis 
movements (circle and rectangle). This is preliminary to the frontend translating the cus￾tomer-perspective into customer-relevant properties. 
As the major top-level customer requirement in this case can be described as enable part 
welding, the corresponding CCrP’s as well as their expressions can be defined as 
 enable X movement by 30 mm 
 enable Y movement by 20 mm 
 enable A axis rotation by 90° 
These CCrP’s with their expressions originate from the movement system needing to fol￾low the drawn welding lines. As only the maximum movement length expressions are 
relevant, the circumference of the rectangular weld seam is to be considered, leading to 
the X-movement of 30 mm and the Y-movement of 20 mm. Nevertheless, as two welding 
planes have been identified, either the part or the welding head needs to be rotated by 
90° in order to reach the weld seam. The decision, whether the part or the welding head 
is to be rotated is mainly based upon the parts specific weight and the overall enclosing 
part size. With all relevant information being processed by the frontend, a complete list 
of CCrP’s for the individual project is generated. This list then serves as an input for the 
backend algorithm. 
Using the pre-defined model-based data basis as well as the exported XML data sheets 
with the corresponding constraints and dependencies, the algorithm checks as described 
in chapter 4.3 whether there are suitable modules meeting the customer requirements 5.2 Case Study implementation 129
available. In some cases, there is no clear one-to-one allocation between a customer rel￾evant property and the modules fulfilling them as displayed in the following Figure 5-10. 
In this case, the two customer-relevant properties variant positioning accuracy (I) and 
variant feedrate (II) are considered, as they both have impacts on multiple modules 
based upon the given customer requirement expressions. As the red and blue parametric 
allocations display, there is a decision to be made, either to choose the linear movement 
module or the articulated robot module. As item (III) in Figure 5-10 shows, there are two 
different variable expressions available for the feedrate and the positioning accuracy 
constraint. These expressions can have the two states high or low, meaning that the re￾quired feedrate or positioning accuracy based upon the initial customer requirements 
demands for the module variant with either a high or low expression of these two prop￾erties. The issue with this fact is, that the X-Axis system as the more performant system 
in both aspects can meet the customer requirements for both high and low expression 
demands (red allocations at Figure 5-10 no. III). Opposed to that, the articulated robot 
module can only meet the low performance expressions for the feedrate and positioning 
accuracy (blue allocations at Figure 5-10 no. III). In the case of the high expressions being 
required, a clear module determination can be made, as these can only be met by the 
linear movement system. Alternatively, if only a low performance system is required, 
such a clear differentiation cannot be made, as these required positioning accuracies and 
feeding speeds can be fulfilled as well by robotic as by linear motion systems. Therefore, 
no clear determination of the finally to be chosen modules can be made at this point just 
by considering the underlying parametric. 
Actually, there is a third movement system available in the developed MPA, which is for 
clarity reasons not integrated in the displayed Figure 5-10, as the combination of three 
modules and three impacting factors already result in a multi-dimensional level combi￾nation. As these multi-level combinations are expressed in individual diagrams being 
Figure 5-10: Example of multiple allocations from customer relevant properties to modules130 5 Validation of the methods
linked by corresponding DMs, this connection is displayed in annex 7.6. Nevertheless, 
this third movement system is relevant for the in this section described differentiation 
algorithm. This system is a Scanner-based movement system, consisting of two angled 
and moveable mirrors, which can control the orientation of the processing laser beam. 
As these mirrors possess a very low mass compared to an articulated robot or a linear 
movement system, the positioning accuracy as well as the feedrate are significantly 
higher than for the other two alternative movement systems. On the other hand, the 
travel range is limited. Additionally, the cost impact of such a laser scanner system is 
significant. This results in implementing such a system only when the requirements, such 
as cycle times, positioning accuracy or available mounting space demand for this module. 
The adjacent decision process about which modules the final product variant is com￾posed of is performed by at first deriving all valid configuration paths by applying the 
adapted Dijkstra-algorithm – compare also section 4.3.5 – and subsequently calculating 
their Hyperspace values for the final decision as described during section 4.3.8. As for the 
originally noted differentiation problem of two movement systems (articulated robot 
system and linear movement system, compare Figure 5-10), the above-described Dijks￾tra-algorithm is verified in the following section by being applied to this exemplary deci￾sion problem. 
The following Table 5-2 displays the set of to be considered modules with fictional values 
for two dimensions. The first dimension D1 describes the modules’ material cost, 
whereas the second dimension D2 displays their corresponding order-lead time. 
As described above, there are different solutions of configurations which are able to 
meet the customer’s requirements in order to perform a circular weld. The major three 
product variants consist either of a robotic system, a gantry-based system, or a laser 
scanning system. As there are several combinations allowed within these three main cat￾egories, in total seven valid configuration paths can be determined – compare also Figure 
5-12. 
Table 5-2: Excerpt of MPA for configuration path determination with two analysis dimension values5.2 Case Study implementation 131
These individual configuration paths can hypothetically be mapped in the configuration 
roadmap as schematically displayed in the following Figure 5-11. 
On the right-hand side of Figure 5-11, two different MIGs of possible product variants 
are displayed. The first path displays a scanner-based system as opposed to the robotic 
system the second path consists of. This clearly displays that the underlying framework 
parameters can have a significant impact to the configuration result. 
With respect to these individual paths, one needs to be identified as the most adequate 
according to the initial parameter framework. In order to show the algorithms capability, 
two different cases of framework parameters are generated. 
CASE 1: reduced order-lead time 
In this case, the order-lead time is to be considered as an addition factor due to a fictional 
customer request. As the customer requires the desired system to be delivered as fast as 
possible, a certain increase in the overall system’s cost is tolerable. 
CASE 2: minimal overall system cost 
In this case, the only relevant parameter apart from requiring a valid configuration path 
is to choose the product variant with the minimal overall system cost. 
Figure 5-11: Generic display of multiple configuration path decision problem132 5 Validation of the methods
With these parameters set, the Hyperspace algorithm as described in section 4.3.8 is ap￾plied. The following table shows the possible configuration paths identified by the Dijks￾tra algorithm and their corresponding calculated Hyperspace values under the premises 
of CASE 1 and CASE 2. These premises are defined by the weighting factor applied to the 
individual dimensions as described during chapter 4.3.8. The results of the applied con￾figuration algorithm with the parameter prioritisation and subsequent configuration 
path determination using the developed Hyperspace algorithm are displayed in the fol￾lowing Figure 5-12. 
In the head-row of Figure 5-12, the applied dimension weighting used for the individual 
case implementation are displayed. For CASE 1, the material cost dimension (dimension 
1) is weighted less (value 1) as the order-lead time dimension (value 2). For CASE 2, the 
dimension weightings are reversed. The minimal Hyperspace area values are marked (cir￾cled in red). As these values represent the most performant available solution, the algo￾rithm returns the corresponding configuration path as a list of modules to the configura￾tion system. For CASE 1 (reduced order-lead time), the laser-scanner based system is 
chosen, as this system comes with the shortest possible order-lead time amongst the 
three possible alternatives (robot, gantry, scanner). Although having a certain impact 
onto the cost side of the product variant, it is still considered as the most performant for 
CASE 1. For CASE 2, as the minimal cost is the major premise for the decision, the robotic￾based solution is determined. These two algorithmic determinations match the manual 
comparison. According to the determined most adequate configuration path, the config￾uration process within the backend part of the configuration system is completed. 
Figure 5-12: Results of applied Hyperspace- and Dijkstra algorithm with marked minimal 
Hyperspace values (encircled in red)5.2 Case Study implementation 133
The last step is to display the result towards the user which is shown in the following 
Figure 5-13. 
 
Figure 5-13: Frontend and backend of developed configuration system for exemplary customer part – compare 
also Figure 5-9134 5 Validation of the methods 
This return of information consists of four main parts: 
 Supplying a visualization of the configured system 
 Supplying a cycle time diagram 
 Exporting a Bill of Material for internal use and define the process path 
For the used product example, the visualization of the machine system is displayed to￾wards the customer as well as a list of the used modules. Figure 5-13 displays both the 
initial frontend (top part) as well as the returned visualization and module variant list of 
the configured product variant (lower part). 
This Figure 5-13 displays the translation from the customer perspective into the company 
perspective. The top part of Figure 5-13 shows the configuration frontend with the cus￾tomer part and the marked welding sections in green. Based upon this input and the 
above-described additional customer information, the configuration system derives the 
most adequate product variant within the modular kit. The lower part of Figure 5-13 
therefore shows the returned configuration result. 
At position (I), the customer prioritisation for this specific case is displayed, with the pri￾ority box for the material cost dimension being activated. This leads to the final determi￾nation of the product variant, which is schematically displayed by the MIG at position (II). 
There, the used module variants together with their degree of variety are stated in order 
to give both customer and sales agent a visual representation of the determined product 
variant. At position (III), the exact module variants are stated in further detail, split into 
the three main categories movement system, laser system and basic system. 
Another important fact is stated at position (IV). There, the to be used business process 
path is displayed. In this case, the configuration system determined the product variant 
on the basis of a CTO-based-ETO process. This means, that not all initial customer re￾quirements as shown in Table 5-1 can be fulfilled to full extent just by applying the mod￾ular kit. In total, for the described project, a configuration depth of 92% can be reached. 
The only customer requirement not met by the modular kit considers the mentioned 
automation via a workpiece conveyor. Such a system is considered to be highly individual 
and is therefore treated as pure ETO-module. Furthermore, the configuration system au￾tomatically determines the bill of material for the configured system which is exported 
as a CSV-data sheet. 5.2 Case Study implementation 135
As a major part of the configuration process is based on the machine system’s cycle time, 
the calculation and performance of the system can be displayed by the configuration 
system as well. The cycle time diagram is shown as well and is displayed in the following 
Figure 5-14. 
Based upon these above-described configuration steps, one of the initially proposed re￾search questions considering the exact definition of a configuration can be answered as 
represented in the following Figure 5-15. 
According to Figure 5-15, a configuration consists of a pre-defined product variant with 
either standard or variant modules (white-grey) in addition with an optional individual￾ized part (blue). Furthermore, the final configuration represents the most performant 
product variant available on the basis of the individual customer preferences. In Figure 
5-15, the derived shares for a pre-definable product variant as well as the share of re￾quired individualization for the described product variant is given as well. 
Figure 5-14: Cycle Time diagram for used customer product
Figure 5-15: Final definition of a processed configuration for exemplary configured product variant136 5 Validation of the methods
As this configuration system forms the core element of the main MPA simulation, the 
next step is to define the analysis dimensions which then need to be implemented into 
to root data structure.
5.2.2 Case Study simulation analysis dimensions 
With a MPA at higher complexity levels, determining the relevant analysis dimensions is 
a major issue. In general, it can be stated, that all influencing factors to the product ar￾chitecture, which also show an effect when altered, can be relevant for the analysis 
[Scw19]. In order to identify the impact factors of a MPA with a sufficiently important 
effect, using the Impact Model as described in section 3.5 is one possible solution. 
The complete Impact Model for the case study company can be seen in annex 7.7. The 
following Figure 5-16 displays an exemplary part of the Impact Model the impact factor 
configurability. 
On the left side the characteristics and features of modular product structures are visu￾alized. These lead to the effects in the life phase, in this case the sales and marketing life 
phase. An arrow indicates whether the effects are reduced or increased and whether the 
experts have given a positive (green), negative (red) or ambigual (orange) rating. In Fig￾ure 5-16, the feature configurability of the sales and marketing life phase is displayed. 
With increased configurability, the product flexibility is increased. It can also be seen, 
that the overall number of variant parts increases. As more market segments can be ad￾dressed with an increased configurability, this factor is also stated as improved. This di￾rectly results in an increased company turnover. Similar to this described effect, the Im￾pact Model for the case study company is analysed for effects showing a strong positive 
or negative impact onto the individual MPA’s performance. As these effects can originate 
from all life phases, these are all taken into account. 
In total, ten relevant factors have been identified and are briefly described in the follow￾ing. 
Configurability 
The configurability and therefore product flexibility is increased. 
 
Figure 5-16: Excerpt of the Impact Model for the case study company (Sales & Marketing)5.2 Case Study implementation 137 
Component variety 
The number of variant parts can be decreased due to standardization efforts. 
Number of parts/Component re-use 
Due to the improved standardization and thereof resulting part re-use the overall num￾ber of parts can be reduced, resulting in a decreased maintenance effort. 
Engineering effort/Development time for systems 
As the overall system design time can be reduced by applying a modular kit with stand￾ardized capabilities, engineering efforts and therefore -costs can be decreased. 
Order-lead time 
As main modules and standardized components are used more frequently, pre-manu￾facturing or stocking them in addition with the reduced engineering time decrease the 
overall systems order-lead time. 
Customer satisfaction/Configuration depth 
One important factor to measure the MPA’s performance is the customer satisfaction 
by the pure CTO application of the modular kit. This factor is measured using the devel￾oped configuration depth as described in chapter 4.3.8 
Adaptability/Upgradeability 
Within the field of special equipment manufacturing, the possibility of a later adaptabil￾ity or upgradeability is crucial. This influencing factor consists of a binary unit, as a mod￾ule either can be upgraded or not. 
Material cost per unit 
Due to the standardization and re-use of components, parts can be pre-ordered in 
larger batch sizes, resulting in decreased material costs per produced system. 
Overall cost per unit 
As a combination of most above-mentioned influencing factors, the cost per individual 
system can be decreased using modularization approaches. This dimension represents 
the overall system cost in order to be compared with other alternatives. 
Percentage of unused features/Over-Dimensioning 
With the concept of modularization and standardization, over-dimensioning is inevita￾ble. This usually leads to a certain number of unused features within the MPA when ap￾plying the modular kit. 
These factors are forming the total set of analysis dimensions inserted into the simulation 
– the developed Method 1, compare also section 4.4. 
As these dimensions form the basic parameters for the simulation, their specific values 
need to be assigned to the individual components as described in 4.4.2. 138 5 Validation of the methods
According to the developed method, the CVV for the case study company architecture is 
defined as displayed in the following Figure 5-17. 
As Figure 5-17 displays, all the above-described ten analysis dimensions, originating from 
the Impact Model can be found in the CVV. With this CVV for each component deter￾mined, their total sum forms the total CVV for the individual product variants. 
The next step is to implement the CVV data and its underlying parameter model into the 
MBSE environment. 
These identified CVV dimensions need to be supplied with specific data. As these data 
sets need to be allocated to every individual component in order to be able to sum them 
up when determining the product variants, these are the parameters needing to be rep￾resented by the Rollup Pattern. As this Rollup Pattern is the crucial interface part respon￾sible for transferring all non-structural but quantifiable data to the adjacent configura￾tion system, its underlying Rollup Pattern parametric diagram is designed as visualized in 
the following Figure 5-18. The above derived analysis dimensions are modelled as 
Figure 5-17: Configuration Value Vector (CVV) for Laser machine systems, based upon the 
modelled Impact Model
Figure 5-18: CSM-modelled Rollup Pattern for the Laser machine system analysis dimensions5.2 Case Study implementation 139 
parametric objects, forming the baseline for the parameter value calculation. As all these 
ten parameters are allocated to each component, forming the child values for the hier￾archical recursive calculation, the CVV is instantiated on the component level. When 
moving up into higher levels of the modelled MPA, these child values are used for the 
calculation of the next level values, visualized in Figure 5-18Figure 5-18 as parent values.
As the left object in Figure 5-18 shows, the Rollup Pattern is applied to the complete Laser 
system model space. 
This Rollup Pattern can be applied to the individual MPA alternatives’ Network Diagrams. 
As the required data necessary for filling the until then blank parameter variables are 
already mapped within a PDM or ERP system, they can be transferred using a batch￾application. This application allocates specified parameters, exported from the PDM sys￾tem, to the individual MBSE component object. As these objects have been instantiated 
automatically, the allocation algorithm is designed to compare the individual identifier 
numbers and therefore properly identifying the correct components. Having completed 
the allocation of all parameters to one MPA alternative’s Network Diagram, this set of 
parameter values are then to be saved as an instance table named according to its un￾derlying MPA alternative network structure. This procedure needs to be repeated for 
every MPA alternative, providing the basic data values for the upcoming product config￾uration system. 
As the analysis dimensions as well as their specific values are defined, the following chap￾ter 5.2.3 is to describe the customer data input for the MPA alternative simulation 
5.2.3 Simulation data input: customer products 
As described in section 4, one possible solution to creating a suitable data basis for the 
MPA simulation is the use of historic customer data. For the underlying case study, a total 
sum of 20 customer requests has been used. In order to keep the representability high, 
only customer requests which also turned into real projects are considered. Further￾more, as this simulation is to assess the MPA’s performance, the projects considered as 
pure ETO projects right from the beginning have not been integrated into the simula￾tion’s data input. Including these customer requests would result in a strong negative 
impact onto the MPA’s performance, as a large number of customer requirements can￾not be met. As these requirements were originally excluded when performing the initial 
modularization, taking them into account when simulating the MPA’s performance does 
not meet the simulation’s target. 
Therefore, all customer requests used as input data can either be processed via the pure 
CTO or CTO-ETO process as described in chapter 3. The simulation’s main goal is to ana￾lyse the two different modelled MPA alternatives’ performance under the in section 5.1 
predefined framework values for the analysis dimensions according to the Impact Model. 140 5 Validation of the methods
Figure 5-19 shows three exemplary customer products in addition to the already dis￾played customer product described in section 5.1. Due to confidentiality reasons, the 
remaining 16 customer products cannot be displayed. Nevertheless, a list of all resulting 
customer-relevant properties according to the frontend requirement translation is 
stated in annex 7.8. 
The parts of Figure 5-19 displays a Shifting Drum (part I), a Bracket Holder (part II) and a 
part of a gear train (part III) which are used as part of the simulation input. 
With the translation of the customer requirements into conjoint customer-relevant prop￾erties, the following Table 5-3 displays an excerpt of the CCrP-list for these three parts. 
This additional information together with the position of the weld seams on the parts 
itself are then used as a part of the simulation input. 
Figure 5-19: Visualization excerpt of the used parts for the MPA simulation
Table 5-3: Additional customer information for simulation input parts of Figure 5-195.2 Case Study implementation 141
The following chapter 5.2.4 describes the results of the simulation with reference to 
these customer input data. 
5.2.4 Visualization of simulation results 
According to the overall simulation design as described in section 4.4, the simulation is 
carried out. As opposed to the Flow Diverter product example, the translation of cus￾tomer requirements into customer relevant properties, representing the translation of 
the customer perspective into the company perspective cannot be performed automat￾ically. As the laser welding system configuration frontend requires a manual marking of 
the weld seams as well as a welding plane definition, an automated data generation is 
not possible. Nevertheless, the simulation requires a fixed set of input data to iteratively 
loop through the configuration processes. Therefore, the frontend translation step is per￾formed manually with the resulting individual lists of customer relevant properties then 
being exported individually and used as the fixed simulation input data for the automatic 
simulation implementation – compare section 4.4. 
When executing the simulation, one major step is the multi-dimensional Hyperspace al￾gorithm as described in section 4.3.8. As the underlying case study contains ten analysis 
dimensions, a visual 3D-representation cannot be given any more. In order to display the 
simulation’s results, using Euclidian projection algorithms, leading to individual 2D￾heatmaps is used as described in section 4.4.2. The following Figure 5-20 displays the 
simulation’s output for the two developed MPA alternatives as individual heatmaps. 
Figure 5-20: Heatmap representation of the simulation output for MPA Alternative 1 (left) 
and MPA Alternative 2 (right)142 5 Validation of the methods 
As Figure 5-20 displays, there are major differences to be noticed within both MPA alter￾natives. In general, as these MPA alternatives contain a much larger number of elements 
and dependencies – compare also annex 7.9 –, the reason for using a heatmap visualiza￾tion instead of a 3D-representation gets obvious. This visualization allows for an intuitive, 
qualitative perception of the individual MPA alternatives’ performance. As parts of an 
MPA with a low performance index are marked as red parts as opposed to those with a 
high-performance index (green), the difference between MPA alternative 1 and alterna￾tive 2 is evident. The amount of red, orange and yellow areas within MPA alternative 1 is 
significantly larger than within MPA alternative 2. This leads to the conclusion, that MPA 
alternative 2 performs significantly better under the currently modelled customer envi￾ronment with respect to the identified analysis dimension for the business environment. 
This visual representation is also supported by the actually calculated, integrated Hyper￾space area values, but as these values are dimension-less floating numbers, taking them 
as a pure decision support does not correspond with the actual point of view of user￾centred design. 
According to the simulated results, the implementation of the modular kit based upon 
MPA alternative 2 is to be suggested. 
The values for the individual key factors can also be derived from the simulation without 
transforming them into one individual conjoint Hyperspace value. These individual values 
then represent the non-normalized expression of the final product variant’s CVV-param￾eters according to section 4.3.5. 
Nevertheless, as the case study product is a highly complex system with a large amount 
of dependencies and constraints being simulated with consideration of 10 analysis di￾mensions, it is no longer possible to manually perform an output verification. 
As this verification is key to the acceptance of the simulation’s results and therefore the 
usability of the method within actual MPAs’ development processes, there are two dif￾ferent approaches available. On the one hand, the modelled system for the laser welding 
system does use exactly the same algorithmic model as well as data structure as it was 
used for the explanatory Flow Diverter model. In theory, this should lead to similarly ad￾equate simulation results for a complex system, as e.g. for the laser welding systems, as 
the results matched for a less complex system as e.g. for the Flow Diverter model. 
In order to further support the acceptance and reliability of the simulation’s output, a 
sensitivity analysis of the actual simulation’s results is performed and described in the 
following chapter. 
5.3 Verification and validation 
In order to perform a proper verification process of such complex simulation algorithms, 
there is a common approach existing in the field of simulation verifications. Similar to the 
in this contribution described simulation, other complex, software-based simulations, 
such as FEM-simulations, cannot be verified by manual result recreation. Instead, a sen￾sitivity analysis is performed [Sar05]. 5.3 Verification and validation 143
5.3.1 Sensitivity analysis 
A sensitivity analysis is designed in order to verify an explicated or mental model of a 
complex context. In order to verify or falsify the underlying model, a specific known 
change to the input data is performed. With consideration of this input data change, the 
output data of the simulation can be predicted. If the expectation matches with the ac￾tual results, the simulation passes the sensitivity analysis. When analysing FEM-simula￾tions, a known external force is applied to a specific data knot, leading to a predictable 
shift of the total force distribution [Sar05] within the to be analysed part. If the simulated 
force distribution matches the predicted distribution, the simulation algorithm is consid￾ered as verified. Analogically, the input data for the simulation of the MPA alternatives 
is specifically altered in order to predict a visible change in the overall MPA alternative’s 
performance. This is best done with altering the underlying MBSE-input data structure at 
a low-complexity level. 
Therefore, a single module with few interfacing constraints and dependencies is chosen. 
For the case study, the Laser module is chosen in order to keep the information con￾sistent with the explanation of section 5.1. The following Figure 5-21 displays the MIG 
representation of the Laser module to the original MPA alternative 2 as well as of the 
MIG for the MPA alternative used for the sensitivity analysis. As the Laser module is de￾liberately the only difference between the two used product architectures, the simula￾tion’s graphical output is only to differ in one single aspect. 
Figure 5-21: MIG representation if alternative Laser modules as used during the sensitivity analysis144 5 Validation of the methods
As Figure 5-21 shows, the alternations to the Laser module mainly concern the individual 
component’s degree of variety. In this case, the standard module is an over-dimensioned 
laser module with the average maximum required laser power, resulting a standardized 
amount of laser cavities and therefore a standardized laser control component. For the 
specific changes for the sensitivity analysis, a more detailed configurability of this module 
is enabled by allowing a certain degree of variety to the amount of laser cavities. As this 
reduces the module’s permanent over-dimensioning, its configurability is higher than for 
the standardized alternative. Nevertheless, a variance in the laser cavities also requires 
a variance in the laser control component (both marked as grey components). Table 5-4 
displays the resulting relevant changed values. It is important to notice that these values 
are fictional values in order to be able to properly predict the simulation’s result. 
It can be seen, that the standardized alternative, although being over-dimensioned, has 
a smaller cost impact than the configurable one. Furthermore, the order-lead time is sig￾nificantly smaller. As the control component is standardized as well, the integration ef￾fort is reduced as well. Nevertheless, as this standardized module does not allow for cus￾tomer-individual configurations, its configurability is considered as zero, whereas the 
variant alternative allows for a complete configurability. 
Figure 5-22: Heatmap representation of the simulation output for the sensitivity analysis
Table 5-4: CVV values for sensitivity analysis5.3 Verification and validation 145 
The next step is to implement these changes into the underlying MBSE-architecture, ap￾plying the described attribute value changes and then simulating both MPA alternatives. 
Figure 5-22 displays the result of the sensitivity analysis simulation. 
As Figure 5-22 shows, both simulated MPA alternatives result in the same heatmap per￾formance representation apart from one spot (circled). This deviation marks the differ￾ence in the implemented Laser modules. The left heatmap displays MPA alternative 2 
with the standardized Laser module, which performs better than within the sensitivity 
analysis MPA alternative (right). As it can clearly be seen, the circled area within the left 
heatmap is represented as a green heatmap spot, whereas the circled area within the 
right heatmap is marked as an orange-red heatmap spot. 
As the variant Laser module for the sensitivity analysis MPA alternative has a negative 
impact on cost, order-lead time and integration duration, it is marked as less performant. 
As its configurability is more performant the standardized alternative’s configurability, it 
is marked in light red-orange instead of dark red. If the configurability index was less 
performant for the sensitivity analysis MPA alternative as well, the circled area in the 
right heatmap would be represented as dark red, as all values had a strong negative im￾pact on the overall performance’s index. 
These analysis results match with the estimated and predicted mental model of the sim￾ulation. Therefore, according to the definition of a sensitivity analysis [Sar05], the simu￾lation algorithm and model can be considered as verified. 
The following chapter 5.3.2 is giving a further validation of the underlying configuration 
system. 
5.3.2 Validation 
As for the underlying configuration system itself as well as the performance of the imple￾mented MPA at the case study company, this section is to perform a validation of these 
both aspects. As the implementation and assessment of different MPA alternatives is not 
feasible due to costing-, time- and applicability reasons, the following validation is based 
on a comparison of a project’s performance before and after having implemented a mod￾ular kit. Furthermore, the configuration system itself is to be validated in order to analyse 
its proper functionality. 146 5 Validation of the methods
By comparing a project with known customer requirements from the period before hav￾ing implemented a modular kit with the results of applying these customer requirements 
to the configuration system with the underlying modular kit, a comparison of both out￾comes can be done. First of all, the machine system designed according to the historic 
customer requirements is modelled as its corresponding MIG and displayed in the fol￾lowing Figure 5-23. 
As Figure 5-23 shows, there is a large number of variant modules and components to be 
noticed within this historic customer request. As the shown machine design and its un￾derlying product development process is not based upon a MPA, this MIG appearance 
with the shown variance is not surprising. Amongst all modules and components, only 
few standard components can be found, such as the scanner system and laser chiller, as 
there are no variants available. The rest of the modules have specifically been designed 
to match the customer requirements. Therefore, this machine system is designed accord￾ing to a pure ETO process, as shown in Figure 5-23 within the legend (process state). This 
results in a high degree of variety, and therefore cost, but also comes with a complete 
fulfilment of the initial customer requirements. If this project were to be judged by its 
means of a hypothetical configuration depth, this project came with a configuration 
depth set at 100% as it is custom-built according to the initial customer requirements. 
Nevertheless, as the system is custom-built, the marked process path is described as an 
ETO process. 
Figure 5-23: MIG to customer specifications for used exemplary product, manual system design5.3 Verification and validation 147
As a validation to the performance of the developed configuration system, the known 
set of customer requirements are inserted into the configuration system. After a com￾pleted configuration process on the basis of the implemented MPA, the following MIG in 
Figure 5-24 displays the determined product variant’s appearance. 
When comparing Figure 5-24 to Figure 5-23, the main noticeable fact is their close simi￾larity. In terms of overall module and component appearance, almost the exact same 
module composition is shown in the MIG based upon the original ETO-process as well as 
with the MIG based upon the configuration system. The only key difference is to be seen 
with the Conveyor module, which is not stated within Figure 5-24. This close similarity of 
both MIGs is a further indicator of a valid configuration system as well as a valid modelled 
MPA, as the algorithmically derived product variants closely matches the according to 
the mental model of the MPA manually configured version. With almost the same mod￾ules determined by the configuration system as originally modelled on purpose, the con￾sideration of the relevant customer requirements is reliably proven. As for the missing 
Conveyor module within the MIG shown in Figure 5-24, this is due to the reason that this 
conveyor system cannot be implemented within a modular kit, as it is strongly customer￾product dependant and therefore a highly individualized product. Furthermore, as a 
close investigation has shown, the frequency of customer requests demanding for a con￾veyor system is significantly low, which is a further aspect of the conveyor not being im￾plemented into the modular kit. 
As for the configured product variant, another major difference is the displayed by the 
degree of variety as well as the to be applied process state. With most of the modules 
being standardized (white) as opposed to being variant (grey), the clear benefit of mod￾ular kits becomes apparent. There are only two still variant modules, such as the Access 
Doors and the Laser Source, which both need to be configured according to the require￾ments defined by the customer product. The central blue module represents the part 
Figure 5-24: MIG to customer specifications for used exemplary product, configuration system output148 5 Validation of the methods
fixture. As this fixture needs to be designed specifically in order to geometrically match 
the customer product, this module needs to be considered as an individual module. 
Taking both the individual design of the fixture and the additional design of the conveyor 
system into account, this product variant comes with a configuration depth of approxi￾mately 92% when based upon the distinct modular kit. Therefore, the determined pro￾cess path for this project is considered as a CTO-based ETO process (stated in yellow
within the legend of Figure 5-24. 
With respect to the above-described information, a first analysis of the resulting implica￾tions to cost-, time- and error savings for projects based upon the implemented modular 
kit can be done and is shown in the following Figure 5-25. For this analysis, in total eight 
projects over a period of two years have been considered. 
The analysis of the newly developed process structure shows a reduction of the through￾put time for CTO-ETO projects of up to four weeks (by approx. 20%) as well as a reduction 
of up to 80% of the workload in the design area. In addition, a reduction of the total 
manufacturing costs by approximately 5% was achieved in the first stage due to the use 
of the modular system. Additionally, a reduction of the need for rework by up to 70% 
due to the possibility of testing individual modules separately was achieved [Sei19b]. This 
analysis does not yet include batch size effects and reductions of complexity costs. Fur￾ther significant cost savings can be expected after fully implementing the modular kit 
into the product development process as well as into the product architecture mainte￾nance process. For the latter, major cost- and time saving advantages are expected. This 
is based upon two aspects: On the one hand, a modularized product architecture allows 
for a clear differentiation within the overall modular kit, allowing for a discrete, step-by￾step maintenance of the product architecture. On the other hand, as being based upon 
Figure 5-25:Increase of individual performance parameters before (grey) 
 and after modular kit implementation (blue)5.3 Verification and validation 149 
an MBSE data structure, changes and their effects to the underlying MPA can be mod￾elled and simulated in a consistent, efficient and versionable way. 
On the basis of the above displayed performance and result of the configuration system 
as well as the MPA alternative performance simulation, both parts can be considered as 
validated. 
With respect to the initially posed research questions and the research hypothesis, the 
following section describes the response to these questions: 
5.3.3 Response to the research questions and research hypothesis 
The initially stated five research questions are stated again in the following and answered 
on the basis of the during this thesis developed methods. 
Research question 1 
How can the decision making for MPA alternatives be methodically and quantitatively 
supported during the early phases of the development process whilst taking both cus￾tomer and company framework conditions into account? 
For the decision-making of MPA alternatives in a quantitative way whilst integrating both 
customer- and company requirements, the developed configuration-based simulation 
method is of significant use. Due to the possibility of dynamically integrating and adapt￾ing the simulation framework parameters to the given simulation environment, all 
known aspects can be taken into account. Especially due to its software-based adapta￾bility, maintainability and consistency, this method can be integrated in to the early-stage 
decision making processes. By simulating various alternatives and thereby iterating the 
MPA alternative concepts, the number of iterations until reaching a performant MPA can 
be reduced significantly. As these first iterations do not rely on a implementation in the 
company environment – as they are only software-based – the cost and resource invest￾ment for these initial iterations can be significantly reduced, enhancing the company’s 
market competitiveness. 
Research question 2 
Is it reasonable to separate the modelled MPA using the tools and concepts od MBSE 
and the corresponding configuration system into individual, but linked systems? 
In order to enable this simulation, a clear separation of the modelled MPA alternatives 
and the corresponding configuration and simulation systems is crucial. As it has been 
shown, the application of MBSE tools and concepts significantly supports the consistency 
enhancement, MPA maintainability, checks for plausibility, verification analysis etc., but 
has limited capabilities towards complex simulation models adapted to specific needs. 150 5 Validation of the methods 
Therefore, the separation of the data basis and the performing configuration and simu￾lation environment is considered as inevitable. 
Research question 3 
How can the optimum degree of configurability be objectively and reproducibly ob￾tained amongst the given MPA alternatives? 
By implementing different MPA alternatives and therefore modular kits as a basis for a 
product configuration system, these concepts can be evaluated on the basis of their Con￾figuration Depth factor with respect to given historic customer requirements. By config￾uring a known and constant set of customer requirements, the degree of fulfilled cus￾tomer requirements by the individual MPA alternative leads to the Configuration Depth. 
By comparing this factor, which is meant to be set as high as possible, to the overall MPA 
alternative resource demand, the most ideal MPA alternative can be derived. This also is 
considered together with research question five. 
Research question 4 
How does a consistent configuration system need to be designed in order to transfer 
the customer product perspective into the company product and process perspective? 
A configuration system needs to consist of two major parts – the frontend and the 
backend part. The frontend needs to be designed according to the customer’s knowledge 
and perception of the to be configured product. In the case of the Laser processing ma￾chines, the fronted is based upon the to be manufactured customer product. The 
backend part needs to consistently process the customer requirements on the basis of 
the modelled MPA alternative and the corresponding kit. Therefore, applying a MBSE￾based data structuring to the configuration system is a reliable way to enable these re￾quirements. 
This enables the product-, market-, and company specific generation of the product con￾figuration system, allowing to transfer the specific customer perspectives into the com￾pany product and process perspectives. 
Research question 5 
How can suitable effects for the MPA performance analysis be methodically derived 
while considering different customer-company environment conditions? 
The developed multi-dimensional performance analysis on the basis of the CVV – values 
enable the the obtaining of the most performant degree of configurability vs. common￾ality amongst the given MPA alternatives. By analysing their performance in a multi-di￾mensional perspective as it is described by applying the developed Hyperspace algorithm 
and comparing the subsequent performance indices for the given MPA alternatives, a 5.3 Verification and validation 151 
quantitative representation of the individual MPA alternatives’ performance under the 
known circumstances is provided. 
Research hypothesis 
A MBSE-based configuration system used within a simulation of various multidimen￾sional customer- and business framework conditions can be used as a method to assess 
alternative MPA performances during their early design state. 
All in all, it has been shown during this section 5, that a MBSE-based configuration system 
for the multi-dimensional simulation of MPA alternatives can be used as a method during 
the early design state in order to analyse and assess the individual MPA alternatives per￾formance. This index can then be used as a quantitative measure in order to support the 
modularization team with the decision about which of the given alternatives is tending 
to perform best within the known customer and company environment. This has also 
been validated by applying the developed methods in a real industry environment for a 
complex product. The configuration and simulation methods are applied repetitively 
within this company, leading to a clear validation of the methods. 
 6 Conclusion and outlook 
With respect to the originally proposed research question, the presented contribution 
provides a suitable method for the early performance assessment of MPA alternatives 
The initially stated hypothesis of implementing a configuration system as a central ele￾ment into a simulation for the developed simulation has proven to be a viable concept 
to the addressed issue. As this model-based configuration system strongly focuses onto 
the customer perspective by transferring the modularizations inherent knowledge to po￾tential customers, one key element of the initially described development implications is 
met. Furthermore, with the MPA as well as the underlying set of dependencies and con￾straints representing the structural and technical-functional part of the modularization 
as well as its product strategic orientation, this mutual addressing is also included. As an 
additional feature, the use of the Impact Model as a methodical set-up for the analysis 
determination enables a close consideration of the company’s perspective. Correspond￾ing with the initially derived implication of the possibility to process large data amounts, 
the software-based model-based approach using tools and concepts supplied by MBSE 
enables a clear consistency advantage over other existing software-based solutions. It 
has been shown that complex data structures with a significant number of components 
still can be handled and kept at a transparent and consistent level. Additionally, the de￾veloped dynamical constraint definition within the configuration algorithm provides a 
high degree of system maintainability as well as its application to differing use cases. 
All in all, it is to be considered as a reasonable tool in the process of MPA development. 
With its capability of combining both customer- as well as business perspectives, a major 
advantage can be generated. This also supplies one possible solution to an existing gap 
int the pertinent literature. 
The simulation method has been developed on the basis of an model-based configura￾tion system. The implementation of the root data core within an model-based environ￾ment such as Cameo Systems Modeler comes with several advantages. First of all, in￾creased consistency within the data structure can easily be achieved, as all data is stored 
in one central root data core. All corresponding models, diagrams and dependencies are 
modelled on the basis of this root data core, leading to a single-source of truth data man￾agement. This also increases the implemented modular kit’s maintainability, as changes 
to the existing MPA can be performed by versioning the existing data structure and stor￾ing each version as an individual instance. This also allows for an increased verification 
within the MPA as well as for further plausibility checks. Furthermore, the expression of 
Springer-Verlag GmbH, DE, part of Springer Nature 2022
F. M. Dambietz, Performance simulation of modular product architectures by 
model-based configuration, Produktentwicklung und Konstruktionstechnik 21,
https://doi.org/10.1007/978-3-662-64233-7_6
© The Author(s), under exclusive license to 154 6 Conclusion and outlook 
implicit and explicit company and expert knowledge within one single data source ena￾bles a clear explication of the MPA’s inherent ontology. As this ontology with all corre￾sponding constraints and dependencies defines the configuration structure of the imple￾mented MPA, a possibility to address this structure by a configuration system has been 
developed. This configuration system on the one hand offers a great possibility to intui￾tively transfer the knowledge within the implemented MPA towards potential custom￾ers. On the other hand, it is used throughout this contribution as the key element for the 
simulation of MPAs’ performances during their early design state. This simulation com￾bines multiple individual customer- and business analysis dimensions by processing this 
multi-dimensional problem as a geometric Hyperspace solution. This leads to a single 
performance index which can then be displayed as a performance heatmap for individual 
MPA alternatives. 
This contribution provides a detailed explanation of the simulation and configuration 
process by using a simple medical product example. As this product example is deliber￾ately kept at a low level of complexity, a distinct comparison of the based mental simu￾lation model and the software-based simulation result is possible. Furthermore, a case 
study with a more complex product architecture has been conducted. A model-based 
configuration system for laser welding systems has been developed in the case study for 
a special equipment manufacturer, which is a special equipment manufacturer in this 
product sector. Based upon this configuration system, the multi-dimensional simulation 
was carried out using historic customer data. A verification of the simulation was per￾formed by a sensitivity analysis, which verified the reasonability of the implemented sim￾ulation. 
As a future step, the developed MPA simulation, which is currently applied using historic 
customer data, is to be connected to methods considering the future-robust design of 
product architectures. Approaches for methodically identifying future customer require￾ments and developing a future-robust product architecture upon them already exist and 
can be used as future input data for the presented MPA alternative simulation [Dam21a]. 
On the one hand, by just using the identified future customer requirements as a basis for 
generating probable future customer requests, a company could use the developed MPA 
simulation in order to evaluate its current MPA’s future robustness. By implementing the 
existing MPA into the developed simulation and implementing a corresponding configu￾ration system, these future customer requests are to be used as virtual customer re￾quests applied to the configuration system. In case of the actual MPA already being fu￾ture robust to a certain extent, the corresponding simulation’s heatmap would still re￾turn as a generally green and therefore performant result. If the actual MPA needs to be 
altered in order to reach a specific level of future robustness, the simulation can be al￾tered in order to identify the most crucial aspects which are to be addressed. 
On the other hand, the simulation can be used in order to verify if a developed future￾robust MPA meeting the demands of the identified future customer requirements. By 
modelling future MPAs as an MBSE-instance and by including the future customer re￾quests similar as described in the section above, it can be evaluated to which extent the 
developed MPA and the customer requests match. 
Furthermore, the application of model-based MPAs and the subsequent performance 
simulation can be extended into the field of Product-Service-Systems (PSS). By modelling 
developed PSS alternatives within the model-based environment and simulating their 
performance upon the as above-described future customer requirements, a decision 5.3 Verification and validation 155 
support and quantifiable index about the performance of such PSS alternatives can be 
given. The first steps towards this approach is presented in [Dam21b]. 
Another interesting aspect provided by the capabilities of the presented configuration￾based simulation consists of the self-learning-based optimization of MPA alternatives. By 
linking an instance of e.g. a neuronal net into the simulation’s output, a derivation of the 
positive and negative impacts on the individual MPA alternatives can be analysed. By 
integrating these results into an automated generation method of MPA alternatives, it￾erative and learning-based optimizations of the MPA alternative under given and fixed 
circumstances can be achieved. 
 7 Annex 
7.1 Annex 1: Bibliographic analysis data 
 
Springer-Verlag GmbH, DE, part of Springer Nature 2022
F. M. Dambietz, Performance simulation of modular product architectures by 
model-based configuration, Produktentwicklung und Konstruktionstechnik 21,
https://doi.org/10.1007/978-3-662-64233-7_7
© The Author(s), under exclusive license to 158 7 Annex 
 7.1 Annex 1: Bibliographic analysis data 159 
 160 7 Annex
7.2 Annex 2: Extended excerpt of CND for Flow Diverter Figure 7-1: Annex 1: complete Flow Diverter CND (excerpt of Cameo Systems Modeler)7.3 Annex 3: Four Dependency Matrices for configuration process 161
7.3 Annex 3: Four Dependency Matrices for configuration process 
Figure 7-2: Annex 2: Four individual DM's for hierarchical configuration process162 7 Annex
7.4 Annex 4: Flow Diverter configuration system frondend description 
Regarding the underlying product example, the customers need to be able to describe 
their requirements of patching the anatomic defects in length and diameter and specify￾ing this defect in measurable values. In this case, the frontend’s main construction con￾sists of two entry fields for a required length and diameter set, describing the anatomic 
defect.By graphically describing the situation using a schematic image of a Flow Diverter 
with the specific entry fields located like as representing measurements, the data collec￾tion from the customer is considered as more intuitive than just entering the values into 
blank spaces, as the user is supported with additional visual information. 
As Figure 7-3 shows, the customer-oriented part of the configuration system is deliber￾ately kept lean in order to enable an intuitive usability and knowledge transfer from the 
implemented expert system towards the customer. After the configuration process, the 
configuration result is displayed as shown in the following Figure 7-4. 
Figure 7-3: Flow Diverter configuration system frontend 
Figure 7-4: Configuration result display of the Flow Diverter configurator7.5 Annex 5: Model-Based MPA – configuration system interface data format 163 
7.5 Annex 5: Model-Based MPA – configuration system interface data 
format 
The first step for developing an interface which complies with all these above-mentioned 
requirements is to determine the exchange data format. This factor already limits the 
range of possible interface areas. As described before, this exchange format needs to be 
able to transfer all configuration relevant data by enabling rapid and therefore compu￾tational resource-efficient data processing. As only non-sub-structured data formats with 
all information systematically listed can meet this demand, there are three main data 
types remaining. Two of these data types CSV and XML are text-based data formats which 
are expressible and readable by most of the commonly used software. Furthermore, CSM 
offers the possibility to use Electronic Data Interchange (EDI) -formats, which are also a 
common standard for software data exchanges [Lee18]. The following Table 7-1 shows a 
differentiation of these formats according to the relevant implementational require￾ments. These requirements mainly consider the data model transferred by the inter￾change format itself with special attention to the transferred data structure. Secondly, 
the transferable data structure complexity is one further comparison aspect. As the un￾derlying product structures may consist of a considerable number of components – and 
therefore – objects, the data transfer format’s transmission size is further relevant. In 
order to be able to transfer the modelled structure’s behaviour, expressing formal spec￾ifications, such as mathematical contexts, is another crucial aspect to consider. Further￾more, the data interchange format needs to be supported by additional tools in order to 
enable a platform independent and expendable workflow for the simulation and config￾uration system software. 164 7 Annex
As the above shown Table 7-1 displays, the XML - data exchange format supplies amongst 
the three initially defined possible alternatives the one solution meeting all basic imple￾mentation requirements. Especially the capability of transferring hierarchical structures 
in combination with formal specifications are considered as the two major advantages of 
the XML – formats. With this data format being chosen, the interface needs to export the 
configuration relevant data to one or several individual XML – files. These then serve as 
an input for the product configuration system. 
Table 7-1: Comparison of data interchange formats according to [Ava19]7.6 Annex 6: Extended Parametric Model for case study – Axis Systems 165
7.6 Annex 6: Extended Parametric Model for case study – Axis Systems 
Figure 7-5: Annex 6: Extended parametric model for X-Axis modules (excerpt of Cameo Systems 
Modeler)166 7 Annex
7.7 Annex 7: Case study company Impact Model with relevant analysis 
dimensions 
Figure 7-6: Annex 7: Case study company Impact Model with relevant analysis dimensions (AD)7.8 Annex 8: List of all configuration relevant properties for simulation 167
7.8 Annex 8: List of all configuration relevant properties for simulation Table 7-2: Annex 8: List of all configuration relevant properties for case study simulation168 7 Annex
7.9 Annex 9: Excerpt of Dependency Matrices for MPA alternatives 
Figure 7-7:Annex 5: Comparison of MPA alternative 1(top) and MPA alternative 2(bottom). 
Excerpt of Cameo Systems Modeler Dependency Matrices8 References 
[Abb13] Abbasi, E. K; Hubaux, A.; Acher, M.; Boucher, Q.; Heymans, P.: The Anatomy of a Sales 
Configurator: An Empirical Study of 111 Cases, in Proceedings of the 25th International 
Advanced Information Systems Engineering Conference (CAiSE 2013), Valencia, Spain, 
pp. 162-177, 2013, https://doi.org/10.1007/978-3-642-38709-8_11. 
[Abd08] Abdelkafi, N.: Variety-induced Complexity in Mass Customization: Concepts and 
Management, Ph.D. thesis, Operations and Technology Management, Vol. 7, Hamburg, 
2008. 
[Alt12] Alt, O.: Modellbasierte Systementwicklung mit SysML, Carl Hanser Verlag, München, 
2012, https://doi.org/10.3139/9783446431270. 
[And09] Andreas, G.: Internationalisierung in Produktkonfiguratoren - Anforderungen und 
Konzepte für die Datenhaltung, Ph.D thesis, Friedrich-Schiller-University, Jena, 2009. 
[Ara16] Aras corp.: MBSE and the Business of Engineering, International Conference on 
Systems Modelling, Los Angeles, 2016. 
[Ava19] Avazpour, I.; Grundy, J.; Zhu, L.: Engineering complex data integration, harmonization 
and visualization systems, in Journal of Industrial Information Integration, Vol. 16, pp. 
100103, 2019, https://doi.org/10.1016/j.jii.2019.08.001. 
[Bay18] Baylis, K.; Zhang, G.; McAdams, D. A.: Product family platform selection using a Pareto 
front of maximum commonality and strategic modularity, Research in Engineering 
Design, Vol29 (4), pp. 547-563, 2018, https://doi.org/10.1007/s00163-018-0288-5. 
[Bec13] Beckmann, G.; Krause, D.: Process visualisation of product family development 
methods, in Proceedings of the 19th International Conference on Engineering Design 
(ICED 2013), Seoul, Korea, 2013. 
[Beu19] Beuche, D.: Industrial Variant Management with pure::variants, Proceedings of the 
23rd International Systems and Software Product Line Conference (SPLC19), pp. 37-29, 
Paris, France, https://doi.org/10.1145/3307630.3342391. 
[Ble04] Blecker, T.; Abdelkafi, N.; Kreuter, G.; Friedrich, G.: Product Configuration Systems: 
State-of-the-Art, Conceptualization and Extensions, In Proceedings of the 8th 
Maghrebian Conference on Software Engineering and Artificial Intelligence 
(MCSEAI’04), pp 25–36, Sousse, Tunisia, 2004. 
[Ble07] Blecker, T.; Abdelkafi, N.: The Development of a Component Commonality Metric for 
Mass Customization, IEEE Transactions on Engineering Management, Vol. 54 (1), 2007, 
https://doi.org/10.1109/TEM.2006.889068. 
[Ble10] Blees, C.; Jonas, H.; Krause, D.: Development of Modular Product Families, 12th 
International Depency and Structure Modelling Conference (DSM 2010), Cambridge, 
UK, 2010. 
© The Editor(s) (if applicable) and The Author(s), under exclusive license to 
Springer-Verlag GmbH, DE, part of Springer Nature 2022
F. M. Dambietz, Performance simulation of modular product architectures by 
model-based configuration, Produktentwicklung und Konstruktionstechnik 21,
https://doi.org/10.1007/978-3-662-64233-7170 8 References 
[Ble11] Blees, C.: Eine Methode zur Entwicklung modularer Produktfamilien, Dissertation, TU 
Hamburg, Hamburger Schriftenreihe Produktentwicklung und Konstruktionstechnik, 
Band 3, Hamburg, 2011, https://doi.org/10.15480/882.1037. 
[Bon05] Bononi, L.; Bracuto, M.; D'Angelo, G.; Donatiello, L.: Scalable and efficient parallel and 
distributed simulation of complex, dynamic and mobile systems, in Proceedings of 
Workshop on Techniques, Methodologies and Tools for Performance Evaluation of 
Complex Systems (FIRB-PERF'05), pp. 136-145, 2005. 
[Bri19] Brinkop, A.: Marktführer Produktkonfiguration, Brinkop Consulting, Vol. 39, abgerufen 
von: https://brinkop-consulting.com/guide/marktfuehrer.pdf, 2019. 
[Bro19] Broumi, D. A.; Bakali, S.; Talea, A.; Smarandache, F.: A new algorithm for finding 
minimum spanning trees with undirected neutrosophic graphs, Granular Computing, 
Vol. 4 (1), pp. 63-69, 2019, https://doi.org/10.1007/s41066-018-0084-7. 
[Bur16] Bursac, N.: Model Based Systems Engineering zur Unterstützung der 
Baukastenentwicklung im Kontext der Frühen Phase der 
Produktgenerationsentwicklung, Dissertation, Karlsruher Institut für Technologie, 
Karlsruhe, 2016, https://doi.org/10.5445/IR/1000054484. 
[Cic18] Cicconi, P.; Raffaeli, R.; Marchionne, M.; Germani, M.: A model-based simulation 
approach to support the product configuration and optimization of gas turbine ducts, 
Computer-Aided Design & Applications, Vol. 15, pp. 807-818, 2018, 
https://doi.org/10.1080/16864360.2018.1462564. 
[Cle20] Cleary, P. W.; Thomas, D.; Hetherton, L.; Bolger, M.; Hilton, J. E.; Watkins, D.: 
Workspace: A workflow platform for supporting development and deployment of 
modelling and simulation, Mathematics and Computers in Simulation, Vol. 175, pp. 25-
61, 2020, https://doi.org/10.1016/j.matcom.2019.11.011. 
[Dan16] D’Angelo, G.; Ferretti, S.; Marzolla, M.; Armaroli, L.: Fault-tolerant adaptive parallel and 
distributed simulation, in Proceedings of the 20th International Symposium on 
Distributed Simulation and Real Time Applications (DS-RT), pp. 37-44, 2016, 
https://doi.org/10.1109/DS-RT.2016.11. 
[Dam21a] Dambietz, F. M.; Greve, E.; Krause, D.: Simulation-based performance analysis ofor 
future-robust modular product architectures, Proceedings of the 23rd International 
Conference on Engineering Design (ICED21), Gothenburg, Sweden, 2021, pp. 2671-
2680. https://doi.org/10.1017/pds.2021.528 
[Dam21b] Dambietz, F.M.; Rennpferdt, C.; Hanna, M.; Krause, D.: Using MBSE for the 
Enhancement of Consistency and Continuity in Modular Product-Service-System 
Architectures, Systems 2021, 9(3), 63. https://doi.org/10.3390/systems9030063 
[Die00] Diestel, R.: Graphentheorie: Mathematical Physics and Mathematiks, Heidelberg, 2000. 
[Dij59] Dijkstra, E. W.: A Note on Two Problems in Connexion with Graphs, in Numerische 
Mathematik 1, pp. 269-271, 1959, https://doi.org/10.1007/BF01386390. 
[Dre08] Drews, M.: Interaction Patterns für Produktkonfiguratoren, Mensch & Computer: Viel 
Mehr Interaktion, Vol. 1, Lübeck, 2008. 
[Dur11] D'Urso, P. I.; Lanzino, G.; Cloft, H.; Kallmes, D.: Flow diversion for intracranial 
aneurysms: a review, in Stroke, Vol. 42 (8), pp. 2363–2368, 2011, 
https://doi.org/10.1161/STROKEAHA.111.620328. 
[Eig12] Eigner, M.; Gilz, T.; Zafirov, R.: Proposal for functional product description as part of a 
PLM solution in interdisciplinary product development, Proceedings of the DESIGN 
Conference (DESIGN 2012), Dubrovnik, Croatia, 2012. 8 References 171 
[Eil11] Eilmus, S.; Beckmann, G.; Krause, D.: Modulare Produktstrukturen methodisch in 
Unternehmen umsetzen - Entwicklung von Standardumfängen und Integration von 
Erfahrungswissen, Proceedings of the 22th Symposium Design for X (DfX 2011), 
Tutzing, Germany, pp. 99-118, 2011. 
[Ehr03] Ehrlenspiel, K; Meerkamm, H.: Integrierte Produktentwicklung: Denkabläufe, 
Methodeneinsatz, Zusammenarbeit, Vol 4., München, 2003, 
https://doi.org/10.3139/9783446421578. 
[Ehr05] Ehrlenspiel, K.; Kiewert, A.; Mörtl, M.; Lindemann, U.: Kostengünstig Entwickeln und 
Konstruieren, Berlin. 2005, https://doi.org/10.1007/978-3-642-41959-1. 
[Els03] Elsner, G.: Kundenbindung durch Produktkonfiguratoren und Baukästen, Industrie 
Management, Vol. 13 (1), pp. 33–36, 2003. 
[Epp12] Eppinger, S.; Browning, T.: Design structure matrix methods and applications, ITPress, 
Vol. 4 (3), 2012, https://doi.org/10.7551/mitpress/8896.001.0001. 
[Eri98] Erixon, G.: Modular Function Deployment - A Method for Product Modularisation, Ph. 
D. Thesis, The Royal Institute of Technology, Stockholm, Sweden, 1998. 
[Erk09] Erkus, B.; Jakupovic, D.; Oueslati, K.: ProjINF Konfigurator für Produktanforderungen, 
Proceedings of the DESIGN Conference (DESIGN 2014), Dubrovnik, Croatia, 2014. 
[Erl20] Internet appearance of the ERLAS GmbH: www.erlas.de, called on 2020-10-11. 
[Fel06] Fellini, R.; Kokkolaras, M.; Papalambros, P.: Commonality Decisions in Product Family 
Design, in: Simpson T.W., Siddique Z., Jiao J. (Eds.): Product Platform and Product 
Family Design. Methods and Applications, Springer, New York, pp. 157-186, 2006, 
https://doi.org/10.1007/0-387-29197-0_9. 
[Fri12] Friedenthal, S.; Moore, A.; Steiner, R.: A practical guide to SysML: the systems modeling 
language. Morgan Kaufmann, Washington, 2014. 
[Gas05] Gasparotti, R.; Liserre, R.: Intracranial aneurysms, European radiology, Vol. 15 (3), pp. 
441–447, 2005, doi: 10.1007/s00330-004-2614-8. 
[Geb14] Gebhardt N, Bahns T, Krause, D.: An example of visually supported design of modular 
product families. In: Morini G, Procedia CIRP Design Conference, Milano, Italy, pp. 75-
80, 2014, https://doi.org/10.1016/j.procir.2014.03.136. 
[Gil14] Gilz, T.: PLM-Integrated Interdisciplinary System Models in the Conceptual Design 
Phase Based on Model-Based Systems Engineering, Ph.D Thesis, Technical University 
Kaiserslautern, 2014. 
[Gra20] Graessler, I.; Hentze, J.: The new V-Model of VDI 2206 and its validation, 
Automatisierungstechnik, Vol. 68 (5), pp. 312-324, 2020, 
https://doi.org/10.1515/auto-2020-0015. 
[Gre19] Greve, E.; Rennpferdt, C.; Hartwich, T.; Krause, D.: Determination of Future Robust 
Product Features for Modular Product Family Design, Proceedings of ASME 2019 
International Mechanical Engineering Congress and Exposition (IMECE), Salt Lake City, 
UT, USA, 2019, https://doi.org/10.1115/IMECE2019-10497. 
[Gre20] Greve, E.; Rennpferdt, C.; Krause, D.: Harmonizing cross-departmental Perspectives on 
Modular Product Families, Procedia CIRP, Vol. 91, 2020, pp. 452-457, 
https://doi.org/10.1016/j.procir.2020.02.198. 172 8 References 
[Gro10] Grönlund, J.; Sjödin, D. R.; Frishammar, J.: Open innovation and the stage-gate process: 
A revised model for new product development, California management review, Vol. 52 
(3), pp. 106-131, 2010, https://doi.org/10.1525/cmr.2010.52.3.106. 
[Goe09] Göbel, A.: Internationalisierung in Produktkonfiguratoren - Anforderungen und 
Konzepte für die Datenhaltung. Ph.D. Thesis, Friedrich-Schiller University, Jena, 2009. 
[Hac10] Hacke, W.: Neurologie, Springer Vieweg, Berlin, 2010. 
[Hac17] Hackl, J.; Krause, D.: Towards an Impact Model of modular Product Structures, 
Proceedings of the 21st International Conference on Engineering Design (ICED 2017), 
Vancouver, Canada, 2017, pp. 151–160. 
[Hac20] Hackl, J.; Krause, D.; Otto, K.; Windheim, M.; Moon, S.K.; Bursac, N.; Lachmayer, R.: 
Impact of Modularity Decisions on a Firm’s Economic Objectives, Journal of Mechanical 
Design, Vol. 142 (4), 2020, https://doi.org/10.1115/1.4044914. 
[Had06] Hadzic, T.; Andersen, H. R.: A BDD-Based Polytime Algorithm for Cost-Bounded 
Interactive Configuration, Proceedings of the 21st National Conference on Artificial 
Intelligence (AAAI), Austin, Texas, 2006. 
[Han17] Hanna, M.; Krause, D.: Model-based support for product family design, 19th 
International DSM Conference (DSM 17), Espoo, Finland, 2017. 
[Han18a] Hanna, M.; Krause, D.: Modellbasierte Unterstützung der Entwicklung modularer 
Produktfamilien, Proceedings of the 29th Symposium Design for X (DfX 2018), Tutzing, 
Germany, 2018, pp. 191-202. 
[Han18b] Hanna, M.; Schwede, L.-N.; Krause, D.: Model-Based Consistency for Design for Variety 
and Modularization, Proceedings of the 20th International DSM Conference (DSM 
2018), Trieste, Italy, 2018, pp. 239-248. 
[Han20] Hanna, M; Schwenke, J., Krause, D.: Inconsistency Management for Product Families 
with many Variants through a Model-Based Approach in Modular Lightweight Design, 
Proceedings of the DESIGN Conference (DESIGN 2020), Dubrovnik, Croatia, 2020, pp. 
917-926, https://doi.org/10.1017/dsd.2020.309. 
[Har06] Harlou, U.: Developing product families based on architectures. Contribution to a 
theory of product families, Ph.D. thesis, Technical University of Denmark, Lyngby, 2006. 
[Her13] Hermann, M. O.; Michler, J.; Schönthaler, F.: Wo Kundenwünsche auf technische und 
wirtschaftliche Notwendigkeiten treffen, in Business News, Vol. 2013 (3), 2013. 
[Her14] Herzig, S. J.; Qamar, A.; Paradeis, C. J.: An approach to identifying inconsistencies in 
model-based systems engineering, Procedia Computer Science, Vol. 28, pp. 354-362, 
2014, https://doi.org/10.1016/j.procs.2014.03.044. 
[Hol12] Holt, J.; Perry, S.; Brownsword, M.: Model-based requirements engineering, The 
Institution of Engineering and Technology, London, 2012, 
https://doi.org/10.1049/PBPC009E. 
[Hol13] Holt, J.; Perry, S.: SysML for Systems Engineering, London, Institution of Engineering 
and Technology, London, 2012. 
[Inc15] Hart, L.: Introduction to Model-Based System Engineering (MBSE and SysML), Delaware 
Valley INCOSE Chapter Meeting, Delaware, 2015. 
[Inc20] INCOSE: INCOSE SE Vision 2020 Presentation, Delaware Valley INCOSE Chapter 
Meeting, Delaware, 2020. 8 References 173 
[Iwa13] Iwanek, K.; Kaiser, L.; Dumitrescu, R.; Nyßsen A.: Fachdisziplinübergreifende 
Systemmodellierung mechatronischer Systeme mit SYSML und Consens, Tag des 
Systems Engineerings (TdsE), Stuttgart, 2013. 
[Jam16] James, T. J. Y.; Otto, K.; Wood, K. L.: Design Concept Screening in Compex System Using 
Component Constraints, Proceedings of the International Design Engineering Technical 
Conferences & Computers and Information in Engineering Conference (IDETC 2016), 
Charlotte, North Carolina, 2016. 
[Jun05] Junge, M.: Controlling modularer Produktfamilien in der Automobilindustrie, 2005, 
https://doi.org/10.1007/978-3-663-09513-2. 
[Kau14] Kaufmann, U.; Pfenning, M.: Was die Produkt- von der Softwareentwicklung lernen 
kann -durchgängige Integration disziplinspezifischer Modelle durch den Einsatz von 
Modellierungssprachen, Tag des Systems Engineerings (TdsE), Bremen, 2014, 
https://doi.org/10.3139/9783446443761.033. 
[Kip10] Kipp, T.; Blees, C.; Krause D.: Anwendung einer integrierten Methode zur Entwicklung 
modularer Produktfamilien, Proceedings of the 21st Symposium Design for X 
(DfX 2010), Jesteburg, Germany, 2010, pp. 157-168. 
[Kip12] Kipp, T.: Methodische Unterstützung der variantengerechten Produktgestaltung, 
Dissertation, TU Hamburg, Hamburger Schriftenreihe Produktentwicklung und 
Konstruktionstechnik, Band 4, Hamburg 2012, https://doi.org/10.15480/882.1088. 
[Kil12] Kilger, C.; Stadler, H.; Meyer, H.: Supply Chain Management and Advanced Planning: 
Concepts, Models and Case Studies, Berlin, 2012, https://doi.org/10.1007/978-3-642-
55309-7. 
[Kop04] Koppenhagen, F.: Systematische Ableitung modularer Produktarchitekturen, Berichte 
aus der Konstruktionstechnik, Vol. 16, Aachen, 2004. 
[Kor09] Kortmann, D.; Klink, H.; Wüpping, J.: Strategien zur profitablen Variantenkonfiguration, 
International Journal of Interoperability in Business Information Systems, Vol 3 (2), 
Oldenburg, 2009. 
[Kov19] Kovalenko, I.; Tilbury, D.; Barton, K.: The model-based product agent: A control 
oriented architecture for intelligent products in multi-agent manufacturing systems, 
Control Engineering Practice, Vol. 86, pp. 105-117, 2019, 
https://doi.org/10.1016/j.conengprac.2019.03.009. 
[Kra13] Krause, D.; Ripperda, S.: An assessment of methodical approaches to support the 
development of modular product families, in Proceedings of the 19th International 
Conference on Engineering Design (ICED 2013), Seoul, Korea, 2013, pp 31-40. 
[Kra18] Krause, D.; Gebhardt, N.: Methodische Entwicklung modularer Produktfamilien, Berlin, 
2018, https://doi.org/10.1007/978-3-662-53040-5. 
[Kra21] Krause, D.; Vietor, T.; Inkermann, D.; Hanna, M.; Richter, T.; Wortmann, N.: 
Produktarchitektur, in Bender, B. und Gericke, K. (Hrsg.): Pahl/Beitz 
Konstruktionslehere, Berlin, Heidelberg, Germany, 2021, pp. 335-393, 
https://doi.org/10.1007/978-3-662-57303-7_12. 
[Kri19] Krieter, S.; Thüm, T.; Schulze, S.; Schröter, R.; Saake, G.: Propagating configuration 
decisions with modal implication graphs, Proceedings of 40th International Conference 
on Software Engineering (ICSE 19), pp. 898-909, 2019, https://doi.org/ 
10.1145/3180155.3180159. 174 8 References 
[Krt05] Kratchovil, M; Carson, C.: Growing Modular: Mass Customization of Complex Products, 
Services and Software, Berlin, 2005. 
[Kru10] Krug, A.: Entwurf eines integrativen Grundmodells für Produktkonfiguratoren, Ph.D. 
Thesis, Friedrich-Schiller-Universität, Jena, 2010. 
[Kue20] Küchenhof, J.; Seiler, F. M.; Krause, D.: Model Based Early-Stage Assessment for 
Modular New Product Development, 22nd International Dependency and Structure 
Modeling Conference (DSM 2020), Cambridge, MA, USA, 2020, https://doi.org/ 
10.35199/dsm2020.17. 
[Kuh21] Kuhl, J.; Ding, A.; Ngo, N.T.; Braschkat, A.; Fiehler, J.; Krause, D.: Design of Personalized 
Devices - The Tradeoff between Individual Value and Personalization Workload, 
Applied Sciences, 11, 241, 2021, https://doi.org/10.3390/app11010241. 
[Kvi10] Kvist, M.: Product Family Assessment, Ph.D. thesis,Technical University of Denmark, 
Lyngby, 2010. 
[Lam 13] Lamm, J.; Weilkiens, T.: Functional Architectures in SysML, Tag des Systems Engineering 
(TdSE), Stuttgart, 2013. 
[Lam17] Lamm, J. G.; Weilkiens, T.: Systemmodellierung mit SYSMOD, FAS und VAMOS, Tag des 
Systems Engineering 2017 (TdSE 2017), Paderborn, Germany, 2017. 
[Lau20] Laukotka, F.; Seiler, F. M.; Krause, D.: MBSE als Datenbasis zur Unterstützung von 
Konfiguratoren und Digitalen Zwillingen modularer Produktfamilien, Proceedings of 
the 31th Symposium Design for X (DFX 2020), Bamberg, Germany, 2020, pp. 61-70, 
https://doi.org/10.35199/dfx2020.7. 
[Lee18] Lee, S. L.; Ainin, S.; Dezdar, S.; Mallasi, H.: Electronic data interchange adoption from 
technological, organisational and environmental perspectives, International Journal of 
Business Information Systems, Vol. 18 (3), pp. 299-320, 2018, 
https://doi.org/10.1504/IJBIS.2015.068166. 
[Li19] Li, L.; Soskin, N. L.; Jbara, A.; Karpele, M.; Dori, D.: Model-Based Systems Engineering 
for Aircraft Design With Dynamic Landing Constraints Using Object-Process 
Methodology, IEEE Access, Vol. 7, pp. 61494-61511, 2019, 
https://doi.org/10.1109/ACCESS.2019.2915917. 
[Lie14] Liebisch, M.: Aspektorientierte Datenhaltung in Produktkonfiguratoren - 
Anforderungen, Konzepte und Realisierung, Dissertation, Jena, Germany, 2014. 
[Lie18] Liebel, G.; Marko, N.; Tichy, M.: Model-based engineering in the embedded systems 
domain: an industrial survey on the state-of-practice, Software Systems Modelling, Vol. 
17, pp. 91–113, 2018, https://doi.org/10.1007/s10270-016-0523-3. 
[Lin09] Lindemann, U.; Maurer, M.; Braun, T.: Structural Complexity Management: an 
approach for the field of product design, Berlin, 2009. 
[Lin11] Lindemann, U.; Ponn, J.: Konzeptentwicklung und Gestaltung technischer Produkte: 
Systematisch von Anforderungen zu Konzepten, Heidelberg, 2011. 
[Mcd17] McDermitt, M.; Hedberg, Z.: Towards identifiying the elements of a minimum 
information model for use in a model-based definition, Proceedings of the 12th 
International Manufacturing Science and Engineering Conference (MSEC 2017), Los 
Angeles, California, 2017. 
[Mcd18] McDermitt, M.; Alvarez, R.; Hartmann, N.: Towards an extended model-based 
definition for the digital twin, Computer-aided Design & applications, Vol. 15 (6), pp. 
880–891, https://doi.org/10.1080/16864360.2018.1462569. 8 References 175 
[Mey97] Meyer, J. A.: Visualisierung im Management, Deutscher Universitäts-Verlag, 
Wiesbaden, 1996, https://doi.org/10.1007/978-3-663-09117-2. 
[Mor16] Mortensen, N.; Hansen, C.; Lokkegaard, M.; Hvam, L.: Assessing the cost saving 
potential of shared product architectures, Concurrent Engineering: Research and 
Applications, 2016, https://doi.org/10.1177/1063293X15624133. 
[Mue15] Mueggo, C.; Pfenning, M.: Die Rolle von MBSE und PLM im Industrial Internet, Tag des 
Systems Engineering (TdSE), Ulm, 2015, https://doi.org/10.3139/9783446447288.028. 
[Ndi11] NDIA: Final Report, Model-Based Engineering Subcommittee, Delaware Valley INCOSE 
Chapter Meeting, Delaware, 2011. 
[Omi15] Omiciuolo, M.; Thiel, M.; Förster, K. P.; Paetzold, K.; Förstner, R.: General purpose 
modeling and domain specific simulation: a framework for space mechanisms design, 
Proceedings of Annual IEEE Systems Conference (SysCon 2015), pp. 802-809, 
Vancouver, Canada, 2015. 
[Ott97] Otto, K. N.; Ahrens, G.: Eine Methode zur Definition technischer 
Produktanforderungen, Konstruktion, Vol. 49 , pp.19-25, 1997. 
[Pae17] Paetzold K.: Product and Systems Engineering/CA Tool Chains, In Biffl S., Lüder A., 
Gerhard D. (Eds): Multi-Disciplinary Engineering for Cyber-Physical Production 
Systems, Springer, Cham, 2017, https://doi.org/10.1007/978-3-319-56345-9_2. 
[Pim94] Pimmler, T.; Eppinger, S.: Integration analysis of product decompositions, Proceedings 
of the 6th Design Theory and Methodology Conference, pp. 343-351, New York, USA, 
1994. 
[Pli11] Plietz, M.: Patterns in der Produktkonfiguration, Tagungsband zum 14. 
Interuniversitären Doktorandenseminar Wirtschaftsinformatik, Chemnitz, 2014. 
[Pol08] Polak, B.: Kundenorientierte Gestaltung von Produktkonfiguratoren, Dissertation, 
Universität St. Gallen, 2008. 
[Ram12] Ramos, A. L.; Ferreira, J. V.; Barceló, J.: LITHE: an agile methodology for human-centric 
model-based systems engineering, IEEE Transactions on Systems, Man, and 
Cybernetics: Systems, Vol. 43 (3), pp. 504-521, 2012, 
https://doi.org/10.1109/TSMCA.2012.2207888. 
[Raj18] Raja, J. Z.; Chakkol, M.; Johnson, M.; Beltagui, A.: Organizing for servitization: 
Examining front-and back-end design configurations, International Journal of 
Operations & Production Management, 2018, https://doi.org/10.1108/IJOPM-03-
2016-0139. 
[Rip13] Ripperda, S.; Krause, D.: An Assessment of methodical Approaches to support the 
Development of Modular Product Families, in Proceedings of the 19nd International 
Conference on Engineering Design (ICED 2013), Seoul, Korea, 2013. 
[Rip17] Ripperda, S.; Krause, D.: Cost Effects of Modular Product Family Structures: Methods 
and Quantification of Impacts to Support Decision Making, Journal of Mechanical 
Design, Vol. 139 (2), 2017, https://doi.org/10.1115/1.4035430. 
[Rip19] Ripperda, S.: Methodische Unterstützung zur kostenbasierten Auswahl modularer 
Produktstrukturen, Ph.D. Thesis, Produktentwicklung und Konstruktionstechnik, Vol. 
15, Springer Vieweg, Hamburg, 2019, https://doi.org/10.1007/978-3-662-59006-5. 176 8 References 
[Ris15] Riesener, M.: Ähnlichkeitsbasierte Produktkonfiguration im Maschinenbau, Ph.D. 
Thesis, Aachen, 2015. 
[Rob98] Robertson, D.; Ulrich, K.: Planning for Product Platforms, Sloan Management Review, 
Vol. 39 (4), 1998. 
[Sal07] Salvador, F.: Toward a Product System Modularity Construct. Literature Review and 
Reconceptualization, IEEE Transactions on Engineering Management, Vol. 54, 2007, pp. 
219-24, https://doi.org/10.1109/TEM.2007.893996. 
[Sar05] Sartkulvanich, P.; Altan, T.; Göcmen, A.: Effects of flow stress and friction models in 
finite element simulation of orthogonal cutting—a sensitivity analysis, Machine Science 
and Technology, Vol. 9 (1), pp. 1-26, 2005, https://doi.org/10.1081/MST-200051211. 
[Sch06] Scheer, C.: Kundenorientierter Produktkonfigurator: Erweiterung des 
Produktkonfiguratorkonzeptes zur Vermeidung kundeninitiierter Prozessabbrüche bei 
Präferenzlosigkeit und Sonderwünschen in der Produktspezifikation, Berlin, 2006. 
[Scn13] Schneeweiss, D.; Hofstedt, P.: FdConfiq: A Constraint-Based Interactive Product 
Configurator, in Applications of Declarative Programming and Knowledge 
Management, Springer, Berlin, 2013 https://doi.org/10.1007/978-3-642-41524-1. 
[Scu15] Schuh, G.: Leitfaden zur Baukastengestaltung: Ergebnisse des Forschungsprojekts 
Gestaltung innovativer Baukasten- und Wertschöpfungsstrukturen, VDMA, 
Frankfurt/Main, 2015. 
[Scw19] Schwede, L.-N.; Seiler, F. M.; Krause, D.: Anknüpfung von Modularisierungsmethoden 
an ein Wirkmodell modularer Produktstrukturen, Proceedings of the 30th Symposium 
Design for X (DfX 2019), Jesteburg, Germany, 2019, pp. 159-170, 
https://doi.org/10.35199/dfx2019.14. 
[Scw20] Schwede, L.-N.; Winter, M.; Lödding, H.; Krause, D.: Darstellung des Zusammenhangs 
von Produktarchitektur- und Produktionssystemgestaltung in SysML, Proceedings of 
the 31th Symposium Design for X (DFX 2020), Bamberg, Germany, 2020, pp. 41-50, 
https://doi.org/10.35199/dfx2020.5. 
[Sei19a] Seiler, F. M.; Schwede, L.-N.; Krause, D.: MBSE-basierte Produktkonfiguratoren zur 
Analyse der Modularisierung bei der Entwicklung modularer Baukasten-systeme, 
Proceedings of Entwerfen Entwickeln Erleben in Produktenwicklung und Design (EEE), 
Vol. 2, Dresden, Germany, 2019, pp. 55-70. 
[Sei19b] Seiler, F. M.; Greve, E.; Krause, D.: Development of a Configure-to-Order-Based Process 
for the Implementation of Modular Product Architectures: A Case Study, in Proceedings 
of the 22nd International Conference on Engineering Design (ICED 2019), Delft, The 
Netherlands, 2019, pp. 2971-2980, https://doi.org/10.1017/dsi.2019.304. 
[Sei20a] Seiler, F. M., Krause, D.: A Multi-Dimensional Configuration Algorithm for Modular 
Product Architectures, Proceedings of the DESIGN Conference (DESIGN 2020), 
Dubrovnik, Croatia, 2020, pp. 2405-2414, https://doi.org/10.1017/dsd.2020.283. 
[Sei20b] Seiler, F. M.; Kuhl, J.; Krause, D.: A Simulation-Based Decision Support Method For 
Modular Product Architecture Alternatives, 22nd International Dependency and 
Structure Modeling Conference (DSM 2020), Cambridge, MA, USA, 2020, 
https://doi.org/10.35199/dsm2020.9. 8 References 177 
[Sei20c] Seiler, F. M.; Hanna, M.; Schwede, L.-N.; Laukotka, F.; Krause, D.: MBSE zur 
Unterstützung der Produktentwicklung von modularen Produktarchitekturen, in 
Krause, D.; Hartwich, T. S.; Rennpferdt, C. (Hrsg.): Produktentwicklung und 
Konstruktionstechnik, Forschungsergebnisse und -projekte der Jahre 2016 bis 2020, 
Berlin, Heidelberg, Germany, 2020, pp. 111-134, https://doi.org/10.1007/978-3-662-
62393-0_5. 
[Sel09] Sellgren, U.; Törngren, M.; Malvius, D.; Biehl, M.: PLM for Mechatronics integration, 
Proceedings of the International Conference on Product Lifecycle Management PLM 
2009, Geneva, Switzerland, 2009. 
[Sen13] Sendler, U.; Weilkiens, T.: Modellbasierte Systementwicklung - Was Sie schon immer 
über MBSE, PLM und Industrie 4.0 wissen sollten, Tag des Systems Engineering (TdSE 
2019), Stuttgart, Germany, 2019. 
[Sha20] Shafiee, S.; Schäffer, E.; Hvam, L.: Complexity of Configurators Relative to Types of 
Outputs, Proceedings of Conference on Configuration Workshops (CONFWS'20), 
Vicenza, Italy, 2020. 
[Sim12] Simpson, T. W.; Bobuk, A.; Slingerland, L. A.; Brennan, S.; Logan, D.; Reichard, K.: From 
user requirements to commonality specifications: an integrated approach to product 
family design, Research in Engineering Design, Vol. 23, pp. 141-153, 2012, 
https://doi.org/10.1007/s00163-011-0119-4. 
[Stj15] Stjepandic, J.; Wognum, N. Verhagen, W.: Concurrent Engineering in the 21st Century: 
Foundations, Developments and Challenges, Cham, 2015, 
https://doi.org/10.1007/978-3-319-13776-6. 
[Sto97] Stone, R. B.: Towards a Theory of Modular Design, Dissertation, The University of Texas, 
Austin, TX, USA, 1997. 
[Ulr00] Ulrich, K. T.; Eppinger, S.: Product Design and Development, 2nd Edition, McGraw-Hill, 
New York, USA, 2000. 
[VDM14] Verband Deutscher Maschinen- und Anlagenbau: Zukunftsperspektive deutscher 
Maschinenbau, McKinsey & Company, Frankfurt/Main, 2014. 
[Wei08] Weilkiens, T.: Systems Engineering with SysML/UML: Modeling, Analysis, Design, 
dPunkt Verlag, Heidelberg, 2008, https://doi.org/10.1016/B978-0-12-374274-2.00005-
5. 
[Wei18] Weisz, G.; Györgi, A.; Szepesvári, C.: LeapsAndBounds: A Method for approximately 
optimal algorithm configuration, Proceedings of the 35th International Conference on 
Machine Learning, Stockholm, Sweden, 2018. 
[Win19] Windheim, M.: Cooperative Decision Making in Modular Product Family Design, 
Springer Vieweg, Hamburger Schriftenreihe Produktentwicklung und 
Konstruktionstechnik, Band 17, Berlin 20119, https://doi.org/10.1007/978-3-662-
60715-2_4. 
[Wue00] Wüpping, J.: Konfigurationstechnik für die individuelle Serienfertigung, IT 
Management, Vol. 7 (4), pp.2–9, Otterfing, 2000. 
[Zen19] Zennaro, I.; Finco, S.; Battini, D.; Persona, A.: Big size highly customised product 
manufacturing systems: a literature review and future research agenda, International 
Journal of Production Research, Vol. 57 (15-16), pp. 5362-5385, 
https://doi.org/10.1080/00207543.2019.1582819. 178 8 References 
Student Thesis in relation to this research
Weber, Felix.: Entwicklung und Umsetzung eines intuitiven Frontends für ein MBSE- 
 basiertes Konfigurationssystem im Sondermaschinenbau. Abgegeben 
 am 01.03.2021 am Lehrstuhl für Photonische Technologien (LPT) der 
 Friedrich-Alexander-Universität Erlangen-Nürnberg Curriculum Vitae 
Name Dambietz, geb. Seiler
Vorname Florian M. 
Staatsangehörigkeit Deutsch 
Geburtsdatum 15.04.1994
Geburtsort, -land Immenstadt im Allgäu, Deutschland
09.2000 - 08.2004 Grundschule in Rettenberg
09.2004 - 06.2012 Gymnasium in Immenstadt im Allgäu
10.2012 - 04.2016 Studium Wirtschaftsingenieurwesen, Fachrichtung 
 Maschinenbau an der 
 Friedrich-Alexander-Universität Erlangen-Nürnberg 
 Abschluss: Bachelor 
04.2016 - 05.2018 Studium Wirtschaftsingenieurwesen, Fachrichtung 
 Maschinenbau und Management an der 
 Friedrich-Alexander-Universität Erlangen-Nürnberg 
 Abschluss: Master
06.2018 - heute Berufstätigkeit bei der ERLAS Erlanger Lasertechnik GmbH 
06.2018 - heute Externer wissenschaftlicher Mitarbeiter am Institut für 
 Produktentwicklung und Konstruktionstechnik (PKT) an der 
 Technischen Universität Hamburg (TUHH) 
