Permutation Puzzles
A Mathematical Perspective
Jamie MulhollandCopyright c 2021 Jamie Mulholland
SELF PUBLISHED
http://www.sfu.ca/~jtmulhol/permutationpuzzles
Licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 License (the
“License”). You may not use this document except in compliance with the License. You may obtain
a copy of the License at http://creativecommons.org/licenses/by-nc-sa/4.0/. Unless
required by applicable law or agreed to in writing, software distributed under the License is dis￾tributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
express or implied. See the License for the specific language governing permissions and limitations
under the License.
First printing, May 2011Contents
I Part One: Foundations
1 Permutation Puzzles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
1.1 Introduction 11
1.2 A Collection of Puzzles 12
1.3 Which brings us to the Definition of a Permutation Puzzle 22
1.4 Exercises 22
2 A Bit of Set Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
2.1 Introduction 25
2.2 Sets and Subsets 25
2.3 Laws of Set Theory 26
2.4 Examples Using SageMath 28
2.5 Exercises 30
II Part Two: Permutations
3 Permutations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
3.1 Permutation: Preliminary Definition 33
3.2 Permutation: Mathematical Definition 35
3.3 Composing Permutations 38
3.4 Associativity of Permutation Composition 41
3.5 Inverses of Permutations 42
3.6 The Symmetric Group Sn 45
3.7 Rules for Exponents 463.8 Order of a Permutation 47
3.9 Exercises 48
4 Permutations: Cycle Notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
4.1 Permutations: Cycle Notation 51
4.2 Products of Permutations: Revisited 54
4.3 Properties of Cycle Form 55
4.4 Order of a Permutation: Revisited 55
4.5 Inverse of a Permutation: Revisited 57
4.6 Summary of Permutations 58
4.7 Working with Permutations in SageMath 59
4.8 Exercises 59
5 From Puzzles To Permutations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
5.1 Introduction 63
5.2 Swap 64
5.3 15-Puzzle 66
5.4 Oval Track Puzzle 67
5.5 Hungarian Rings 70
5.6 Rubik’s Cube 71
5.7 Exercises 74
6 Permutations: Products of 2-Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
6.1 Introduction 79
6.2 Product of 2-Cycles 80
6.3 Solvability of Swap 81
6.4 Exercises 82
7 Permutations: The Parity Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83
7.1 Introduction 83
7.2 Variation of Swap 85
7.3 Proof of the Parity Theorem 86
7.4 Exercises 91
8 Permutations: An and 3-Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
8.1 Swap Variation: A Challenge 95
8.2 The Alternating Group An 95
8.3 Products of 3-cycles 97
8.4 Variations of Swap: Revisited 99
8.5 Exercises 100
9 The 15-Puzzle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
9.1 Solvability Criteria 103
9.2 Proof of Solvability Criteria 105
9.3 Strategy for Solution 108
9.4 Exercises 109III Part Three: Group Theory
10 Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
10.1 Group: Definition 117
10.2 Some Everyday Examples of Groups 120
10.3 Further Examples of Groups 122
10.4 Exercises 134
11 Subgroups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
11.1 Subgroups 139
11.2 Examples of Subgroups 140
11.3 The Center of a Group 141
11.4 Lagrange’s Theorem 142
11.5 Cyclic Groups Revisited 143
11.6 Cayley’s Theorem 145
11.7 Exercises 146
12 Puzzle Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
12.1 Puzzle Groups 149
12.2 Rubik’s Cube 150
12.3 Hungarian Rings 157
12.4 15-Puzzle 158
12.5 Exercises 158
13 Commutators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
13.1 Commutators 161
13.2 Creating Puzzle moves with Commutators 162
13.3 Exercises 170
14 Conjugates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
14.1 Conjugates 175
14.2 Modifying Puzzle moves with Conjugates 177
14.3 Exercises 183
15 The Oval Track Puzzle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
15.1 Oval Track with T = (1 4)(2 3) 187
15.2 Variations of the Oval Track T move 198
15.3 Exercises 199
16 The Hungarian Rings Puzzle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
16.1 Hungarian Rings - Numbered version 203
16.2 Building Small Cycles: Tools for Our End-Game Toolbox 205
16.3 Solving the end-game 210
16.4 Hungarian Rings - Coloured version 210
16.5 Exercises 21017 Partitions & Equivalence Relations . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
17.1 Partitions of a Set 211
17.2 Relations 212
17.3 Equivalence Relation 213
17.4 Exercises 217
18 Cosets & Lagrange’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
18.1 Cosets 221
18.2 Lagrange’s Theorem 224
18.3 Exercises 226
IV Part Four: Rubiks’ Cube
19 Rubik’s Cube: Beginnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
19.1 Rubik’s Cube terminology and notation 231
19.2 Impossible Moves 235
19.3 A Catalog of Basic Move Sequences 236
19.4 Strategy for Solution 237
19.5 Exercises 241
20 Rubik’s Cube: The Fundamental Theorem . . . . . . . . . . . . . . . . . . . . . 243
20.1 Rubik’s Cube - A Model 243
20.2 The Fundamental Theorem of Cubology 247
20.3 When are two assembled cubes equivalent? 249
20.4 Exercises 252
21 Rubik’s Cube: Subgroups of the Cube Group . . . . . . . . . . . . . . . . . . 257
21.1 Building Big Groups from Smaller Ones 257
21.2 Some Subgroups of RC3 258
21.3 Structure of the Cube Group RC3 260
21.4 Exercises 262
V Part Five: Symmetry & Counting
22 The Orbit-Stabilizer Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
22.1 Orbits & Stabilizers 265
22.2 Permutations Acting on Sets: Application of the Orbit-Stabilizer Theorem 269
22.3 Exercises 276
23 Burnside’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
23.1 A Motivating Example 279
23.2 Burnside’s Theorem 281
23.3 Applications of Burnside’s Theorem 282
23.4 Exercises 288VI Part Six: Light’s Out
24 Lights Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
24.1 Lights Out 293
24.2 Lights Out: A Matrix Model 294
24.3 Summary of 5×5 lights out puzzle 303
24.4 Eigenvalues and Eigenvectors 305
24.5 Other sized game boards 305
24.6 Light-Chasing Strategy 306
24.7 Exercises 307
VII Appendix
A SageMath . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
A.1 SageMath Basics 311
A.2 Variables and Statements 314
A.3 Lists 315
A.4 Sets 317
A.5 Commands/Functions 318
A.6 if, while, and for statements 319
A.7 Exercises 322
B Basic Properties of Integers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
B.1 Divisibility and the Euclidean Algorithm 323
B.2 Prime Numbers 326
B.3 Euler’s φ-function 327
B.4 Modular Arithmetic 328
B.5 Exercises 329
Bibliography . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
Articles 333
Books 333
Web Sites 334
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335I
1 Permutation Puzzles . . . . . . . . . . . . . . . . . . 11
1.1 Introduction
1.2 A Collection of Puzzles
1.3 Which brings us to the Definition of a Permutation
Puzzle
1.4 Exercises
2 A Bit of Set Theory . . . . . . . . . . . . . . . . . . . 25
2.1 Introduction
2.2 Sets and Subsets
2.3 Laws of Set Theory
2.4 Examples Using SageMath
2.5 Exercises
Part One: Foundations1. Permutation Puzzles
1.1 Introduction
Imagine a mixed up Rubik’s cubeTM (for example see Figure 1.1a), or better yet, mix up your own
cube. As you begin to try to solve the cube you should notice a few things. Solving a single face
(i.e. getting all 9 pieces of the same colour onto the same face) isn’t that difficult. There seems to
be enough room to move things around. Continuing in this manner, you then begin to solve the
next layer. You’ll soon notice that certain moves will undo your previous work. If you twist a face
that contains some pieces that you had previously put in their correct place, then these pieces now
move out of place. And this is where the puzzle becomes challenging. It seems the more pieces
that are in the correct place, the harder it is to move the remaining ones into place. This is known
as the end-game of the Rubik’s cube, and solving it requires a thorough understanding of this part
of the puzzle.
(a) A mixed up Rubik’s cube (b) An end-game for Rubik’s cube. Only
the bottom layer remains to be solved.
Figure 1.1: A mixed up Rubik’s cube and end-game.
Rubik’s cube is probably one of the most well known puzzles to date. Created by Erno¨ Rubik
in1974, it is estimated that by 2009 over 350 million have been sold. What has made it so popular
is not certain. Perhaps it looks seemingly innocent, then once a few sides have been twisted, and12 Chapter 1. Permutation Puzzles
the colours begin to mix, the path back home is not so easy to see. The more you twist it the further
you seem to be taken away from the solution. Perhaps it is that the number of ways to mix up the
cube seems endless. Or perhaps to others, it doesn’t seem endless at all. Despite the reasons for its
appeal, it has become one of the most popular puzzles in history.
It is rare to find a puzzle, or toy, that has captured the imagination of millions, is accessible to
all age levels, is challenging, yet satisfying, and is so mathematically rich. The Rubik’s cube is one
such puzzle. Others examples include the 15-puzzle, TopSpin (Oval Track), and Hungarian Rings.
What do we mean by mathematically rich? Well it turns out that one area of mathematics
that has had an impact on all areas of science, and has even popped up in art, is the field called
group theory. Often referred to as the language of symmetry, group theory has led to many new
discoveries in theoretical physics, chemistry, and mathematics itself. It underlies the techniques
in cryptography (sending private information over public channels), and coding theory (digital
communications, digital storage and retrieval of information). It is no surprise that a mathematical
theory developed to understand symmetry so adequately describes the Rubik’s cube, however, for
us, we are more interested in the opposite. We will use Rubik’s cube, and these various other
puzzles, to provide us a window into group theory. But most of all, we plan to have a lot of fun
investigating these puzzles.
Simply solving the puzzles isn’t our primary goal, though rest assured we will learn how to
solve them. Instead we want to do more, we want to model these puzzles mathematically and see
what the mathematics has to tell us about the puzzles. For example, what moves are possible to
perform, and what is impossible? In this sense we want to understand these puzzles.
1.2 A Collection of Puzzles
We begin by briefly describing the puzzles we will be investigating in this book. One thing to
observe is that all puzzles have a common theme: the pieces of the puzzle are rearranged, and the
goal is to return the pieces to their proper (original) arrangement.
1.2.1 A basic game, let’s call it Swap
Imagine a set of objects laid out in front of you and ordered in some way. This puzzle can be played
with any number of objects, but the more objects that are used the more challenging it becomes.
It doesn’t matter what the objects are, they could all be different, or some could be the same.
For starters we will just use 5 distinct objects, and for simplicity we will just take the objects to be
the numbers 1, 2, 3, 4, and 5. Figure 1.3 shows the objects laid out in front of us:
Figure 1.2: Solved state of Swap with 5 objects.
This arrangement, where the numbers appear in order from left to right, is called the home
position or solved state of the puzzle. Since, as we’ll see shortly, we will be moving the numbers
around the boxes so it will be nice to have a little reminder of whose home is whose. We do this by
putting a little number in the top left corner of each box.
Figure 1.3: Solved state of Swap on 5 objects, with boxes labeled.
The way this puzzle is played is first the numbers are randomly arranged in the boxes. Then1.2 A Collection of Puzzles 13
using only legal moves, one tries to move the numbers back to their home positions (i.e. return the
puzzle to its solved state).
What are the legal moves? This is where different version of the puzzle can be created. For
now, let us simply say there is one type of legal move called a swap, and it consists of picking any
two boxes and swapping the contents (the numbers in large font).
Example 1.1 Consider the starting position shown in Figure 1.4. Our goal is to return the
numbers to the solved state using only legal moves.
Figure 1.4: Staring position for Example 1.1.
Notice that objects 2 and 4 are in the correct positions. This is where the little numbers in
the top left corners come in handy. As for the numbers 1, 3 and 5, we need to move these to
their correct positions. Since the legal moves consist of swapping the contents of two boxes at a
time, we’ll focus first on getting 5 into it’s correct position. To do this we swap the contents of
boxes 3 and 5, since object 5 is in box 3.
Now 2, 4 and 5 are in the correct positions. Lastly we swap the contents of boxes 1 and 3 and
solve the puzzle.

This is a pretty basic puzzle, but it is good to have this as our starter puzzle. In a certain sense,
as we’ll soon see, every puzzle we will investigate will just be some variation of Swap. Either we
will increase the number of objects, or we will change the legal moves. We now consider some
possible variations of the puzzle.
Variations of Swap:
There are many ways to vary this puzzle. One way is to increase the number of objects that are
used. Here we used 5, but we could use 10, 20, 48, or any number we wish.
Another way to vary the puzzle is to choose a different collection of legal moves. Our legal
moves consisted of swapping the contents of two boxes. Instead we could have stated that legal
moves only consist of swapping the contents of box 1 and any other box. If this was the case then
the solution in Example 1.1 would be illegal, since it started by swapping the contents of boxes 3
and 5, which is a move that doesn’t involve box 1.
Exercise 1.1 Beginning with the starting position in Figure 1.4, solve the puzzle using only
legal moves of the form: the contents of any box can only be swapped with box 1. In other
words, any swap must involve box 1. 
We could also extend the notion of a legal move beyond “swaps". For instance we could restrict
ourselves to use only moves of the form: pick three boxes and cycle the contents either to the right
(clockwise) or to the left (counterclockwise).
For example, in Figure 1.5 we cycle the contents of boxes 2, 3 and 5 to the left (other boxes are14 Chapter 1. Permutation Puzzles
shaded to allow us to focus on what is changing).
Figure 1.5: Legal move variation: 3-cycle to the left.
Exercise 1.2 Beginning with the starting position in Figure 1.4, solve the puzzle using only
legal moves consisting of 3-cycles: pick three boxes and cycle the contents either to the right
(clockwise) or to the left (counterclockwise). 
We can now describe the puzzle Swap, including all possible variations.
Rules of Swap (n objects):
Let T be a set of n objects, and suppose the objects have been ordered in some way. For
example, the objects can be the numbers 1 to n and the ordering could be their natural ordering
from smallest to largest written from left to right. When the objects are in their proper order, we
say they are in their home positions and the puzzle is in the solved state. Let M be a collection of
legal moves.
(a) Puzzle Start: Randomly arrange the numbers 1 through n from left to right.
(b) Puzzle Play: Using only legal moves (i.e. moves in M), return the puzzle to the solved state.
Stated here in its most general form we’ll see that most Rubik’s cube-like puzzles are just
variations of Swap. Of course, this connection with Swap doesn’t make the Rubik’s cube any easier
to solve, at least not yet, but it will provide us a way to investigate and understand the cube and
other puzzles.
1.2.2 The 15-Puzzle
The 15-puzzle consists of a 4×4 grid with numbered tiles from 1 to 15 placed in the grid. The
space where the 16 tile would go is left empty. See Figure 1.6a.
(a) The 15-Puzzle in the
solved state
(b) A random arrange￾ment of the 15-Puzzle.
(c) Obtained from 1.6b by
moving the tile in box 7
(tile number 9) to box 6.
Figure 1.6: The 15 Puzzle
The little numbers in the top left corner of each box are not present on the manufactured puzzle,
nor on software versions of the puzzle. However, in the Swap puzzle these little numbers provided
a useful reminder for each tiles home position that we’ll use them here too.
The object of this puzzle is to randomly arrange the tiles on the grid, and then through a
sequence of legal moves which consist of sliding a tile into the empty space (which results in the
empty space moving around the board), one tries to return all tiles to their home positions.
Most currently manufactured versions of the puzzle consist of a tongue-and-groove design
which allows the pieces to slide around but doesn’t allow them to be removed. However, the original1.2 A Collection of Puzzles 15
versions of the puzzle (manufactured in the 1880’s) consisted of removable wooden pieces. This
little difference in the construction has significant impact on the solvability of the puzzle. This
puzzle started a craze that swept across the nation, and across the world, from January to April
of 1880. All the fuss was centred around the fact that after randomly putting the wooden blocks
back into the box, solving the puzzle seemed to take you to one of two places: either you solved it
completely, or you got every number in its correct position except the 14 and 15 were switched (see
Figure 1.7). In the case when the last two tiles were switched it seemed the puzzle wasn’t solvable.
Cash rewards of $1000 were offered for a solution, and one dentist even offered a set of teeth to the
person who could produce a sequence of moves swapping the 14 and 15 tiles.
Figure 1.7: The 13-15-14 Problem. Can the puzzle be solved by starting from this position?
We will investigate whether this arrangement of the puzzle is solvable, as well as come up with
a strategy for solving the puzzle in general. You can try to solve this puzzle here:
http://www.sfu.ca/∼jtmulhol/math302/applets/15-14-problem/15-14-problem.html
Software:
This puzzle is widely available as a free download for various operating system (Mac/Win/Linux/
iOS/Android). Most versions have some sort of picture as the background, instead of the numbers 1
through 15. To find out more see [Mul17].
1.2.3 The Oval Track Puzzle (or TopSpinTM)
The TopSpin puzzle was manufactured by Binary Arts (now called ThinkFun). It was invented
by Ferdinand Lammertink, and patented on 3 Oct 1989, US 4,871,173. The puzzle consists of
20 numbered round pieces in one long looped track (see Figure 1.8). You can slide all the pieces
around the loop. There is also a turntable in the loop (this is the purple circle which contains disks
1 through 4 in Figure 1.8), which can rotate any four adjacent pieces so that they will be in reverse
order. This swaps two adjacent pieces and the two pieces on either side of them. The aim of this
puzzle is to mix up the ordering of the pieces, and then place the pieces back in numerical order (as
shown in Figure 1.8).
Figure 1.8: The TopSpin Puzzle in its solved state.
This puzzle became a North American classic with over a million copies sold. Nowadays the
most common place to find this puzzle in its physical form is on ebay.16 Chapter 1. Permutation Puzzles
Variations of Oval Track:
The name Oval Track has been given to a more general version of the puzzle, one that is updated
for the digital era. By considering virtual versions of the puzzle one can disregard the mechanical
constraints imposed by physical construction, this opens up a whole new world of possibilities for
the turntable move. For example, Figure 1.9 shows two variations of the puzzle. The turntable
move in the original TopSpin puzzle is now replaced with the move indicated by the purple dashed
lines. The new turntable move for the puzzle in Figure 1.9a moves the disk in spot 4 to spot 3, the
disk in spot 3 to spot 2, the disk in spot 2 to spot 1, and takes the disk in spot 1 to spot 4. Another
version of the turntable move involving 6 disks is given in Figure 1.9b. Variations of this puzzle are
now limited only by your imagination.
(a) One variation of the turntable move (b) Another variation of the turntable
move
Figure 1.9: Variations on the Oval Track Puzzle
As usual, it will be convenient to indicate the home positions of the disks. We put little numbers
around the track indicating the number of the disk that should be in that position in the solved
puzzle. See Figure 1.10.
Figure 1.10: The TopSpin Puzzle with home positions labeled, and move notation.
Oval Track Notation:
A clockwise rotation of numbers around the track, where each number moves one space, is denoted
by R. A counterclockwise rotation is denoted by R
−1
. A rotation of the turntable is (in general, an
application of the follow the arrows move) is denoted by T. Figure 1.10 provides a visual summary
of this notation.
Software:
To find a virtual version of this puzzle see [Mul17].
1.2.4 Hungarian Rings
The Hungarian Rings puzzle consists of two intersecting rings made up of a number of coloured
balls. The rings of balls intersect at two places, so they share two of the balls. Each ring of balls1.2 A Collection of Puzzles 17
can be rotated, so the balls can be mixed. The aim is to mix up the balls, and then place the balls
back together so the colour form a continuous sequence (as show in Figure 1.11).
There are 38 balls of four colours: two colours have 9 balls (yellow and blue) and two colours
have 10 balls (black, red). There are 4 balls between the intersections of the rings.
In the Rubik’s Cubic Compendium [page 212], there is a picture of the Hungarian Rings and
the following text by David Singmaster:
Closer to Rubik’s Magic cube are ’interlocking cycle’ puzzles where several rings of
pieces cross each other. Endre Pap, a Hungarian engineer, invented a flat version with
two rings which was marketed as the Hungarian Rings. The idea was not entirely new,
as there is an 1893 patent for it.
The patent that Singmaster is referring to is US 507,215 by William Churchill, filed on May 28
1891, granted on October 24, 1893. For a copy of the patent see Jaap’s Puzzle Page [Sch11].
Figure 1.11: Hungarian Rings in its solved state. (manufactured 1982)
To study this puzzle we will temporarily ignore colours, and instead assign a number to each
ball. See Figure 1.12b. We’ll also indicate the home position of each ball by putting little numbers
along the outside of the track. In effect we will study the puzzle of rearranging the numbers 1
through 38 on the two rings. In some sense this is a more difficult puzzle than the colour version of
the puzzle simply because in the colour version there are really only 4 distinct balls, whereas in
the number version there are 38 distinct balls and each one has only one home position. However,
as we’ll see, the added complexity inherited by using numbers as labels, rather than colours, is
manageable, and the benefits gained in understanding the puzzle are numerous.
(a) Hungarian Rings with home positions labeled
by numbers.
(b) Hungarian Rings with numbers instead of
colours.
Figure 1.12: Hungarian Rings with disks labeled by numbers
Hungarian Rings Notation:
A clockwise rotation of the balls in the right-hand ring, where each ball moves one space around
the track, is denoted by R, a counterclockwise rotation is denoted by R
−1
. A clockwise rotation of18 Chapter 1. Permutation Puzzles
the balls in the left-hand ring, where each ball moves one space around the track, is denoted by
L, a counterclockwise rotation is denoted by L
−1
. Figure 1.12 provides a visual summary of this
notation.
Software:
To find a virtual version of this puzzle see [Mul17].
1.2.5 Rubik’s Cube
Rubik’s cube is probably the most well known mechanical puzzle. It was invented by Erno Rubik ˝
in Hungary around 1974, and the patent was filed 30 January 1975, HU 170062. Eventually it was
produced and marketed by Ideal Toys in the early 1980s. It is quite possibly the most popular toy
to have ever been manufactured.
Rubik’s cube is a cube which is built from smaller cubes where there are 3 cubes along an edge,
i.e. a 3×3×3 cube. The 9 pieces on each face can rotate, which rearranges the small cubes at that
face. The six sides of the puzzle are coloured, so every corner piece contains three colours, every
edge piece contains two colours, and every face centre only one. See Figure 1.13.
(a) View of front (red), right (yellow)
and up (blue) faces.
(b) View of back (orange), left (white)
and down (green) faces.
Figure 1.13: The 3×3×3 Rubik’s cube with classic colouring scheme: blue opposite green, red opposite
orange, white opposite yellow.
Turning a face does not change the face centres so these can be considered already solved.
(This is because twisting the face centres is not a visible change of pattern. However, if there was
an image rather than a solid colour on the face then this would not be the case anymore.) The other
pieces have to be placed correctly around the centres. This is a particularly important observation
because it implies the following:
The colour of the centre piece of any face defines the only colour to which that face of
the cube can be restored.
Cube Terminology & Notation:
When playing with the cube the pieces begin to move all around. Since there are so many moving
parts of the cube, it will be convenient to have some terminology to describe each piece, and its
placement in the cube. It will also be convenient to have some notation for basic movements to aid
in communication with one another. Of course, a good choice of notation can bring mathematics
into the picture as well, as we will soon see. The notation we use was first introduced by David
Singmaster in the early 1980’s, and is the most popular notation in use today.
Fix an orientation of the cube in space. We may label the 6 sides as f, b, r, l, u, d for front,
back, right, left, up, and down.
The cube is made up of 26 smaller cubes called cubies. These are the ones that are visible,
there actually isn’t a 27th cube in the middle, but instead a mechanism that allows things to twist
and turn. The cube has 6 sides, or faces, each of which has 3 · 3 = 9 facets. Think of a facet as the1.2 A Collection of Puzzles 19
Figure 1.14: Labeling sides of Rubik’s cube by f, b, r, l, u, d.
position a little coloured sticker can occupy. There are 54 facets in total for the 3×3×3 Rubik’s
cube. The cubes split up into three types: centre cubies (having only one sticker), edge cubies
(having two stickers), corner cubies (having three stickers). See Figure 1.15.
(a) 6 centre cubies
and mechanism
(b) 12 edge cubies (c) 8 corner cubies
Figure 1.15: A disassembled Rubik’s cube showing the cubies.
Each face of the cube is made up of a slice of 9 cubies that share a facet with the face. The face,
along with all of the 9 cubies in the slice, can be rotated by 90 degrees clockwise (viewing the face
straight-on). We denote this move by an uppercase letter of the name of the face. For example, F
denote the move which rotates the front face by 90 degrees clockwise. See Table 1.1 for a complete
description of cube moves and notation.
We call the space that a cubie can occupy a cubicle. As the pieces move around, the cubies
move from cubicle to cubicle, and the coloured stickers move from facet to facet. In order to
solve the puzzle each cubie must get restored to its original cubicle, we call this its home location,
and each coloured sticker must get restored to its original facet, we call this the cubies home
orientation. Once all cubies are in their home positions and home orientations the puzzle will be
solved.
Table 1.2 summarizes the terminology introduced here.
Since the center stickers are fixed by the basic moves there are only 54−6 = 48 stickers that
move. If we label the stickers as in Figure 1.16 then we see that each basic move corresponds
to a rearrangement, or permutation of the numbers 1 through 48. In this way we see that the
Rubik’s cube is much like the puzzle Swap, in the sense that we have a set of 48 numbers and a set
of legal moves M (the 6 basic cube moves) which allow us to rearrange these numbers in some way.20 Chapter 1. Permutation Puzzles
notation pictorial description of basic move
(Singmaster) (clockwise/counterclockwise refers to viewing the face straight-on)
F , F
−1 F = quarter turn of front face in the clockwise direction.
F
−1 = quarter turn of front face in the counterclockwise direction.
B , B
−1 B = quarter turn of back face in the clockwise direction.
B
−1 = quarter turn of back face in the counterclockwise direction.
R , R
−1 R = quarter turn of right face in the clockwise direction.
R
−1 = quarter turn of right face in the counterclockwise direction.
L , L
−1 L = quarter turn of left face in the clockwise direction.
L
−1 = quarter turn of left face in the counterclockwise direction.
U , U
−1 U = quarter turn of up face in the clockwise direction.
U
−1 = quarter turn of up face in the counterclockwise direction.
D , D
−1 D = quarter turn of down face in the clockwise direction.
D
−1= quarter turn of down face in the counterclockwise direction.
F
2
,B
2
,R
2
,L
2
,U
2
,D
2 denote the corresponding half-turn of the face.
Since a clockwise half-turn is equivalent to a counterclockwise half-turn then
F
2 = F
−2
, B
2 = B
−2
, R
2 = R
−2
, L
2 = L
−2
, U2 = U
−2
, D
2 = D
−2
Table 1.1: Summary of cube move notation
Figure 1.16: Sticker labeling on the 3×3×3 Rubik’s cube.
Variations of Rubik’s Cube:
Rubik’s cube is the puzzle that started the whole twisty puzzle craze. Since its invention hundreds
of different types of twisty puzzle of all shapes and sizes have been designed. Puzzles of this type1.2 A Collection of Puzzles 21
Terminology Definition or Abbreviation
cubies The small cube pieces which make up the whole cube.
sticker A colored face of a cubie.
cubicles The spaces occupied by the cubies.
facets The faces of a cubicle, or space occupied by a sticker.
types of cubies: A corner cubie has three stickers.
corner, edge, and centre: An edge cubie has two stickers.
A centre cubie has one sticker
home location - of a cubie The cubicle to which a cubie should be restored.
home position - of a cubie The orientation in the home location to which a cubie should
be restored.
positional names Up (u) Down (d) Right (r) Left (l)
for cube faces Front (f) Back (b)
Notation for cubicles Lower case initials. For example, uf denotes the Up-Front
- shown in italics edge cubicle, dbl denotes the Down-Back-Left cubicle.
Notation for cubies Upper case initials. For example, URF denotes the cubie
- shown in italics whose home position is in the Up-Right-Front corner (i.e.
cubicle ufr).
Table 1.2: Summary of terminology and notation
are often called Rubik’s cube-like puzzles, or twisty puzzles, or permutation puzzles. Figure 1.17
gives some examples.
(a) Professor’s Cube (b) Megaminx (c) Skewb
(d) Helicopter Cube (e) Pyraminx Crystal (f) Octahedron
Figure 1.17: Twisty puzzles.22 Chapter 1. Permutation Puzzles
1.3 Which brings us to the Definition of a Permutation Puzzle
The 15-Puzzle, Oval Track puzzle, Hungarian Rings and Rubik’s cube are all variations of the same
theme. Each one consisted of pieces that were rearranged, or permuted, in some way, and the goal
is to try to restore the pieces to their original positions. The legal moves that one is allowed to use
is forced by the design or construction of the puzzle. Puzzles of this type known as permutation
puzzles. Since these types of puzzles are the main focus of this course, we shall give a precise
definition for this term.
A one person game is a sequence of moves following certain rules which satisfy:
• there are finitely many moves at each stage,
• there is a finite sequence of moves which yields a solution,
• there are no “chance” or “random” moves (such as rolling a dice to determine what to do
next),
• there is complete information about each move,
• each move depends only on the present position, not on the existence or non-existence of
a certain previous move (such as chess, where castling is made illegal if the king has been
moved previously).
A permutation puzzle is a one person game (solitaire) with a finite set T = {1,2,...,n} of puzzle
pieces satisfying the following four properties:
(a) For some n > 1 depending only on the puzzle’s construction, each move of the puzzle
corresponds to a unique permutation of the numbers in T,
(b) If the permutation of T in (a) corresponds to more than one puzzle move then the two
positions reached by those two respective moves must be indistinguishable,
(c) Each move, say M, must be "invertible" in the sense that there must exist another move, say
M−1
, which restores the puzzle to the position it was at before M was performed, In this
sense, we must be able to “undo" moves.
(d) If M1 is a move corresponding to a permutation τ1 of T and if M2 is a move corresponding to
a permutation τ2 of T then M1 · M2, which denotes the move M1 followed by the move M2
(notice the order the moves are applied is from left to right), is either
• not a legal move, or
• corresponds to the permutation τ1τ2.
Notation: We will always write successive puzzle moves from left to right, as we did in step (d)
above.
1.4 Exercises
1. Get your own Rubik’s cube. Whether you buy or borrow, make sure you have access to a
Rubik’s cube while working through this book. If you don’t know where to buy one, then
check [Mul17] for some suggestions.
2. Get familiar with Rubik’s cube, and all the other puzzles we have just discussed. The website
accompanying this book has links to virtual versions of the puzzles: [Mul17]. Download
your own copy of the ones that are available, and bookmark the ones that are “online only"
versions. Play with these puzzles. Don’t worry if you can’t solve them, this will come. But
for now just get familiar with the puzzles, and the movements of the pieces.
3. Solve the Swap puzzle given in Figure 1.18, using the original set of legal move: swap the
contents of any two boxes.1.4 Exercises 23
Figure 1.18: Swap position for Exercises 3, 4, 5.
4. Solve the Swap puzzle in Figure 1.18, using only legal moves of the form: the contents of
any box can only be swapped with box 1.
5. Can you solve the Swap puzzle given in Figure 1.18, using only legal moves consisting of
3-cycles: pick three boxes and cycle the contents either to the right (clockwise) or to the left
(counterclockwise)?
6. Consider the starting arrangement of tiles for the Swap puzzle in Figure 1.19.
(a) Solve the puzzle using only legal moves of the form: the contents of any box can only
be swapped with box 1.
(b) Solve the puzzle using only legal moves consisting of 3-cycles: pick three boxes and
cycle the contents either to the right (clockwise) or to the left (counterclockwise).
(c) Solve the puzzle using only legal moves consisting of pairs of swaps: pick four boxes,
swap the contents of two boxes, and swap the contents of the other two boxes.
Figure 1.19: Swap position for Exercise 6.
7. Can you solve the Swap puzzle given in Figure 1.18, using only legal moves consisting of
pairs of swaps: pick four boxes, swap the contents of two boxes, and swap the contents of the
other two boxes?
8. Verify that each of the puzzles we’ve encountered: Swap, 15-Puzzle, Oval Track, Hungarian
Rings and Rubik’s cube, are permutation puzzles. That is, show that the definition of the
term “permutation puzzle" is satisfied by these puzzles.2. A Bit of Set Theory
2.1 Introduction
Rubik’s Cube is made up a number of different pieces: corner cubies, edge cubies, and center
cubies (see Chapter 1 for definitions of these terms). Each collection of these pieces forms a set.
In order to understand how these pieces move around we need to understand how the cube moves
F,B,R,L,U,D act on these sets. In this chapter we recall some basic terminology and notation from
set theory which will form the foundation for our mathematical investigations into Rubik’s Cube
and other puzzles.
2.2 Sets and Subsets
A set is a well-defined collection of objects. The objects of the set are called elements, and are
said to be members of, or belonging to, the set.
By well-defined we mean that for any element we wish to consider, we are able to determine,
under some scrutiny, whether or not it is a member of the set.
Typically we will use capital letters, such as A, B, C, ... to represent sets and lower case letters
to represent elements. For a set A we write x ∈ A if x is an element of A, and y 6∈ A if y is not an
element in A.
Sets are usually defined in one of two ways:
(a) Listing all of its elements in braces: A = {a,b, c,...}. For example A = {1,2,3,4,5} is the
set of integers from 1 to 5. Therefore, 3 ∈ A, but 6 6∈ A.
(b) Using set-builder notation: A = {x | x has property P}. For example we could define the
previous set A as {x | x is an integer and 1 ≤ x ≤ 5}. The vertical bar “ | " is read “such that".
The symbols {x | ...} are read “the set of all x such that . . . ". Some authors use a colon “:"
instead of “ | ", so we could also write A = {x : x has property P}.
Some basic sets of numbers we should be familiar with are:
• Z = the set of integers = {...,−2,−1,0,1,2,3,...},26 Chapter 2. A Bit of Set Theory
• N = the set of nonnegative integers or natural numbers = {0,1,2,3,...} = {x ∈ Z | x ≥ 0},
• Z
+ = the set of positive integers = {1,2,3,...} = {x ∈ Z | x > 0},
• Q = the set of rational numbers =
n a
b



a,b ∈ Z,b 6= 0
o
,
• Q+ = the set of positive rational numbers = {x ∈ Q | x > 0},
• R is the set of real numbers.
• [n] = {1,2,...,n} = the set of integers from 1 to n, where n ∈ Z
+.
Let A and B be sets. If all the elements of A also belong to B then we say A is a subset of B and
we write A ⊂ B. For example, Z
+ ⊂ Z since every positive integer is itself an integer, but Q 6⊂ Z,
since there are rational numbers that are not integers, for example 1
2
.
Two sets A and B are said to be equal, and we write A = B, if A ⊂ B and B ⊂ A.
If a set has a finite number of elements then we say it is a finite set. Otherwise it is an infinite
set. For any finite set A, |A| denotes the number of elements in A and is called the cardinality, or
size, of A. For example, |[n]| = n, whereas Z in an infinite set.
The empty set, or null set, is the set that contains no elements. The empty set is denoted by /0,
or {}, and has that property that |/0| = 0.
Let A and B be two sets. The set of all elements belonging to either A or B is denoted A∪B and
is called the union of A and B. The set of all elements belonging to both A and B is denoted A∩B
and is called the intersection of A and B. The set of all elements not belonging to A is denoted A
c
or sometimes by A, and is called the complement of A.
1 The set of all elements in A that are not
in B is denoted A−B and is called the difference of A with B. We sometimes refer to this as A
take away B.
The Cartesian product of A and B is the set of all ordered pairs (x, y) where x ∈ A and y ∈ B
and is denoted by A×B.
The following summarizes the different operations we have on sets:
A∪B = {x | x ∈ A or x ∈ B},
A∩B = {x | x ∈ A and x ∈ B},
A
c = A = {x | x 6∈ A},
A−B = {x | x ∈ A and x 6∈ B} = A∩B
c
A×B = {(x, y) | x ∈ A and y ∈ B}.
We call two sets disjoint if they have no element in common: A and B are disjoint if A∩B = /0.
2.3 Laws of Set Theory
Some of the major laws that govern set theory are the following.
For any sets A, B, and C taken from a universe U
1
In defining the complement we need to specify the elements we are considering. That is, we need to consider A as a
subset of some larger set. To see why, just think about what could be meant by Z
c
? Does this mean all elements in Q not
in Z, or all elements in R not in Z, or something else entirely. The larger set to which we consider A as a subset will be
called the universe or universe of discourse denoted by U . It will be clear, given the context, as to what universe we are
working in. What this means though is that we should really write A
c = {x | x ∈ U and x 6∈ A}.2.3 Laws of Set Theory 27
1) (A
c
)
c = A Law of Double Negation
2) (A∪B)
c = A
c ∩B
c
DeMorgan’s Laws (A∩B)
c = A
c ∪B
c
3) A∪B = B∪A
Commutative Laws A∩B = B∩A
4) A∪(B∪C) = (A∪B)∪C
Associative Laws A∩(B∩C) = (A∩B)∩C
5) A∪(B∩C) = (A∪B)∩(A∪C)
Distributive Laws A∩(B∪C) = (A∩B)∪(A∩C)
6) A∪A = A
Idempotent Laws A∩A = A
7) A∪ /0 = A
Identity Laws A∩ U = A
8) A∪A
c = U
Inverse Laws A∩A
c = /0
9) A∪ U = A
Domination Laws A∩ /0 = /0
10) A∪(A∩B) = A
Absorbtion Laws A∩(A∪B) = A
These set theoretic laws are similar to the arithmetic properties of the real numbers, where “∪"
plays the role of “+", and “∩" plays the role of “×". However, there are several differences.
We will prove the first part of the Distributive Law, and leave the proof of all others to the
reader. See Exercise 8 and 9 for the second part of the Distributive Law and DeMorgan’s Law. Also
see Exercise 10 where the reader is asked to provide proofs for the remaining laws of set theory.
Proof: Let x ∈ U . Then
x ∈ A∪(B∩C) ⇔ x ∈ A or x ∈ B∩C
⇔ x ∈ A or x is in both B and C
⇔ x ∈ A∪B and x ∈ A∪C
⇔ x ∈ (A∪B)∩(A∪C)
This completes the proof. 
We also state a result about the cardinality of a disjoint union of sets.
Theorem 2.3.1 Let A1,A2,...,An be disjoint finite sets. Then
|A1 ∪··· ∪An| = |A1|+···+|An|.
Proof: In the case of two sets (i.e. n = 2), let A and B be two disjoint finite sets and write
A = {a1,a2,...,ak} and B = {b1,b2,...,b`}. Since A and B are disjoint then
A∪B = {a1,a2,...,ak,b1,b2,...,b`}
and so |A∪B| = k +` = |A|+|B|. The general case follows by mathematical induction. 28 Chapter 2. A Bit of Set Theory
2.4 Examples Using SageMath
Example 2.1 In this example we show how to define a set, and compute cardinalities, unions,
intersections, differences and cartesian products using SageMath.
In [1]: S1= Set ([1 ,2 ,3 ,4 ,5]);
S2= Set ([3 ,4 ,5 ,6 ,7]);
print (S1 ,S2)
({1 , 2 , 3 , 4 , 5} , {3 , 4 , 5 , 6 , 7})
In [2]: S1. cardinality ()
Out[2]: 5
In [3]: S1. union (S2)
Out[3]: {1 , 2 , 3 , 4 , 5 , 6 , 7}
In [4]: S1. intersection (S2)
Out[4]: {3 , 4 , 5}
In [5]: S1. difference (S2)
Out[5]: {1 ,2}
In [6]: S2. difference (S1)
Out[6]: {6 ,7}
In [7]: cartesian_product ([S1 , S2 ])
Out[7]: The Cartesian product of ({1 , 2 , 3 , 4 , 5} , {3 , 4, 5 , 6 , 7})
In [8]: cartesian_product ([S1 , S2 ]). cardinality ()
Out[8]: 25
In [9]: 2 in S1
Out[9]: True
In [10]: 1 in S2
Out[10]: False

Example 2.2 SageMath has a number of commonly used sets already built in: Z, N, Q, R.
The commands are ZZ, NN, QQ, and RR, respectively.2.4 Examples Using SageMath 29
In [11]: ZZ
Out[11]: Integer Ring
In [12]: 1 in ZZ
Out[12]: True
In [13]: 1/2 in ZZ
Out[13]: False
In [14]: 0 in NN
Out[14]: True
In [15]: -1 in NN
Out[15]: False

Example 2.3 We can build a set by using properties in SageMath. Here we use Python’s
modulo operator %: a%b returns the remainder of a when divided by b.
In [16]: Set (x for x in range (0 ,10) if x %2==0)
Out[16]: {0 , 2 , 4 , 6 , 8}
In [17]: Set (x for x in range (0 ,10) if x \%2==1)
Out[17]: {1 , 3 , 9 , 5 , 7}

Example 2.4 The is_prime() function returns True if the input is a prime integer, and False if
not. Such functions are called boolean valued functions. We can use boolean valued function
to create subsets as this example shows.
In [18]: is_prime (29)
Out[18]: True
In [19]: is_prime (4)
Out[19]: False
In [20]: Set (x for x in range (0 ,10) if is_prime (x))
Out[20]: {2 , 3 , 5 , 7}30 Chapter 2. A Bit of Set Theory
In [21]: Set (x for x in range (0 ,1000) if is_prime (x)). cardinality ()
Out[21]: 168
The last computation shows there are 168 prime numbers less than 1000.
We can also use the filter() command in Python. You can get more information on
filter() by typing filter? at the SageMath prompt.
In [22]: S=Set (1..20) # constructs a set of all integers from 1 to 20
filter ( is_prime ,S)
Out[22]: [2 , 3 , 5 , 7 , 11 , 13 , 17 , 19]

2.5 Exercises
1. Which of the following sets are equal?
(a) {1,2,3} (b) {2,3,1,3} (c) {3,2,1,1,2} (d) {1,3,3,2,1,3}
2. Let A = {1,{1},{2}}. Which of the following statements are true?
(a) 1 ∈ A
(b) {1} ∈ A
(c) {1} ⊂ A
(d) {{1}} ⊂ A
(e) {2} ∈ A
(f) {2} ⊂ A
(g) {{2}} ⊂ A
(h) {1,2} ⊂ A
3. Determine all the elements of the following sets.
(a) {1+ (−1)
n
| n ∈ N}
(b) {n ∈ N | n ≤ 20 and n is divisible by 3}
(c) {n ∈ N | n ≤ 20, n is prime, and 2n+1 is divisible by 3}
4. Determine the cardinality of the following sets.
(a) The set of all cubies of the Rubik’s Cube which have a blue facet.
(b) The set of all corner cubies of the Rubik’s Cube which have a blue facet.
5. Consider the set A = {1,2,3,4,5}.
(a) How many subsets of cardinality 1 does A have?
(b) How many subsets of cardinality 2 does A have?
(c) How many subsets does A have in total?
(Hint: don’t forget the empty subset, and the set A itself, when counting subsets.)
6. For U = [10], let A = {1,2,3,4,5}, B = {1,2,4,8} and C = {1,2,3,5,7}. Determine each
of the following.
(a) (A∪B)∩C
(b) (A∪B)−C
(c) A
c ∩B
c
(d) |A∪B|
7. Verify your answers to question 6 by using SageMath.
8. Prove the second Distributive Law stated in Section 2.3.
9. Prove DeMorgan’s laws stated in Section 2.3.
10. Prove all the remaining laws of set theory that are stated in Section 2.3.II 3 Permutations . . . . . . . . . . . . . . . . . . . . . . . . 33
3.1 Permutation: Preliminary Definition
3.2 Permutation: Mathematical Definition
3.3 Composing Permutations
3.4 Associativity of Permutation Composition
3.5 Inverses of Permutations
3.6 The Symmetric Group Sn
3.7 Rules for Exponents
3.8 Order of a Permutation
3.9 Exercises
4 Permutations: Cycle Notation . . . . . . . . 51
4.1 Permutations: Cycle Notation
4.2 Products of Permutations: Revisited
4.3 Properties of Cycle Form
4.4 Order of a Permutation: Revisited
4.5 Inverse of a Permutation: Revisited
4.6 Summary of Permutations
4.7 Working with Permutations in SageMath
4.8 Exercises
5 From Puzzles To Permutations . . . . . . . . . 63
5.1 Introduction
5.2 Swap
5.3 15-Puzzle
5.4 Oval Track Puzzle
5.5 Hungarian Rings
5.6 Rubik’s Cube
5.7 Exercises
6 Permutations: Products of 2-Cycles . . . 79
6.1 Introduction
6.2 Product of 2-Cycles
6.3 Solvability of Swap
6.4 Exercises
7 Permutations: The Parity Theorem . . . . . 83
7.1 Introduction
7.2 Variation of Swap
7.3 Proof of the Parity Theorem
7.4 Exercises
8 Permutations: An and 3-Cycles . . . . . . . 95
8.1 Swap Variation: A Challenge
8.2 The Alternating Group An
8.3 Products of 3-cycles
8.4 Variations of Swap: Revisited
8.5 Exercises
9 The 15-Puzzle . . . . . . . . . . . . . . . . . . . . . . . 103
9.1 Solvability Criteria
9.2 Proof of Solvability Criteria
9.3 Strategy for Solution
9.4 Exercises
Part Two: Permutations3. Permutations
The puzzles we have encountered so far all have a common theme: the pieces can be mixed up, and
the goal is to restore the pieces back to some proper order. In this lecture we will introduce some
terminology and notation for talking about rearrangements of objects. In particular, we give the
precise definition of a permutation as a function and introduce permutation multiplication, inverses,
and order.
3.1 Permutation: Preliminary Definition
In mathematics, the notion of permutation is used with several slightly different meanings, all
related to the act of permuting (rearranging in an ordered fashion) objects or values. Informally, a
permutation of a set of objects is an arrangement of those objects into a particular order.
Example 3.1 There are six permutations of the objects in the set {♣,♦,♥}, namely [♣,♦,♥],
[♣,♥,♦], [♦,♣,♥], [♦,♥,♣], [♥,♣,♦], and [♥,♦,♣]. 
Notation: Curly braces {,} denote sets, i.e. the order that elements are listed doesn’t matter.
Square braces [,] denote lists, i.e. the order that elements appear does matter. So as sets {1,2,3} =
{2,1,3} but as lists [1,2,3] 6= [2,1,3].
In [1]: Set ([1 ,2 ,3])== Set ([2 ,1 ,3])
Out[1]: True
In [2]: [1 ,2 ,3]==[2 ,1 ,3]
Out[2]: False34 Chapter 3. Permutations
Example 3.2 There are 5040 ways to arrange the seven books in the Harry Potter series
on your bookshelf. If we let 1 denote Volume 1: Philosopher’s Stone, 2 denote Volume 2:
Chamber of Secrets, etc. then, for example, two possible permutations are [1,3,5,7,2,4,6] and
[5,2,1,3,7,4,6]. Of course, out of all these possible permutations the most likely way to place
them on the bookshelf is in numerical order: [1,2,3,4,5,6,7].
To determine the number of permutations we imagine 7 empty slots on the bookshelf which
we are about to fill. There are 7 ways to pick a book and place it in slot 1. For each of these
choices, there are now 6 possible ways to fill slot 2, then 5 possible ways to fill slot 3, etc. So
the total number of ways to fill the 7 slots is: 7 · 6 · 5 · 4 · 3 · 2 · 1 = 7! = 5040.
In [3]: factorial (7)
Out[3]: 5040

Example 3.3 In the game of Swap on 5 objects the empty puzzle board is shown in Figure
3.1a.
(a) The empty Swap board (b) A random arrangement of
Swap.
Figure 3.1: Game of Swap
The puzzle board is filled by laying out the tiles numbered 1 through 5 in the boxes. For
example, one such puzzle position is shown in Figure 3.1b. Each puzzle position corresponds
to a permutation of the set [5] = {1,2,3,4,5}. There are 5! = 120 permutations of [5], and so
there are 120 different possible positions in the game of Swap. Only one of which is the solved
state. 
Example 3.4 The fifteen puzzle with no tiles in the boxes is shown in Figure 3.2a.
(a) The empty 15-Puzzle
board
(b) A random arrange￾ment of the 15-Puzzle.
Figure 3.2: The 15 Puzzle
The puzzle is started by placing the 15 tiles anywhere on the board. For example, one
such puzzle position is shown in Figure 3.2b. This corresponds to a permutation of the set
[16] = {1,2,...,16}, where we imagine the blank space as being the 16th tile. There are3.2 Permutation: Mathematical Definition 35
16! = 20,922,789,888,000 permutations of [16], so there are 16! different ways to lay the tiles
on the board. As for which configurations are actually solvable, this is one of the key questions
we will investigate later. 
We can use SageMath to generate permutations of a list, for example [1,2,3].
In [4]: terms =[1 ,2 ,3];
p = Permutations ( terms )
print (p)
Permutations of the set [1 , 2 , 3]
In [5]: p. list ();
Out[5]: [[1 , 2 , 3] , [1 , 3 , 2] , [2 , 1 , 3] , [2 , 3 , 1] , [3 , 1 , 2] , [3 , 2 , 1]]
Sometimes when listing permutations of a set we will omit the square braces. For example the
6 permutations of [1,2,3] can be listed as: 123,132,213,231,312,321.
We can also list permutations of a multi-set, that is a set with more than one element repeated.
Though, to define a multi-set we would actually need to use a list.
Example 3.5 Two permutations of the multi-set [a,a,b,b,b] are [b,a,b,a,b] and [b,b,a,a,b].
There are 5!
2!· 3!
= 10 permutations in total. (Since there are 5! ways to arrange 5 objects, but 2
of the objects are identical, and so are the other 3.) 
In [6]: var (’a,b’);
terms =[a,a,b,b,b];
p = Permutations ( terms )
print p
Out[6]: Permutations of the multi -set [a, a, b, b, b]
In [7]: p. list ();
Out[7]: [[a, a, b, b, b] , [a, b, a, b, b] , [a, b, b, a, b] , [a, b, b, b, a] ,
[b, a, a, b, b] , [b, a, b, a, b] , [b, a, b, b, a] , [b, b, a, a, b] ,
[b, b, a, b, a] , [b, b, b, a, a]]
In [8]: p. cardinality ()
Out[8]: 10
In [9]: factorial (5)/( factorial (2)* factorial (3))
Out[9]: 10
3.2 Permutation: Mathematical Definition
It will be convenient for us to have a slightly more mathematical definition of a permutation. Before
we give this formal definition however it is best to start by recalling the notion of a function, and
the properties: one-to-one, and onto.36 Chapter 3. Permutations
3.2.1 Functions
Definition 3.2.1 A function, or mapping, f from a (nonempty) set A to a (nonempty) set B is a
rule that associates each element a ∈ A to exactly one element b ∈ B.
Notation & Terminology: We write f : A → B to denote a function named f from set A to set
B. A is called the domain of f and B the codomain . If f sends a to b then we write f(a) = b, or
f : a 7→ b. We also say b is the image of a under f . The subset of B consisting of all images f(a),
for a ∈ A, is called the range of f , and is written:
f(A) = { f(a) | a ∈ A} ⊂ B.
Figure 3.3 gives a graphical representation of these concepts.
Figure 3.3: A way to visualize a function f , domain A, codomain B and range (shaded region).
Definition 3.2.2 A function f : A → B is called one-to-one, or injective, if no two elements of
A have the same image in B.
A function f : A → B is called onto, or surjective, if f(A) = B. That is, if each element of B
is the image of at least one element of A.
A function that is both injective and surjective is called bijective .
3.2.2 Permutations
We are now ready to give the formal definition of a permutation.
Definition 3.2.3 A permutation of a set A is a function α : A → A that is bijective (i.e. both
one-to-one and onto).
Our goal is to understand how the pieces of a puzzle move around, so we typically represent
each piece by a number, that is by an element of [n] = {1,2,3,...,n}. A rearrangement of the
pieces then corresponds to a bijection from [n] → [n], in other words a permutation as defined
above.
Unlike in calculus, where most functions are defined on infinite sets and given by formulas,
permutations of finite sets are usually given by simply listing where each value goes.
For example, we can define a permutation α of the set {1,2,3} by stating:
α(1) = 2, α(2) = 1, α(3) = 3.
In SageMath we can use the Permutation() command to construct a permutation. Here we
define the permutation by the list of images [α(1),α(2),...].3.2 Permutation: Mathematical Definition 37
In [10]: a= Permutation ([2 ,1 ,3]); a # permutation which maps 1 - >2 , 2 - >1 , 3 - >3
Out[10]: [2 ,1 ,3]
In [11]: a(1)
Out[11]: 2
A slightly more convenient way to represent this permutation is by:
α ↔

1 2 3
2 1 3 
where the top row are the element of [3] = {1,2,3} and the bottom row are the corresponding
images under α. This is known as array notation for a permutation.
Here is an example of how to use matrices in SageMath to display a permutation in array form.
We can use the matrix() command, where the syntax is
matrix( [ <list for row 1> , <list for row 2> ] ).
In [12]: a= Permutation ([2 ,1 ,3])
matrix ([[1 ,2 ,3] ,[a(i) for i in [1 ,2 ,3]]]);
Out[12]: [1 2 3]
[2 1 3]
Similar to array notation, but more visual, is an arrow diagram. The arrows point from x to
α(x).
α
s s s
s s s
1 2 3
2 1 3
❅
❅
❅
❅
❅
❅❘
￾
￾
￾
￾
￾
￾✠ ❄
Array Notation:
In general, we may define a permutation α : [n] → [n] by a 2×n array:
α ↔

1 2 ... n
α(1) α(2) ... α(n)

.
Since α is bijective the second row would just be a rearrangement of the numbers in the top row.
Example 3.6 Two special permutations:
(a) The identity permutation, denoted by ε, or I, is the permutation that does nothing:
ε ↔

1 2 ... n
1 2 ... n

.
It may not seem obvious why we would want to consider the “do nothing" permutation,
but we will consider this permutation quite a bit. As an analogy, think about 0, this is a
symbol which represents “nothing" but yet appears almost everywhere in mathematics.
(b) An n-cycle is a permutation which cyclically permutes the values. For example,

1 2 3 ... n−1 n
2 3 4 ... n 138 Chapter 3. Permutations
We could also visualize this with an arrow diagram:
Every number moves to the right and the last one, n, cycles around back to 1.

3.3 Composing Permutations
We now look at how to combine two permutations in order to produce a third one. The method we
use is called composition, or we’ll sometimes refer to it as multiplication. This will be precisely the
tool we will need in order to understand how two puzzle moves combine together to give a third.
Let α and β be two permutations of [n]. Recall that this means α,β : [n] → [n] are both
injective and surjective. We wish to define a new function α ◦ β : [n] → [n], called the permutation
composition. In order to define a function on [n] we just need to specify how it maps the elements.
For k ∈ [n] we’ll define (α ◦ β)(k) to be the result of first applying α, then applying β to the result.
In other words,
(α ◦ β)(k) = β(α(k)), for k ∈ [n].
(If you think this definition is backwards have a look at the “warning" below.) This new function
is again a permutation. To see why we just need to observe that it is a bijection.
Injective: Suppose (α ◦β)(k) = (α ◦β)(`) for some k, ` ∈ [n], then β(α(k)) = β(α(`)) implies
α(k) = α(`), since β is one-to-one. It follows that k = ` since α is one-to-one. Therefore, α ◦ β is
one-to-one.
Surjective: Consider any m ∈ [n]. Let ` ∈ [n] such that β(`) = m, and let k ∈ [n] such that
α(k) = `. Both ` and k exist since α and β are onto. It follows that (α ◦ β)(k) = β(α(k)) = m.
Therefore, α ◦ β is onto. This verifies that α ◦ β is a permutation.
This way of combining permutations will essentially underline everything we do in this course
so we should make this a formal definition. We will also drop the symbol ◦ to simplify writing.
Definition 3.3.1 Let α,β : [n] → [n] be two permutations. The permutation composition, or
product, of α and β is denoted by αβ : [n] → [n] is the permutation defined by:
αβ : [n] → [n] → [n]
k 7−→ α(k) 7−→ β(α(k))
The identity permutation ε, defined in Example 3.6a has the property that εα = αε = α for
any permutation α.
Warning: Notice that the composition is opposite to the way functions were combined in
calculus. In calculus, and in most branches of mathematics, there is a long standing tradition that
variables are to appear to the right of the function: f(x). The composition, (f ◦ g)(x) is then read
from right-to-left: f(g(x)). So why are we defining the composition of permutations as left-to-right,
and going against long standing mathematical tradition? Imagine you were asked to apply the move
sequence RF−1
to a Rubik’s cube. What move would you do first, R or F
−1
? Popular convention is
to read from left-to-right and apply R first, then F
−1
. For example, this is how you are reading the3.3 Composing Permutations 39
words on the page right now, from left-to-right. This is precisely the convention we are using to
combine permutations, we combine them from left-to-right.
Example 3.7 (a) Let α =

1 2 3 4 5
5 3 1 4 2 
and β =

1 2 3 4 5
5 3 2 1 4 
. Then
αβ =

1 2 3 4 5
5 3 1 4 2  1 2 3 4 5
5 3 2 1 4 
=

1 2 3 4 5
4 2 5 1 3 
.
❄ ❄
❄
On the right we have 4 under 1, since αβ(1) = β(α(1)) = β(5) = 4, so αβ sends 1
to 4. This is illustrated by following the arrows above. Notice the movement is from
left-to-right, which is our chosen convention for composing two permutation. The other
values are determined in a similar fashion.
We can use SageMath to multiply permutations.
In [13]: a= Permutation ([5 ,3 ,1 ,4 ,2]); a
Out[13]: [5 ,3 ,1 ,4 ,2]
In [14]: b= Permutation ([5 ,3 ,2 ,1 ,4]); b
Out[14]: [5 ,3 ,2 ,1 ,4]
In [15]: a*b
Out[15]: [4 ,2 ,5 ,1 ,3]
We can also use the arrow diagram representation for permutations to give us more visual
insight into how permutations are composed:
If we compose α and β in the opposite order, we find
βα =

1 2 3 4 5
5 3 2 1 4  1 2 3 4 5
5 3 1 4 2 
=

1 2 3 4 5
2 1 3 5 4 
.
Hence permutation composition is not commutative in general. That is, we typically have
αβ 6= βα.
In [16]: b*a40 Chapter 3. Permutations
Out[16]: [2 ,1 ,3 ,5 ,4]
In [17]: a*b==b*a
Out[17]: False
(b) Let α =

1 2 3 4 5 6 7 8
3 2 7 8 1 4 5 6 
and β =

1 2 3 4 5 6 7 8
5 2 1 6 7 8 3 4 
. Then
αβ =

1 2 3 4 5 6 7 8
3 2 7 8 1 4 5 6  1 2 3 4 5 6 7 8
5 2 1 6 7 8 3 4 
=

1 2 3 4 5 6 7 8
1 2 3 4 5 6 7 8 
= ε.
Therefore αβ is the identity permutation. Permutations with the property that their
product is ε are called inverse permutations, since one permutation is undoing the
rearrangement the other one performed.
(c) For any permutation α we can take the product of α with itself: αα, we write this as α
2
.
In general we write the product of α with itself n-times, αα ···α, as α
n
.
Suppose α =

1 2 3 4 5
3 4 1 5 2 
, then the powers of α are:
α
2 = αα =

1 2 3 4 5
1 5 3 2 4 
, α
3 = αα2 =

1 2 3 4 5
3 2 1 4 5 
α
4 = αα3 =

1 2 3 4 5
1 4 3 5 2 
, α
5 = αα4 =

1 2 3 4 5
3 5 1 2 4 
α
6 = αα5 =

1 2 3 4 5
1 2 3 4 5 
.
Check these products yourself. We see that α
6
is the identity permutation. This raises the
question: Can we always multiply a permutation to itself a finite number of times and end
up with the identity permutation?

From the previous example two questions are raised:
(i) For any permutation α, must there exist a permutation β such that αβ = ε?
(ii) For any permutation α, must there exist a positive integer n such that α
n = ε?
If we think about a permutation as a move on one of our puzzles, say Rubik’s cube, then these
questions are equivalent to asking: (i) When a move is applied, can it then be undone by another
move? (ii) Applying the same move over and over again, will you eventually get back to where you
started?
Phrased in this way, it may seem obvious that the answer is yes in both cases. For example, if
the move F was applied (clockwise quarter turn of the front face), then the move F
−1 undoes it
(counterclockwise turn of the front face). Try this on your Rubik’s cube. Moreover, for the move
F, applying it 4 times in a row takes you back to where you started. This means F
4
is the identity,
or do-nothing move. If the answer to the questions above is now obvious then you already have a
working understanding of inverses and orders.
We’ll discuss these topics in a little more detail over the next few sections. But first let’s play
with the cube a little more.3.4 Associativity of Permutation Composition 41
Exercise 3.1 Consider Rubik’s cube and the legal moves F, B, R, L, U, D, F
−1
, B
−1
, R
−1
, L
−1
,
U
−1
, D
−1
, and all successive combinations of these moves.
Recall a move sequence is read as follows: F
−1U
2 means first twist the front face a quarter
turn in the counterclockwise direction, then turn the up face a half turn in the clockwise direction.
(a) What is the inverse of the move sequence F
−1U
2
? That is, if you apply move sequence
F
−1U
2
, then what is the sequence of moves which will undo this?
(b) How many times does the move sequence U
2R
2 need to be applied in order to get you
back to where you started? (Play with your cube to figure this out, and try not to lose
count as you’re twisting faces.)

Answer on page 332
3.4 Associativity of Permutation Composition
When adding and multiplying real numbers we don’t need to worry about what to do first. For
example, in the expression 2 · 3 · 4 we get the same result if we multiply 2 and 3 first, then multiply
the result by 4: (2 · 3)· 4 = 6 · 4 = 24, as we get if we multiply 3 and 4 first, then multiply by 2:
2 ·(3 · 4) = 2 · 12 = 24. This property of multiplication is called associativity, and it is written:
(ab)c = a(bc) for all a,b, c ∈ R.
What associativity means is that we can write the product of three (or more) numbers without
having to use grouping brackets: abc. Since no matter which product you take first it will not affect
the result.
The same is true for addition of real numbers: (a+b) +c = a+ (b+c). This means we can
write a+b+c without any confusion about which sum to perform first.
A fundamental question to ask is: Is permutation composition associative? That is, must we
have (αβ)γ = α(β γ)?
The answer is yes, permutation composition is associative. Lucky for us, this means we don’t
have to use group brackets when writing long chains of products. The reason it is associative is
simply because permutations are functions, and function composition is associative. To see why,
consider permutations α,β, γ : [n] → [n]. For any k ∈ [n],
((αβ)γ)(k) = γ((αβ(k)) = γ(β(α(k))
and
(α(β γ))(k) = (β γ)(α(k)) = γ(β(α(k)),
which are the same. 1 So (αβ)γ = α(β γ).
This means we can write αβ γ for the product of these three permutations and there is no
confusion about what product we should do first. The result won’t change.
Example 3.8 Let α =

1 2 3 4 5
5 3 1 4 2 
, β =

1 2 3 4 5
5 3 2 1 4 
, and
1Our convention is to compose permutations from left to right, see Definition 3.3.1.42 Chapter 3. Permutations
γ =

1 2 3 4 5
2 1 4 3 5 
. Then
(αβ)γ =
 1 2 3 4 5
5 3 1 4 2  1 2 3 4 5
5 3 2 1 4  1 2 3 4 5
2 1 4 3 5 
=
 1 2 3 4 5
4 2 5 1 3  1 2 3 4 5
2 1 4 3 5 
=

1 2 3 4 5
3 1 5 2 4 
and
α(β γ) = 
1 2 3 4 5
5 3 1 4 2   1 2 3 4 5
5 3 2 1 4  1 2 3 4 5
2 1 4 3 5 
=

1 2 3 4 5
5 3 1 4 2   1 2 3 4 5
5 4 1 2 3  =

1 2 3 4 5
3 1 5 2 4 
It shouldn’t come as a surprise that we get the same result for (αβ)γ and α(β γ). This is what
associativity means. We write this product as αβ γ. 
3.5 Inverses of Permutations
In Example 3.7(b) we saw two permutations α and β such that αβ = ε. We will call such
permutations α and β inverses. Let’s look at this example a little more closely.
The permutations under consideration are:
α =

1 2 3 4 5 6 7 8
3 2 7 8 1 4 5 6 
and β =

1 2 3 4 5 6 7 8
5 2 1 6 7 8 3 4 
.
We can represent α by an arrow diagram. Each blue arrow represents the mapping defined by
the permutation α. If we replace each blue arrow with a red arrow pointing in the opposite direction
then we get an arrow diagram representing β (follow arrows from bottom row to top row). In this
sense, the inverse permutation is obtained by “reversing the arrows".
We can do the same experiment with the array form of β. Let’s flip β over, that is, we’ll switch
the top and bottom rows:

5 2 1 6 7 8 3 4
1 2 3 4 5 6 7 8 
,
then let’s put the top row in increasing order, while keeping all the columns intact:

1 2 3 4 5 6 7 8
3 2 7 8 1 4 5 6 
.
This is precisely α! Should we be surprised this happened? What is really going on here?
To see what is going on, let’s recall that the notation means the number in the top row maps
to the number directly beneath it in the bottom row. For instance, α maps 1 to 3. If β is to be the
inverse of α then it must undo what α does. In particular, it must map 3 back to 1. This means3.5 Inverses of Permutations 43
3 must appear above 1 in the array from of β. Let’s say this again: if 1 is above 3 in α, then 3 is
above 1 in β.
The same is true for every number. In general, we have if k is above m in α (i.e. α(k) = m)
then m is above k in β (i.e. β(m) = k). This explains exactly what we observed when we flipped β.
Now suppose, we start with a permutation, say σ =

1 2 3 4
3 2 4 1 
and we flip the rows, and
reorder the first row so it is increasing order, while keeping the columns intact: γ =

1 2 3 4
4 2 1 3 
.
Is this a permutation? Well, each number from 1 to 4 appears in the second row, so it is surjective,
and no number appears more than once, so it is injective. Therefore, yes, it is a permutation. And
by the observation above, it is the inverse of σ, that is, σ γ = ε.
We can also use the arrow diagram to see this visually. γ was constructed by “reversing the
arrows" of σ, so clearly γ is a bijection, and it is the inverse of σ, since it just undoes what σ is
doing.
These observations tell us two things: every permutation has an inverse, and the inverse is
unique. Moreover, we have a straightforward way to construct an inverse to a permutation given in
array or arrow form.
This result is so important that we state it as a theorem. We’ll also give a formal proof of the
theorem, which captures the essence of our discussion above in just a few lines.
Theorem 3.5.1 For any permutation α : [n] → [n], there exists a unique permutation β : [n] → [n]
such that αβ = βα = ε.
Proof: Let α be a permutation, define a new function β : [n] → [n] as follows:
β(m) = k ⇐⇒ α(k) = m
for k,m ∈ [n]. Since α is bijective, for any m such a k exists and is unique so β is well defined. It
follows that (αβ)(k) = β(α(k)) = β(m) = k and (βα)(m) = α(β(m)) = α(k) = m. This proves
the theorem. 
Definition 3.5.1 For any permutation α the unique permutation β such that αβ = βα = ε is
called the inverse of α and is denoted by α
−1
.
Example 3.9 Find the inverse of each of the following permutations. Verify it is the inverse by
computing the product and showing it is the identity permutation.
(a) α =

1 2 3 4 5
3 1 2 5 4 
(b) β =

1 2 3 4
3 4 1 2 44 Chapter 3. Permutations
(a) The inverse of α can be obtained by reading the array form from the bottom row to
the top row. For example, 1 in the bottom row must map to the number above it, which is 2.
Similarly for the other numbers, so α
−1 =

1 2 3 4 5
2 3 1 5 4 
.
In [18]: a= Permutation ([3 ,1 ,2 ,5 ,4])
a. inverse ()
Out[18]: [2 , 3 , 1 , 5 , 4]
(b) Similar to (a), we read the array form of β from bottom-to-top to get the array form of
β
−1
: β
−1 =

1 2 3 4
3 4 1 2 
. Notice this is just β itself. Therefore β is its own inverse.
In [19]: b= Permutation ([3 ,4 ,1 ,2])
b. inverse ()
Out[19]: [3 , 4 , 1 , 2]

3.5.1 Inverse of a Product
Apply the move sequence RU to your Rubik’s cube. Now undo this move sequence. That is, return
the cube to the state it was in before you apply RU. If you just applied the move sequence U
−1R
−1
,
then you have a working understanding of how to find the inverse of a product.
As another example, in the morning you get dressed you put on your socks then your shoes, but
when you come home at night and get undressed you takes off your shoes then your socks. The
order in which things are undone is opposite to which they were done.
If these two example seem obvious, it is because they in fact are. But even obvious things can
be stated as theorems, which are just convenient summaries of observations for later use.
Theorem 3.5.2 For two permutations α and β,
(αβ)
−1 = β
−1α
−1
.
In general, the inverse of a product of permutations is the product of the inverses in the
reverse order:
(α1α2 ···αk)
−1 = α
−1
k
···α
−1
2 α
−1
1
.
Proof: Taking the product, and using associativity of permutation multiplication,
(αβ)(β
−1α
−1
) = αβ β −1α
−1
= αεα−1
= αα−1
= ε
Therefore, β
−1α
−1
is the inverse of αβ. A similar argument proves the general statement. 
3.5.2 Cancellation Property
An important property of the real numbers that we use all the time is the ability to cancel the same
(non-zero) factor on both sides of an equation. For example if 2x = 6 then we can cancel 2 from
each side to get x = 3. The reason we could “cancel" the 2
0
s is simply because we could multiply3.6 The Symmetric Group Sn 45
both sides of the equation by the inverse of 2, namely 1/2. That is (1/2)(2x) = (1/2)(2 · 3), which
means [(1/2)2]x = [(1/2)2]3 (note the use of associativity of multiplication here), and so x = 3.
This familiar property also holds for permutations.
Lemma 3.5.3 — Cancellation Property. If α,β, γ ∈ Sn where αβ = αγ then β = γ.
Similarly, if βα = γα then β = γ.
Proof: Multiplying both sides of αβ = αγ on the left by α
−1 we get
α
−1
(αβ) = α
−1
(αγ).
By associativity
(α
−1α)β = (α
−1α)γ.
and so
εβ = εγ,
which means β = γ.
A similar argument shows the right cancellation property as well. 
As a consequence of the cancellation property the identity permutation is the only permutation
that when multiplied by another permutation leaves it unchanged. That is, it has the property that
αε = α for every α ∈ Sn. To see this, suppose β is a permutation with this property too, that is
αβ = α for some α. Then αβ = αε, and by cancellation of α we have β = ε.
3.6 The Symmetric Group Sn
The set of all permutations of the set [n] is called the symmetric group of degree n, and is denoted
by Sn. In other words,
Sn = {α | α is a permutation of [n]}.
We’ve already seen that elements of Sn can be written in the form

1 2 3 ... n
α(1) α(2) α(3) ... α(n)

.
It is straightforward to compute the cardinality of the set Sn. There are n choices for α(1).
Once α(1) has been chosen, there are n−1 possibilities for α(2) (since α is injective we must
have α(1) 6= α(2)). Once α(2) has been chosen there are n−2 choices for α(3). Continuing in
this way we see that there are n ·(n−1)·(n−2)···3 · 2 · 1 = n! possible choices for α(1) to α(n).
Each choice gives a different permutation. Therefore |Sn| = n!.
Let’s summarize what we know so far about Sn.
• Sn, the symmetric group of degree n, is the set of all permutation of [n] = {1,2,...,n}.
• |Sn| = n!
• Two elements α,β ∈ Sn can be composed (multiplied) to give another element αβ ∈ Sn.
2
• The identity permutation is ε =

1 2 ... n
1 2 ... n

. It has the property that εα = εα = α
for all α ∈ Sn.
• Every α ∈ Sn has an inverse denoted by α
−1
. The defining property of an inverse is αα−1 =
α
−1α = ε.
• (α1α2 ···αk)
−1 = α
−1
k
···α
−1
2 α
−1
1
.
2
the convention of these notes is to compose permutations from left-to-right,46 Chapter 3. Permutations
• Permutation composition (multiplication) is associative: α(β γ) = (αβ)γ.
• Permutation composition (multiplication) is not necessarily commutative.
• Cancellation Property: αβ = αγ implies β = γ, and βα = γα implies β = γ.
3.7 Rules for Exponents
When we describe moves on Rubik’s cube we’ll write expressions like: RB2R
−1
. Exponents are
serving two purposes here: (i) they represent inverse moves, R
−1
is the inverse of R, (ii) they
represent repetition of moves, B
2
is the move B repeated twice.
If we follow the move sequence RU−2B
2R
−1DU−2 with the move U then the complete move
sequence would be
RU−2B
2R
−1DU−2U.
But certainly, U
−2U simplifies to U
−1
, since a counterclockwise half turn U
−2
followed by a
clockwise quarter turn U is equivalent to a counterclockwise quarter turn U
−1
. This means the
complete move sequence is equivalent to
RU−2B
2R
−1DU−1
.
We write this as (RU−2B
2R
−1DU−2
)U = RU−2B
2R
−1DU−1
.
This notation translates nicely to composition of permutations.
If α ∈ Sn and m is a positive integer then α
m denotes the product of α with itself m-times. That
is, α
m = αα ···α.
We define negative exponents by the rule α
−m = (α
−1
)
m, where m is any positive integer.
We define the zero exponent by α
0 = ε, where ε is the identity permutation.
An important observation is that some of the familiar “rules of exponents" apply to the com￾position of permutations. Specifically, for any two integers m and k and for any α ∈ Sn, we
have
(a) α
mα
k = α
m+k
(b) (α
m)
k = α
mk
This follows precisely from the fact that we are defining an exponent to represent repeated
composition.
One property that you may be familiar with from multiplication of real numbers is: (ab)
m =
a
mb
m. This is not true for permutations: if α,β ∈ Sn and m ∈ Z then in general (αβ)
m is not equal
to α
mβ
m. For real numbers this property relies on the fact that multiplication of real numbers is
commutative. We’ve already seen this is not the case for permutations under composition.
However, we do have the following result.
Lemma 3.7.1 If α,β ∈ Sn commute with each other, that is αβ = βα, then for all integers m,
(αβ)
m = α
mβ
m.
Proof: When m = 0 or 1 the result is trivial. Let’s now consider the case when m ≥ 2. We will use
mathematical induction on m to prove the result. Starting with the base case m = 2 we see that
(αβ)
2 = (αβ)(αβ) = α(βα)β by associativity,
= α(αβ)β since α and β commute,
= α
2
β
2
.3.8 Order of a Permutation 47
Therefore the statement of the lemma holds for m = 2. For the inductive hypothesis we assume the
result holds for m = k and prove it must then hold for m = k +1.
(αβ)
k+1 = (αβ)(αβ)
k
= (αβ)(α
k
β
k
) by the induction hypothesis,
= α(βαk
)β
k
by associativity,
= α(α
k
β)β
k
since α and β commute,
= α
k+1
β
k+1
by associativity.
Therefore, by mathematical induction, the result follows for all m ≥ 2. Combined with our
initial observations we see that the statement of the lemma holds for all m ≥ 0.
For the case when m is negative, first notice that if α and β commute then so do α
−1
and β
−1
.
To see this just take inverses of each side of the equation αβ = βα. Now if m = −k where k is a
positive integer then
(αβ)
m = ((αβ)
−1
)
k
by definition of a negative exponent,
= (β
−1α
−1
)
k
= (α
−1
β
−1
)
k
since α
−1
and β
−1
commute
= (α
−1
)
k
(β
−1
)
k
by the lemma applied to α
−1
, β
−1
and k > 0,
= α
−k
β
−k = α
m
β
m
.
This proves the lemma. 
Notice the converse of Lemma 3.7.1 is not true in general. For example α =

1 2 3 4
2 3 1 4 
and β =

1 2 3 4
3 2 4 1 
satisfy (αβ)
3 = α
3β
3
(check), but αβ 6= βα. However, the converse
is true for m = 2, see exercise 11.
3.8 Order of a Permutation
The order of a permutation α ∈ Sn is the smallest positive integer m such that α
m = ε.
In Example 3.7 we saw that for α =

1 2 3 4 5
3 4 1 5 2 
the smallest m for which α
m = ε is
6. We say α has order 6, and we write ord(α) = 6.
As another example, β =

1 2 3
2 1 3 
is an element in S3 of order 2, since β 6= ε, but β
2 = ε.
Must every permutation have a finite order? The next theorem answers this question.
Theorem 3.8.1 For any α ∈ Sn there exists a positive number m for which α
m = ε. The smallest
such m is the order of α, denoted ord(α).
Proof: Consider the set of all powers of α, {α
k
: k ∈ Z
+}. Since this is a subset of the finite set Sn
it must also be finite. This means all the powers of α cannot be distinct, so there must be k, ` such
that α
k = α
` where k > ` > 0. Now multiplying α
−`
to the left of both sides (i.e. cancelling α
`
)
we get:
α
−`α
k = α
−`α
`
and so
α
k−` = ε.48 Chapter 3. Permutations
This proves the theorem. 
We can now describe precisely which integers m have the property that α
m = ε.
Theorem 3.8.2 Let α be a permutation. If α
m = ε then ord(α) divides m.
Proof: Let n = ord(α), and suppose α
m = ε. By the division algorithm (Theorem B.1.1 in
Appendix B) there exist integers q and 0 ≤ r < n such that m = qn+r. In other words, n goes into
m q-times, with r left over. Therefore
ε = α
m = α
qn+r = (α
n
)
qα
r = ε
qα
r = α
r
.
Since r is smaller than the order of α this is only possible if r = 0. Hence n divides m. 
Exercise 3.2 Let
α =

1 2 3 4 5
5 2 1 4 3 
, β =

1 2 3 4 5
5 4 1 2 3 
, γ =

1 2 3 4 5
2 4 1 3 5 
.
Determine the order of (a) α (b) β (c) β
−1
(d) γ (e) α
−1
γα. 
Answer on page 332
Exercise 3.3 For Rubik’s cube determine the orders of each of the following moves by physi￾cally doing the move successively on the cube. It is best to start with your cube in the solved
state so you can easily recognize when you’ve returned to that state.
(a) R
(b) R
2L
2U
2
(c) U
2R
(d) UR

Answer on page 332
If you stuck with it long enough, and didn’t lose count, you would find that UR has order 105.
That means you would have to apply UR a total of 105 times (or a total of 210 quarter face turns)
before you get back to where you started.
One of our goals will be to thoroughly understand orders of move sequences: specifically how
to compute the order of a move sequence without having to physically manipulate the cube.
For example, the move sequence RU2D
−1BD−1 has order 1260. We’ll soon see how to compute
this rather quickly using SageMath.
3.9 Exercises
1. Show that a function from a finite set A to itself is one-to-one if and only if it is onto. Is this
true when A is infinite?
2. Suppose A and B are finite sets and |A| > |B|. Is there an injective function f : A → B?
Explain.
3. For α =

1 2 3 4
3 1 2 4 
, β =

1 2 3 4
4 3 1 2 
, and γ =

1 2 3 4
2 1 4 3 
verify that
α(β γ) = (αβ)γ. This provides some experimental evidence for the associative law.3.9 Exercises 49
4. Consider the following permutations
α =

1 2 3 4 5 6 7 8
3 4 6 7 1 5 8 2 
, β =

1 2 3 4 5 6 7 8
8 7 6 5 4 3 2 1 
,
γ =

1 2 3 4 5 6 7 8
5 4 6 7 1 3 2 8 
.
Determine each of the following.
(a) αβ
(b) αγβ
(c) β
−1
(d) (γβ)
−1
(e) β
−1
γ
−1
(f) α
−1
γα
(g) ord(α)
(h) ord(β)
(i) ord(α
−1
γα)
5. Find the inverse of each of the following permutations. Verify the product you found actually
is the inverse by computing the product and showing it is the identity permutation.
(a) α =

1 2 3 4
3 4 2 1 
(b) β =

1 2 3 4 5 6 7 8
4 1 5 7 3 8 2 6 
6. For α =

1 2 3 4 5
5 1 2 3 4 
explain how you know α
2011 6= ε, without actually computing
all 2011 powers of α.
7. Show that an n-cycle 
1 2 3 ... n
n 1 2 ... n−1

has order n.
8. Show that for any α ∈ Sn, ord(α) = ord(α
−1
).
9. There is always something that doesn’t commute. Show that if n ≥ 3, then for every
element α in Sn, if α is not the identity permutation ε then there is some other permutation
β in Sn with which α does not commute: αβ 6= βα.
10. For any permutations α and β and any integer n show that (α
−1βα)
n = α
−1β
nα.
11. For α,β ∈ Sn show that if (αβ)
2 = α
2β
2
then α commutes with β: that is, αβ = βα.
12. Show that if αβ γβ −1α = αβ σβ −1α then γ = σ.
13. Show that the number of elements α in Sn such that α
3 = ε is odd. In other words, show the
set {α ∈ Sn | α
3 = ε} has odd cardinality.
Answers to in-chapter exercises:
Exercise 3.1: (a) U
−2F which could also be written as U
2F since U
2
and U
−2
are equivalent
moves. (b) 6
Exercise 3.2: (a) 3 (b) 6 (c) 6 (d) 4 (e) 4
Exercise 3.3: (a) 4 (b) 4 (c) 30 (d) 1054. Permutations: Cycle Notation
In this section we introduce a simple yet extremely powerful notation for permutations: cycle form.
We’ll revisit the concepts of products (composition), order, and inverses, and see how our new
notation simplifies calculations.
4.1 Permutations: Cycle Notation
Consider the 5-cycle permutation α defined as follows:
α(1) = 2, α(2) = 3, α(3) = 4, α(4) = 5, α(5) = 1.
The array form of α is shown in Figure 4.1a, and the arrow diagram is shown in Figure 4.1b.
α =

1 2 3 4 5
2 3 4 5 1 
(a) array form
(b) arrow form (c) cycle-arrow form
α = (1 2 3 4 5)
(d) cycle form
Figure 4.1: Different representations for a 5-cycle.
Another diagram which provides a visual representation of the structure of the permutation is
shown in Figure 4.1c, it is called the cycle-arrow form. In this diagram all the information for α is52 Chapter 4. Permutations: Cycle Notation
still present. For example, to determine α(3) look at the diagram and find 3, then see where the
arrow takes it. In this case it takes 3 to 4, so α(3) = 4.
There are a few nice things about cycle-arrow form: (1) it displays visually the cycle structure
(i.e. we can see the 5 numbers cycling around in a circular fashion, which is why we called it a
5-cycle), and (2) it uses only one set of numbered dots, making the diagram more compact than our
original arrow form.
Though mathematically satisfactory, the cycle-arrow form is still cumbersome to draw. However,
leaving out the arrows we can simply write the 5-cycle as:
α = (1 2 3 4 5)
This represents that fact that α maps each number to the next one in the list, and maps 5 back
around to the start of the list, which is 1. This representation is shown in Figure 4.1d and is called
cycle form.
All representations in Figure 4.1 have their own benefits, but it is this cycle form that is the
most compact, and this will be the form we primarily use in this book.
When working with cycle form, α = (1 2 3 4 5), you should read it as follows:
“1 goes to 2, 2 goes to 3, 3 goes to 4, 4 goes to 5, and 5 goes to 1."
We don’t need to start at 1 when writing down the cycle form. If we started at 3, for instance,
and constructed the list of numbers we visit by traveling around Figure 4.1c then we get (3 4 5 1 2).
This is another perfectly acceptable representation of α: reading this cycle notation as described
above will tell us exactly how α acts as a function. In particular, we can represent α by any of the
equivalent cycle forms:
α = (1 2 3 4 5) = (2 3 4 5 1) = (3 4 5 1 2) = (4 5 1 2 3) = (5 1 2 3 4).
Despite this notation allowing for non-unique representations of permutations, there is an easy
fix. Just write the cycle so that the first number is the smallest number in the cycle. In this case we
would then write α = (1 2 3 4 5) since 1 is the smallest number in this cycle.
Let’s look at another permutation: β =

1 2 3 4 5 6 7 8
3 2 7 8 1 4 5 6 
. The cycle arrow form
is:
This reveals so much about the permutation, especially when you imagine taking powers of
it: β
n
. For instance, 1,3,5,7 only get permuted amongst themselves, so there is no k such that
β
k
(1) = 4. Also, since a 4-cycle has order 4, then β
4 would leave 1,3,5,7 untouched: β
4
(x) = x
when x = 1,3,5,7. This means β
4
is a 3-cycle: β
4 = (4 8 6).
To construct the cycle form of β we look at the arrow form above and notice that 1 goes to 3, 3
goes to 7, 7 goes to 5 and 5 goes back to 1. This can simply be written as (1 3 7 5). Similarly, 2
goes to 2 so we write this as (2), and the 4,6,8 triangle can be written as (4 8 6). Therefore, the
cycle form of β is
β = (1 3 7 5)(2)(4 8 6).
This is a compact way to represent the permutation β, and we haven’t lost any information.
For example, we can use the cycle form to determine β(3) by noticing in (1 3 7 5)(2)(4 8 6) the4.1 Permutations: Cycle Notation 53
number 3 is followed by 7, so β(3) = 7. Similarly, β(5) = 1 since from 5 we wrap around in the
cycle and get back to 1.
If we make one further convention: to leave off any number that gets mapped to itself, then β
can be written in an even more compact form:
β = (1 3 7 5)(4 8 6).
With this convention, any number not present in the cycle form is assumed to map back to itself.
Recall a permutation of the form (a1 a2 ... am) is called an m- cycle. We would say β is the
product of a 3-cycle and a 4-cycle.
Example 4.1 To determine the cycle form of the permutation
α =

1 2 3 4 5 6 7 8 9 10
5 1 6 8 4 10 7 2 9 3 
start with the smallest number in the set, in this case 1. Since α(1) = 5 we begin the cycle by
writing
(1 5 ...)....
Next, 5 maps to 4, so we continue building the cycle
(1 5 4 ...)....
Continuing in this way we construct (1 5 4 8 2 ...)..., and since 2 maps back to 1 then we close
off the cycle:
(1 5 4 8 2)....
Next, we pick the smallest number that doesn’t appear in any previously constructed cycle.
This is the number 3 in this case. We now repeat what we just did and construct the cycle
involving 3:
(1 5 4 8 2)(3 6 10)....
We now pick the smallest number that doesn’t appear in any previously constructed cycle,
which is 7, and construct the cycle to which it belongs. In this case 7 just maps to itself:
(1 5 4 8 2)(3 6 10)(7)....
Finally, the only number remaining is 9 and it maps back to itself so the cycle for of α is
(1 5 4 8 2)(3 6 10)(7)(9)
which simplifies to
α = (1 5 4 8 2)(3 6 10)
since our convention is to omit 1-cycles. Therefore, α is the product of a 3-cycle and a 5-cycle.

Exercise 4.1 Converting from array to cycle form. Convert the permutation given in array
form

1 2 3 4
3 4 1 2 
to cycle form. 54 Chapter 4. Permutations: Cycle Notation
Answer on page 61
Exercise 4.2 Converting from cycle to array form. For the permutation given in cycle form
by
(1 3 5 2)(4 7) ∈ S8, express it in array form. 
Answer on page 61
4.2 Products of Permutations: Revisited
Let’s see how we can compute the product of permutations which are given in cycle form.
For example, consider the permutations α = (1 5 2 3) and β = (1 5 4)(2 3) in S5. What is the
cycle form of αβ? Of course, we could just stick the two permutations together, end-to-end, and
write
αβ = (1 5 2 3)(1 5 4)(2 3)
but it will be more convenient to express the permutation in disjoint cycle form, that is where the
various cycles have no numbers in common.
We determine the cycle form of αβ by determining exactly how it maps each number, beginning
with 1. Keep in mind that permutation composition is done from left-to-right, and each cycle that
does not contain a number fixes that number. We have that (1 5 2 3) sends 1 to 5, (1 5 4) sends 5 to
4, and (2 3) fixes 4. So the effect of αβ is it sends 1 to 4.
Thus we begin writing the disjoint cycle form as αβ = (1 4 ...)... .
Repeating this process with 4, we have, cycle-by-cycle, left-to-right,
4
(1 5 2 3)
−−−−→ 4
(1 5 4)
−−−→ 1
(2 3)
−−→ 1,
so that αβ(4) = 1, and the cycle form is now αβ = (1 4)... .
Next we pick the smallest number that is not in any previously constructed cycle, this would be
2. Repeating this process with 2, cycle-by-cycle, left-to-right,
2
(1 5 2 3)
−−−−→ 3
(1 5 4)
−−−→ 3
(2 3)
−−→ 2,
so that αβ(2) = 2, and the cycle for is now αβ = (1 4)(2)... .
Continuing in this way we find that αβ = (1 4)(2)(3 5) = (1 4)(3 5).
The important thing to keep in mind when multiplying cycles is to keep moving from one cycle
to the next from left-to-right.
Example 4.2 Let α = (1 4 6 3 7)(2 8) and β = (2 5 3)(4 7 8 1) be permutations in S8. Then
αβ = (1 4 6 3 7)(2 8)(2 5 3)(4 7 8 1) = (1 7 4 6 2)(3 8 5)
and
βα = (2 5 3)(4 7 8 1)(1 4 6 3 7)(2 8) = (1 6 3 8 4)(2 5 7).
Check this yourself. To start off, consider what happens to 1 under αβ:
1
(1 4 6 3 7)
−−−−−→ 4
(2 8)
−−→ 4
(2 5 3)
−−−→ 4
(4 7 8 1)
−−−−→ 7,4.3 Properties of Cycle Form 55
so (αβ)(1) = 7. 
4.3 Properties of Cycle Form
Two basic properties of permutations are: (a) every permutation can be written as a product of
disjoint cycles, and (b) disjoint cycles commute.
The first property was implicit in our discussion of how to construct the cycle form of a
permutation. In particular, when we finished constructing a cycle, the first thing we did was look
for a number that did not appear in a previously constructed cycle. This guarantees that our cycles
will be disjoint.
The second property: disjoint cycles commute, is also fairly straightforward consequence of the
disjoint cycle notation. For example, consider the disjoint cycles α = (1 3 2) and β = (4 5). When
multiplying these cycles it doesn’t matter which order the product is taken: αβ = (1 3 2)(4 5) =
(4 5)(1 3 2) = βα. Both of these products represent the same permutation: 
1 2 3 4 5
3 1 2 5 4 
.
A student once said, it is like two games of musical chairs going on in two different rooms, neither
one has any influence on the other.
Even though this property is straightforward, it is very important, so we will state it as a
theorem.
Theorem 4.3.1 — Disjoint Permutations Commute. If α,β ∈ Sn and have no numbers in [n]
that are moved by both α and β then αβ = βα. In other words, if the disjoint cycle form of α
has no number in common with the disjoint cycle form of β then α and β commute.
For a more physical example of disjoint cycles commuting consider the moves R and L of
Rubik’s cube. These moves are disjoint in the sense that their is no common piece that is moved
by both R and L. Notice that RL and LR result in exactly the same position of the cube, so in this
sense RL = LR, and so R and L commute.
4.4 Order of a Permutation: Revisited
Recall the order of a permutation α ∈ Sn is the smallest positive integer m such that α
m = ε. (See
Section 3.8.) To determine the order of a given permutation our only technique so far was to just
continue computing powers until we hit the identity. This is a very inefficient way to compute the
order.
The disjoint cycle form has the enormous advantage of allowing us to “eyeball" the order of a
permutation.
For example the 5-cycle (1 2 3 4 5) has order 5. In general, an m-cycle has order m. (You are
asked to show this in Exercise 9, and were also asked this in Lecture 3 Exercise 7.) The order of a
product of disjoint cycles is given by the next theorem.
Theorem 4.4.1 — Order of a Permutation. The order of a permutation written in disjoint cycle
form is the least common multiple of the lengths of the cycles.
Before we prove this theorem let’s see why it should be true. Consider the permutation
β = (1 3 7 5)(4 8 6), which is the product of a cycle of length 3 and a cycle of length 4. The arrow
diagram is as follows.56 Chapter 4. Permutations: Cycle Notation
We want to determine the smallest power k so that β
k
is the identity. Every application of β moves
the numbers around the square (4-cycle) one position, so in order to have numbers return to their
original position β must be applied 4, or a multiple of 4, times. This means 4 | k.
1 Similarly,
considering the triangle (3-cycle) β would need to be applied a multiple of 3 times to move numbers
back to their original positions. This means 3 | k. Since we require both 3 and 4 to divide k, and
we want k to be as small as possible, this means k is the least common multiple of 3 and 4, that is
ord(β) = k = lcm(3,4) = 12. Sure enough, if we check we find β
12 = ε.
An algebraic way to see β
12 = ε is as follows:
β
12 = [(1 3 7 5)(4 8 6)]12 = (1 3 7 5)
12(4 8 6)
12 = [(1 3 7 5)
4
]
3
[(4 8 6)
3
]
4 = ε
3
ε
4 = ε.
Here we used the fact that an m-cycle has order m, and (σ1σ2)
k = σ
k
1σ
k
2
, for disjoint cycles σ1 and
σ2 (recall that disjoint cycles commute by Theorem 4.3.1).
This is precisely the idea that we use to give a general proof of the theorem.
Proof: (Theorem 4.4.1) One cycle: As we noted above, a cycle of length m has order m. (See
Exercise 9.)
Two disjoint cycles: Now suppose α and β are disjoint cycles of lengths a and b. Let k be the
least common multiple of a and b, that is, k is the smallest positive integer which is divisible by
both a and b. Since α and β commute then (αβ)
k = α
kβ
k = ε (here we used Lemma 3.7.1 and
that fact that a|k implies α
k = ε and b|k implies β
k = ε). It follows from Theorem 3.8.2 that the
order of αβ, call it t, divides k. We now wish to show t = k. From ε = (αβ)
t = α
tβ
t
it follows that
α
−t = β
t
. However, α and β have no symbol in common, and since raising a cycle to a power does
not introduce new symbols, α
−t
and β
t
also have no symbol in common. Since α
−t = β
t
and have
no common symbols then they both must be the identity: α
−t = β
t = ε. If follows from Theorem
3.8.2 that t is divisible by a and b. This means that k = lcm(a,b) must also divide t. Therefore
t = k, as desired.
More than two disjoint cycle: The general case involving more than two cycles is handled in an
analogous way. 
Example 4.3 (a) The order of α = (1 3 4)(2 5) is lcm(3,2) = 6. Observe that
α
6 = [(1 3 4)(2 5)]6 = (1 3 4)
6
(2 5)
6 = ε.
(b) The permutation β = (1 7 4 10 3)(2 5 6 9)(8 11) has order lcm(5,4,2) = 20. Notice how
quickly we were able to compute this order. If we tried to do it by successively computing
powers of β we would need to compute 20 powers, and this assumes we didn’t make any
mistakes in the tedious calculations. This shows the power of Theorem 4.4.1.

Exercise 4.3 Find the order of each of the following permutations:
(a) (1 3) (b) (1 5 2 3) (c) (1 5 3 7)(2 6 8)

Answer on page 61
1For integers, the vertical bar | means “divides", so a | b is read “a divides b" and means b = ak for some integer k.
(Appendix B)4.5 Inverse of a Permutation: Revisited 57
4.5 Inverse of a Permutation: Revisited
Every permutation can be written as a product of disjoint cycles: α = σ1σ2 ···σk. We have already
seen that the inverse of a product is the product of the inverses in the reverse order, so
α
−1 = σ
−1
k
···σ
−1
2 σ
−1
1
.
This means, in order to determine α
−1 directly from its cycle form we just need to know how to
find the inverse of a cycle.
Consider the 5-cycle α = (1 2 3 4 5). We’d like to come up with a simple method for determining
the inverse α
−1 directly from the cycle form, and without having to change representation to array
form, or arrow form.
We know that if α is in array form: α =

1 2 3 4 5
2 3 4 5 1 
then it is straightforward to
write down the inverse: α
−1 =

1 2 3 4 5
5 1 2 3 4 
. Expressing this in cycle form we have
α
−1 = (1 5 4 3 2). An alternative way to write this cycle is (5 4 3 2 1). This gives us a very simple
method for computing an inverse of a cycle: just write the cycle backwards!
α
−1 = (1 2 3 4 5)
−1 = (5 4 3 2 1) = (1 5 4 3 2)
The last equality follows from our convention that we start the cycle with the smallest number
in the cycle. Figure 4.2 shows the various representation of α and α
−1
.
α =

1 2 3 4 5
2 3 4 5 1 
(a) array form
(b) arrow form for α (c) cycle-arrow form
for α
α = (1 2 3 4 5)
(d) cycle form for
α
α
−1 =

1 2 3 4 5
5 1 2 3 4 
(e) array form
(f) arrow form for α
−1
(g) cycle-arrow form
for α
−1
α
−1 = (1 5 4 3 2)
(h) cycle form for
α
−1
Figure 4.2: Different representations for α and α
−1
.
To make sure we nail this down, consider another example. The inverse of the permutation
β = (1 5 3)(2 4) is β
−1 = (2 4)
−1
(1 5 3)
−1 = (4 2)(3 5 1) = (2 4)(1 3 5).
To summarize:
To get from the cycle form of α to the cycle form of α
−1
, just write the representation
for α down in the reverse order.58 Chapter 4. Permutations: Cycle Notation
This means, reverse the order in which the numbers are written in each individual cycle, as well
as reverse the order in which the cycles are written. Of course, this last step isn’t necessary if the
cycles are disjoint, since disjoint cycles commute (Theorem 4.3.1).
Example 4.4 (a) The inverse of the permutation α = (1 6 3 4 5) is α
−1 = (5 4 3 6 1) =
(1 5 4 3 6).
(b) The inverse of a 2-cycle is itself. For example, (1 2)
−1 = (2 1) = (1 2).
(c) The inverse of the permutation β = (1 4 3 5)(3 7 6)(1 2 5 7 3)(4 6)(2 3 5 4)(3 4 5) is
β
−1 = [(1 4 3 5)(3 7 6)(1 2 5 7 3)(4 6)(2 3 5 4)(3 4 5)]−1
= (3 4 5)
−1
(2 3 5 4)
−1
(4 6)
−1
(1 2 5 7 3)
−1
(3 7 6)
−1
(1 4 3 5)
−1
= (3 5 4)(2 4 5 3)(4 6)(1 3 7 5 2)(3 6 7)(1 5 3 4)
= (1 6)(2 7 3 4 5) (disjoint cycle form)

Exercise 4.4 Let α = (1 2)(4 5) and β = (1 6 5 3 2). Compute (a) α
−1
, (b) β
−1
, (c) (βα)
−1
. 
Answer on page 61
4.6 Summary of Permutations
Let’s continue with our summary of what we know about Sn.
• Sn, the symmetric group of degree n, is the set of all permutation of [n] = {1,2,...,n}:
Sn = {α | α : [n] → [n] and α is a bijection }.
• |Sn| = n!
• Two elements α,β ∈ Sn can be composed (multiplied) to give another element αβ ∈ Sn.
2
• The identity permutation ε = (1)(2)(3)···(n) has the property that εα = εα = α for all
α ∈ Sn. If we follow our convention of omitting 1-cycles, then when writing the cycle form
for ε we cannot omit all of them! In this case, we usually write just one 1-cycle. For example,
ε = (1).
• Every α ∈ Sn has an inverse denoted by α
−1
. The defining property of an inverse is αα−1 =
α
−1α = ε.
• Inverse of a product: (α1α2 ···αk)
−1 = α
−1
k
···α
−1
2 α
−1
1
.
• Inverse of an m-cycle: (a1 a2 ... am−1 am)
−1 = (am am−1 ... a2 a1).
• Permutation composition (multiplication) is associative: (αβ)γ = α(β γ) = αβ γ.
• Permutation composition (multiplication) is not necessarily commutative. However, disjoint
permutations commute.
• Cancellation Property: αβ = αγ implies β = γ, and βα = γα implies β = γ.
• For every α ∈ Sn there is a smallest number m, called the order of α, denoted by ord(α),
such that α
m = ε. If a permutation is written in disjoint cycle form then ord(α) is the least
common multiple of the lengths of the cycles.
• We’ve seen 5 ways to represent a permutation: (1) listing out all the values, (2) array form,
(3) arrow form, (4) cycle-arrow form, and (5) cycle form. We will most frequently use
cycle form since it is not only the most compact form, it also allows for easy calculations of
2The convention of these notes is to compose permutations from left-to-right,4.7 Working with Permutations in SageMath 59
products, inverses, and orders. We will see very soon that there are many more benefits to
this notation.
4.7 Working with Permutations in SageMath
SageMath uses disjoint cycle notation for permutations, and permutation composition occurs
left-to-right, which agrees with our convention. There are two ways to write the permutation
α = (1 3)(2 5 4):
1. As a text string of disjoint cycles (include quotes): "(1,3)(2,5,4)"
2. As a list of disjoint tuples: [(1,3), (2,5,4)]
In [1]: S5= SymmetricGroup (5) # symmetric group on 5 objects , and names it S5
a=S5(" (2 ,3)(1 ,4) ") # constructs the permutation (2 ,3)(1 ,4) in S5
b=S5("") # constructs the identity permutation in S5
c=S5("(2 ,5 ,3)") # constructs the 3 - cycle (2 ,5 ,3) in S5
print (a, b, c)
(1 ,4)(2 ,3) , () , (2 ,5 ,3)
In [2]: a*c # compose permutations by using multiplication sign
Out[2]: (1 ,4)(3 ,5)
In [3]: c. inverse () # computes inverse
Out[3]: (2 ,3 ,5)
In [4]: c. order () # computes order
Out[4]: 3
Try these examples in SageMath, then change the examples and see what happens. Don’t be
afraid to experiment, this is how you learn. You won’t break anything (at least it is unlikely you
will).
4.8 Exercises
1. Converting from array to cycle notation. Convert each of the following permutations
given in array form to cycle form
(a) 
1 2 3 4
2 4 3 1 
(b) 
1 2 3 4 5 6 7 8 9 10
8 5 4 7 1 3 6 2 10 9 
(c) 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
10 11 9 4 8 15 5 2 7 3 6 1 12 13 14 
2. Converting from cycle to array notation. For each of the following permutation in S8
convert from cycle form to array form.60 Chapter 4. Permutations: Cycle Notation
(a) (1 5 2)(3 4)(7 8) (b) (1 7 4 6)(3 5 8) (c) (1 2)
3. Reducing cycle notation to disjoint cycles.
When multiplying permutations we will most likely end up with a product of cycles which
are not necessarily disjoint, and our goal will be to find a representation in disjoint cycle
form. To practice this, write the following permutations in disjoint cycle form.
(a) α = (1 4 3 5)(3 7 6)(2 5 7 3 1)(6 4)(2 3 5 4)(4 5 3)
(b) β = (1 2 3)(1 4 5)(1 6 7)(1 8 9)
(c) γ = (9 3 5 6)(4 5 2 3 7)(3 7 8 2)(1 4)(7 4)
4. Products and inverses of permutations.
Consider the following permutations in S10:
α = (1 5 2 7)(3 4)(8 10 9), β = (1 10 9 7 6 5 2 4 8),
γ = (1 2 3 4)(6 10 8 7 9), δ = (1 5 8 4)(2 9 10 7)(3 6).
Compute the disjoint cycle form of each of the following:
(a) αβ
(b) βδ
(c) γα
(d) δ
4
(e) αγδ
(f) α
−1
(g) δ
−1β
−1
(h) (αδ)
−1
5. For each of the permutations below, determine its order.
(a) σ = (3 7 4)
(b) α = (1 5 8 4)(2 9 10 7)(3 6)
(c) β = (2 6 8 3 10 9 7 4)
(d) γ =

1 2 3 4 5 6 7
2 7 1 5 4 3 6 
(e) δ =

1 2 3 4 5 6 7 8 9 10
2 3 4 1 5 10 9 7 6 8 
6. For each of the permutations below, express the inverse in disjoint cycle form.
(a) α = (1 5 8 4)(2 9 10 7)(3 6)
(b) β = (2 6 8 3 10 9 7 4)
(c) γ =

1 2 3 4 5 6 7
2 7 1 5 4 3 6 
(d) δ =

1 2 3 4 5 6 7 8 9 10
2 3 4 1 5 10 9 7 6 8 
7. Let α = (1 3 6)(2 4) and β = (1 4 5 2). Compute each of the following.
(a) α
−1
(b) β
−1
(c) αβ (d) βα
8. Let α = (1 2)(4 5) and β = (1 6 5 3 2). Compute β
−1αβ.
9. Show that the order of a m-cycle (a1 a2 ... am) is m.
10. What is the order of a pair of disjoint cycles of length 5 and 3? 4 and 6? 22 and 18?
11. What is the order of the product of three disjoint cycles of lengths 3, 5, and 7? 6, 12 and 26?
12. Show S5 contains no element of order 7.
13. What is the maximum order of any element in S10?
14. Let α,β ∈ Sn, show that α and β
−1αβ have the same order.
15. Let β = (1 3 5 7 9 8 6)(2 4 10). What is the smallest positive integer n for which β
n = β
−7
?
16. Let α = (1 7 4 5 9)(3 8)(10 6 2). If α
m is a 5-cycle, what can you say about m?
17. In S3, find permutations α and β so that ord(α) = 2, ord(β) = 2, and ord(αβ) = 3.
18. Find permutations α and β so that ord(α) = 3, ord(β) = 3, and ord(αβ) = 5.
19. (a) If α ∈ Sn has order k, show that α
−1 = α
k−1
.
(b) Use part (a) to find α
11 for α = (1 3 6 2)(4 7 5).
20. How many permutations of order 5 are there in S6?4.8 Exercises 61
21. Suppose α is a 10 cycle. For which integers i between 2 and 10 is α
i
also a 10-cycle?
22. Splicing and dicing cycles.3 What happens to the cycle structure of a permutation α when
you follow α by a transposition? The answer is you either splice two of the cycles of α into
one bigger cycle, you cut one of the cycles of α into two smaller cycles, you extend one
cycle by one element, or you add a new transposition to the cycle structure. Verify the special
cases of this statement below, and then make an argument that the claim follows in general
from these special cases.
(a) If α = (a1 a2 ... ar)(b1 b2 ... bs) where these two cycles are disjoint, then
α(a1 b1) = (a1 ... ar b1 ... bs).
(b) If β = (a1 a2 ... ar) and 1 ≤ i < j ≤ r, then
β(ai aj) = (a1 ... ai−1 aj aj+1 ... ar)(ai ai+1 ... aj−1).
(c) If γ = (a1 a2 ... ar) and b 6= ai for all i, then
γ(a1 b) = (a1 a2 ... ar b).
(d) If δ = (a1 a2 ... ar) and if (b1 b2) is disjoint from δ, then
δ(b1 b2) = (a1 a2 ... ar)(b1 b2).
Answers to in-chapter exercises:
Exercise 4.1: (1 3)(2 4)
Exercise 4.2: 
1 2 3 4 5 6 7 8
3 1 5 7 2 6 4 8 
Exercise 4.3: (a) 2 (b) 4 (c) 12
Exercise 4.4: (a) (1 2)(4 5) (b) (1 2 3 5 6) (c) (1 3 5 4 6)
3This exercise is from J. Kiltinen’s book Oval Track and Other Permutation Puzzles.5. From Puzzles To Permutations
In the previous two lectures we introduced the formal definition of a permutation: A permutation
of a set A is defined to be a bijection α : A → A. We will now see how to represent a puzzle by
permutations.
5.1 Introduction
There are two types of permutations associated with a puzzle:
(a) the permutation describing the puzzles current position,
(b) the permutation corresponding to a move sequence applied to the puzzle.
If we are careful in assigning these permutations to a puzzles position/move sequence we can
make it so that multiplying the permutations corresponding to the moves, gives the permutation of
the resulting position (Theorem 5.1.1)
Assume for all puzzles that both the moving pieces and home positions have been labelled by
numbers in [n].
Definition 5.1.1 — Puzzle Position → Permutation. For a given position (scrambling) of the
puzzle, the permutation corresponding to this position is α : Sn → Sn where
α(i) = j if the piece labelled i is in the position labelled j.
Definition 5.1.2 — Puzzle Move → Permutation. For a given move sequence applied to the
puzzle, the permutation corresponding to this move sequence is β : Sn → Sn where
β(i) = j if the piece in position labelled i moved to position labelled j.
Ppermutation α describes precisely how the pieces in the home (or solved) state configuration
were moved to produce the current configuration. Both of these definitions show how to construct64 Chapter 5. From Puzzles To Permutations
the function α or β which corresponds to a position/move, but we should really say a few words
about why this function is actually a permutation. That is, we want to observe α is one-to-one
and onto. To see this, notice in any scrambling of the pieces no position has more than one piece
occupying it, in other words, distinct pieces have gone into distinct positions. This means α is a
one-to-one map from [n] to [n], which is then necessarily onto. This observation suggests why α is
a permutation.
Theorem 5.1.1 — Multiplying Moves. Let α be the permutation corresponding to the current
position of the puzzle, and β1, β2, . . . βk be a move sequence applied to the puzzle which results
in a final position γ. Then
αβ1β2 ···βk = γ.
Proof: To see why this is true, consider any piece of the puzzle, say the piece labelled `. Then,
before the move sequence is applied, the piece ` starts in position x0 = α(`). As the moves are
applied one-by-one the ` piece moves to position x1, then to position x2, and so on, until it finally
ends up in position xk, where
x1 = β1(x0) = β1(α(`)) = (αβ1)(`)
x2 = β2(x1) = β2((αβ1)(`)) = (αβ1β2)(`)
.
.
.
xk = βk(xk−1) = βk((αβ1β2 ···βk−1)(`)) = (αβ1β2 ···βk)(`)
Therefore, γ(`) = xk = (αβ1β2 ···βk)(`) for every ` ∈ [n], and so γ = αβ1β2 ···βk. This proves the
theorem. 
Over the next few sections we will look at each puzzle individually.
5.2 Swap
Each arrangement of the numbers in the Swap Puzzle, say with n numbers, is a permutation of the
set [n] = {1,2,3,...,n}. For example, consider the following position of Swap with 6 numbers.
The permutation α : [6] → [6] we associate to this position is determined as follows. Since tile
number 1 is in box number 3, then α(1) = 3. Since tile 2 is in box 4, then α(2) = 4. Continuing in
this fashion we find α maps numbers 1 through 8 as follows.
α =

1 2 3 4 5 6
3 4 5 1 6 2 
or in cycle form α = (1 3 5 6 2 4).
Consider the move obtained by swapping the tiles in boxes 1 and 4. What permutation should
we use to represent this move? If we think of applying this move to the solved state of the puzzle,
for example:
then we can represent this move by the permutation β corresponding to the position it leaves
the puzzle in: β = (1 4).
Now imagine the puzzle was not in the solved state, and we were applying the 1, 4 swap. For
example, we apply the move as follows:5.2 Swap 65
How should we assign a permutation to this move? Well, the simplest way is to say it is just the
same move as above, ignoring the actual objects in the boxes. All that matters is that the contents
of box 1 and box 4 were switched. The permutation should then only depend on the boxes involved
and how the contents move between boxes, but is shouldn’t depend on what exactly is in the boxes.
This is the essence of Definition 5.1.2.
From now on, when we wish to describe a move, we can just state it by giving the corresponding
permutation. For example, the permutation (3 7) represents the move of switching the contents of
boxes 3 and 7.
Example 5.1 Consider the following sequence of moves in Swap.
The first move consists of swapping the contents of boxes 2 and 5 so it corresponds to the
permutation α1 = (2 5). The second move consists of swapping the contents of boxes 2 and 4 so
it corresponds to the permutation α2 = (2 4). The product α1α2 = (2 5)(2 4) = (2 5 4), which
is the permutation representing the move sequence as a whole, is precisely the permutation
corresponding to the final position.  
Example 5.2 Apply the move sequence τ1 = (3 5), τ2 = (1 2), τ3 = (2 5), τ4 = (1 4) to the
game of Swap with 6 objects, and draw the final position of the game board, assuming you
began with it in the solved state.
The move sequence corresponds to the single maneuver: α = τ1τ2τ3τ4 = (3 5)(1 2)(2 5)(1 4) =
(1 5 3 2 4), (Theorem 5.1.1 ) which means the resulting game board position is as follows.
We could have also applied the move sequences one-by-one to achieve the same result (here
we simply write the numbered tiles, as they appear on the game board, separated by vertical
bars | ):
1|2|3|4|5|6
τ1=(3 5)
−−−−−→ 1|2|5|4|3|6
τ2=(1 2)
−−−−−→ 2|1|5|4|3|6
τ3=(2 5)
−−−−−→ 2|3|5|4|1|6
τ4=(1 4)
−−−−−→ 4|3|5|2|1|6
 
Example 5.3 Write the permutation α = (1 5 3 7)(4 8 6) as a product of 2-cycles. (Hint: Solve
the corresponding Swap puzzle.)
The permutation α corresponds to the position
which we will simply write as 7|2|5|6|1|8|3|4. To solve the puzzle from this state we may do
the following:66 Chapter 5. From Puzzles To Permutations
α ⇒ 7|2|5|6|1|8|3|4
τ1=(1 5)
−−−−−→ 1|2|5|6|7|8|3|4
τ2=(3 7)
−−−−−→ 1|2|3|6|7|8|5|4
τ3=(4 8)
−−−−−→ 1|2|3|4|7|8|5|6
τ4=(5 7)
−−−−−→ 1|2|3|4|5|8|7|6
τ5=(6 8)
−−−−−→ 1|2|3|4|5|6|7|8 ⇒ ε.
This means ατ1τ2τ3τ4τ5 = ε, or α = τ
−1
5
τ
−1
4
τ
−1
3
τ
−1
2
τ
−1
1
. Therefore, we have found a
decomposition of α into 2-cycles:
α = (1 5 3 7)(4 8 6) = (6 8)(5 7)(4 8)(3 7)(1 5).
 
5.3 15-Puzzle
Imagine the tiles in the 15 puzzle mixed-up. Consider Figure 5.1c for example. Each tile was
moved from some numbered box (its home box) to some other numbered box: for example the tile
in box 1 moved to box 10, but the tile in box 5 stayed in box 5. Here we think of the empty space
as tile number 16, which we will often call the “empty tile".
(a) (b) (c)
Figure 5.1: The 15 Puzzle
We can write down the permutations describing each of the positions in 5.1 by using Definition
5.1.1.
(a) This puzzle is in the solved state, so no tiles have been moved. This corresponds to the
identity permutation ε. The array form of this permutation is
ε =

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
.
(b) In this puzzle the tiles in boxes 14 and 15 were switched. This corresponds to the permutation
(14 15). The array form of this permutation is

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 2 3 4 5 6 7 8 9 10 11 12 13 15 14 16 
.
(c) Tile 1 is now in box 10, so 1 7→ 10 for this permutation. Tile 10 is in box 8, so 10 7→ 8.
Continuing in this fashion we construct the cycle form of the corresponding permutation:
(1 10 8 12)(2 3)(4 14)(6 15 16)(7 11 13 9), where we omitted the 1-cycle (5). The array
form of this permutation is

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
10 3 2 14 5 15 11 12 7 8 13 1 9 4 16 6 
.5.4 Oval Track Puzzle 67
By the construction of the 15-Puzzle a legal move consists of swapping a tile with the empty
tile, provided it is adjacent to the empty tile. This means legal moves are 2-cycles, and move
sequences are products of 2-cycles.
Example 5.4 Consider the following sequence of moves in the 15-Puzzle.
The first move consists of moving the empty space from box 9 to 10 so it corresponds to the
permutation τ1 = (9 10). The second move consists of moving the empty space form box 10 to
6 so it corresponds to the permutation τ2 = (10 6).
The first position is given by α = (1 4)(2 3)(9 16)(15 10)(11 14)(12 13), the last position
is β = (1 4)(2 3)(6 10 15 9 16)(11 14)(12 13), and we have
ατ1τ2 = (1 4)(2 3)(9 16)(15 10)(11 14)(12 13)(9 10)(10 6)
= (1 4)(2 3)(6 10 15 9 16)(11 14)(12 13)
= β.
This provides an illustration of Theorem 5.1.1. 
5.4 Oval Track Puzzle
Since there are 20 moving disks on the Oval Track puzzle (Figure 5.2), each position/move can be
described as a permutation of [20] = {1,2,...,20}.
1 2 3 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
Figure 5.2: The Oval Track Puzzle.
Recall from Lecture 1, the basic legal moves of the oval track puzzle are R, R
−1
, and T. Where
R denotes a clockwise rotation of numbers around the track, moving each number one space,
R
−1denotes a counterclockwise rotation of the numbers around the track, and T denotes a rotation
of the turntable. See Figure 5.3.
The permutation corresponding to the legal moves R, R−1
, and T are as follows:
R = (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
R
−1 = (1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2)
T = (1 4)(2 3)68 Chapter 5. From Puzzles To Permutations
Note that T
−1 = T. This is due to the fact that spinning the turntable in either direction achieves
the same result.
(a) R = (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
(b) T = (1 4)(2 3)
Figure 5.3: Basic Moves R and T of Oval Track.
Example 5.5 Express, in cycle form, the permutations describing each of the positions in
Figure 5.4.
(a) (b)
Figure 5.4: Oval Track scramblings for Example 5.5.
(a) Disk 1 is in slot 4, disk 4 is in slot 6, disk 6 is in slot 5, disk 5 is in slot 2, disk 2 is in
slot 3, and disk 3 is in slot 1. All other disks are still in their home positions, so the
corresponding permutation is (1 4 6 5 2 3).
(b) Similar to part (a) we just follow where each disk ended up. The corresponding permuta￾tion is (1 5 13)(4 17 7 20 6).
(c)

Example 5.6 Apply each of the following move sequences to the solved-state Oval Track5.4 Oval Track Puzzle 69
puzzle and draw the resulting configuration of the disks on the puzzle.
(a) RT R−1
(b) R
−4T R2T R−1
(a) If you have a physical puzzle, or one of the virtual ones linked to from the course website,
then you can actually perform the move sequence and attain the resulting configuration.
We can also do this using the permutation representations of the move sequence:
RT R−1 = (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)(1 4)(2 3)R
−1
= (1 3)(4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)R
−1
= (1 3)(4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
(1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2)
= (1 2)(3 20)
The resulting position is drawn below.
(b) Multiplying two 20-cycles and a 4-cycle in part (a) was not technically difficult, it was
just tedious. This product R
−4T R2T R−1 would be very tedious, and the actual calculation
wouldn’t be too enlightening. No mathematician would do the calculation by hand, so we
should do what any mathematician would do, have a computer do the calculation. We’ll
use SageMath to do this.
In [1]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20)")
T=S20(" (1 ,4)(2 ,3) ")
R^( -4)* T*R ^(2)* T*R^( -1)
Out[1]: (1 ,18 ,15 ,12 ,9 ,6 ,4 ,2 ,19 ,16 ,13 ,10 ,7 ,20 ,17 ,14 ,11 ,8)
Later on we will discuss in detail the commands used above, and what each line of code
does (you may be able to figure this out for yourself). For now, we have our answer to the
question, R
−4T R2T R−1
corresponds to the permutation returned by SageMath and the
puzzle looks like this
70 Chapter 5. From Puzzles To Permutations
5.5 Hungarian Rings
There are 38 moving disks in the (numbered) Hungarian Rings puzzle (Figure 5.5), so each
position/move can be described as a permutation of [38] = {1,2,...,38}.
Figure 5.5: Hungarian Rings - numbered version.
Recall from Lecture 1, the basic legal moves of the Hungarian Rings puzzle are R and L, where
R denotes a clockwise rotation of numbers around the right-hand ring (each number moves one
space), L denotes a clockwise rotation of numbers around the left-hand ring.
The permutation corresponding to each of the legal moves R and L are:
R = (1 38 37 36 35 6 34 33 32 31 30 29 28 27 26 25 24 23 22 21)
L = (1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2)
R
−1
and L−1
correspond to the inverses of these permutations.
Example 5.7 Express, in cycle form, the permutations describing each of the positions in
Figure 5.6.
(a) (b)
Figure 5.6: Hungarian Rings scramblings.
(a) We simply follow where each disk has been moved. The corresponding permutation is
(1 36 4 38).
(b) Following where each disk has been moved, the corresponding permutation is(3 37 30 11)(20 21).
(c)

Example 5.8 For each of the following move sequences, which were applied to the solved-state
Hungarian Rings puzzle, draw the resulting configuration of the disks on the puzzle.
(a) R
−1LR5.6 Rubik’s Cube 71
(b) L
5R
5L
−5R
−5
(a) If you have a physical puzzle, or one of the virtual ones linked to from the course website,
then you can actually perform the move sequence and attain the resulting configuration.
We can also do this using the permutation representations of the move sequence, by
multiplying the permutations. We’ll use SageMath to do the computations.
In [2]: S38 = SymmetricGroup (38)
L=S38("(1 ,20 ,19 ,18 ,17 ,16 ,15 ,14 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,5 ,4 ,3 ,2)")
R=S38("(1 ,38 ,37 ,36 ,35 ,6 ,34 ,33 ,32 ,31 ,30 ,29 ,28 ,27 ,26 ,25 ,24 ,23 ,22 ,21) ")
R^( -1)* L*R
Out[2]: (2 ,38 ,20 ,19 ,18 ,17 ,16 ,15 ,14 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,34 ,5 ,4 ,3)
The resulting position is drawn below.
(b) Again, we’ll use SageMath to do the desired calculation.
In [3]: L^5*R^5* L^( -5)*R^( -5)
Out[3]: (1 ,25)(6 ,11)
The resulting position is drawn below.

5.6 Rubik’s Cube
To keep track of how the pieces of the cube move around, and to be able to describe movements
and positions by permutations, we label each of the facets with numbers. For the 2×2×2 cube
there are 24 facets, whereas for the 3×3×3 cube there are 54, but only 48 actually move. The 6
centres can be thought of as remaining fixed (though they can rotate, but this is only noticeable if
the sticker has an image on it).72 Chapter 5. From Puzzles To Permutations
5.6.1 2×2×2 Cube
We label the facets of the Pocket Cube as shown in Figure 5.7. Figure 5.8 shows the labeling on an
actual cube.
Figure 5.7: Facet labeling on the Pocket cube.
(a) Labeling on Up (blue),
Right (yellow), Front (red)
faces
(b) Labeling on Down
(green), Back (orange), Left
(white) faces
Figure 5.8: The labeling of the facets of the Pocket Cube.
We associate permutations to positions and moves in the usual way (Definitions 5.1.1 and 5.1.2).
The basic moves of the Rubik’s cube are R, L, U, D, F, B, and their inverses. Each one denotes a
clockwise quarter turn of the corresponding face. See Lecture 1 for a thorough discussion of this
notation.
The permutation corresponding to each of the basic moves of the Pocket Cube are:
R = (13 14 16 15)(10 2 19 22)(12 4 17 24)
L = (5 6 8 7)(3 11 23 18)(1 9 21 20)
U = (1 2 4 3)(9 5 17 13)(10 6 18 14)
D = (21 22 24 23)(11 15 19 7)(12 16 20 8)
F = (9 10 12 11)(3 13 22 8)(4 15 21 6)
B = (17 18 20 19)(1 7 24 14)(2 5 23 16)
R
−1
, L−1
, U−1
, D−1
, F−1
, D−1
correspond to the inverses of these permutations.5.6 Rubik’s Cube 73
5.6.2 3×3×3 Cube
As we described in Lecture 1, we label the facets of the Rubik’s cube as shown Figure 5.9. Figure
5.10 shows the labeling on an actual cube.
Figure 5.9: Facet labeling on the Rubik’s cube.
(a) Labeling on Up, Right, Front
faces
(b) Labeling on Down, Back,
Left faces
Figure 5.10: The labeling of the facets of Rubik’s cube.
The permutation corresponding to each of the basic moves of the Rubik’s cube are:
R = (25 27 32 30)(26 29 31 28)(3 38 43 19)(5 36 45 21)(8 33 48 24)
L = (9 11 16 14)(10 13 15 12)(1 17 41 40)(4 20 44 37)(6 22 46 35)
U = (1 3 8 6)(2 5 7 4)(9 33 25 17)(10 34 26 18)(11 35 27 19)
D = (41 43 48 46)(42 45 47 44)(14 22 30 38)(15 23 31 39)(16 24 32 40)
F = (17 19 24 22)(18 21 23 20)(6 25 43 16)(7 28 42 13)(8 30 41 11)
B = (33 35 40 38)(34 37 39 36)(3 9 46 32)(2 12 47 29)(1 14 48 27)
R
−1
, L−1
, U−1
, D−1
, F−1
, D−1
correspond to the inverses of these permutations.
Uncovering the secrets of the cube will involve playing around with these permutations, and
our playground will be SageMath . Here is how we can input the permutations for the Rubik’s cube
into SageMath.74 Chapter 5. From Puzzles To Permutations
In [4]: S48 = SymmetricGroup (48)
R=S48(" (25 ,27 ,32 ,30)(26 ,29 ,31 ,28)(3 ,38 ,43 ,19)(5 ,36 ,45 ,21)(8 ,33 ,48 ,24) ")
L=S48(" (9 ,11 ,16 ,14)(10 ,13 ,15 ,12)(1 ,17 ,41 ,40)(4 ,20 ,44 ,37)(6 ,22 ,46 ,35) ")
U=S48(" (1 ,3 ,8 ,6)(2 ,5 ,7 ,4)(9 ,33 ,25 ,17)(10 ,34 ,26 ,18)(11 ,35 ,27 ,19) ")
D=S48(" (41 ,43 ,48 ,46)(42 ,45 ,47 ,44)(14 ,22 ,30 ,38)(15 ,23 ,31 ,39)(16 ,24 ,32 ,40) ")
F=S48(" (17 ,19 ,24 ,22)(18 ,21 ,23 ,20)(6 ,25 ,43 ,16)(7 ,28 ,42 ,13)(8 ,30 ,41 ,11) ")
B=S48(" (33 ,35 ,40 ,38)(34 ,37 ,39 ,36)(3 ,9 ,46 ,32)(2 ,12 ,47 ,29)(1 ,14 ,48 ,27) ")
We could then, for instance, see what the move sequence RU does to the cube.
In [5]: R*U
Out[5]: (1 ,3 ,38 ,43 ,11 ,35 ,27 ,32 ,30 ,17 ,9 ,33 ,48 ,24 ,6)(2 ,5 ,36 ,45 ,21 ,7 ,4)
(8 ,25 ,19)(10 ,34 ,26 ,29 ,31 ,28 ,18)
We can easily “eyeball" the order of this permutation, it is lcm(15,7,3) = 105. This gives us a
glimpse into the kind of questions we can easily answer through computation.
Also, since RU consists of a 15-cycle, a 3-cycle and two 7-cycles, raising it to the power of 15
would get rid of the 15- and 3-cycles, and would leave us with some 7-cycles.
In [6]: (R*U )^15
Out[6]: (2 ,5 ,36 ,45 ,21 ,7 ,4)(10 ,34 ,26 ,29 ,31 ,28 ,18)
This means we can move fewer pieces by taking powers of some move sequences. We’ll later
how this is an effective strategy for solving these puzzles.
5.7 Exercises
1. Swap Puzzle arrangements into cycle notation. For each of the following scramblings of
the tiles in Swap, express them as permutations in Sn using cycle notation.
(a)
(b)
(c)
(d)
(e)
2. Swap Puzzle arrangements from cycle notation. For each of the following permutations,
given in cycle form, draw the corresponding scrambling of the tiles on the Swap puzzle.
(a) (1 5 3 8)(2 4 7)
(b) (3 7 4 10 6 5 8)
(c) (1 12)(2 11)(3 10)(5 6 7)
3. Swap Puzzle arrangements and moves in cycle notation. In each part (a) - (c) below, a
sequence of moves has been applied to a scrambling of the tiles in Swap. Do the following:
(i) Express the starting position α as a permutation in cycle notation.
(ii) Express each move τi as a 2-cycle.
(iii) Express the whole move sequence as a permutation in cycle notation.5.7 Exercises 75
(iv) Express the final position β as a permutation in cycle notation and show that ατ1 ··· τn =
β.
(a)
(b) 5|4|2|8|1|3|6|7
τ1 −→ 5|2|4|8|1|3|6|7
τ2 −→ 8|2|4|5|1|3|6|7
τ3 −→ 1|2|4|5|8|3|6|7
τ4 −→ 1|2|4|5|8|6|3|7
(c) 5|10|4|1|6|7|2|3|8|9
τ1 −→ 5|10|4|1|7|6|2|3|8|9
τ2 −→ 1|10|4|5|7|6|2|3|8|9
τ3 −→ 1|9|4|5|7|6|2|3|8|10
τ4 −→ 1|9|4|7|5|6|2|3|8|10 τ5 −→ 1|2|4|7|5|6|9|3|8|10
4. Swap Puzzle move sequence in cycle notation. For each move sequence α given below,
express it as a permutation in cycle form.
(a)
(b)
5. Decomposing a permutation into 2-cycles. Write the permutation α = (1 2 3) as a product
of 2-cycles. (Hint: Solve the corresponding Swap puzzle.)
6. Decomposing a permutation into 2-cycles. Write the permutation α = (1 2 8 3 7)(4 5 6)
as a product of 2-cycles. (Hint: Solve the corresponding Swap puzzle.)
7. Decomposing a permutation into 3-cycles. Write the permutation α = (1 2)(3 4) as a
product of 3-cycles. (Hint: Solve the corresponding Swap puzzle, under the variation where
the legal moves are now 3-cycles.)
8. Decomposing a permutation into 3-cycles. Write the permutation α = (1 2 8 3 7)(4 5 6)
as a product of 3-cycles. (Hint: Solve the corresponding Swap puzzle, under the variation
where the legal moves are now 3-cycles.)
9. 15-Puzzle arrangements into cycle notation. Express each of the following scramblings
of the 15-puzzle as a permutation in cycle form.
(a) (b) (c)
10. 15-Puzzle arrangements from cycle notation. For each of the following permutations,
given in cycle form, draw the corresponding scrambling of the tiles on the 15 puzzle.
(a) (6 7 11 10)
(b) (1 5 3 10 15 2 14 12 11 6 7 4)(9 16)
(c) (2 10 13 5)(1 3)(7 8 9)
11. 15-Puzzle move sequence in cycle notation. For the move sequence α given below, express
it as a permutation in cycle form.76 Chapter 5. From Puzzles To Permutations
12. 15-Puzzle arrangements and moves in cycle notation. In each part (a) - (c) below, a
sequence of moves has been applied to a scrambling of the tiles in the 15-Puzzle. Do the
following:
(i) Express the starting position α as a permutation in cycle notation.
(ii) Express each move τi as a 2-cycle.
(iii) Express the whole move sequence as a permutation in cycle notation.
(iv) Express the final position β as a permutation in cycle notation and show that ατ1 ··· τn =
β.
(a)
(b)
13. Oval Track Puzzle arrangements into cycle notation. Express, in cycle form, the permu￾tation describing each of the positions of the Oval Track puzzle drawn below.
(a) (b)
14. Oval Track Puzzle move sequence in cycle notation. Express the move sequence α given
in the diagram below as a permutation in cycle notation.5.7 Exercises 77
15. For each of the following move sequences, which are applied to the solved-state Oval Track
puzzle, draw the resulting configuration of the disks on the puzzle.
(a) T
2
(b) R
19
(c) R
−1T R
(d) T R−1T R
16. Hungarian Rings arrangements into cycle notation. Express, in cycle form, the permuta￾tion describing each of the positions of the Hungarian Rings puzzle drawn below.
(a) (b)
17. Hungarian Rings move sequence in cycle notation. Express the move sequence α given
in the diagram below as a permutation in cycle notation.
18. For each of the following move sequences, which are applied to the solved-state Hungarian
Rings puzzle, draw the resulting configuration of the disks on the puzzle.
(a) R
2
(b) RL
(c) L
5R
5L
−5R
−6LR6L
5R
−5L
−5R
−1L
−1R (use SageMath to compute this)
19. Rubik’s cube arrangements into cycle notation. Express, in cycle form, the permutation
corresponding to the position of the Rubik’s cube where the cubies have been moved and
positioned as follows:
• the UR cubie is in the bu cubicle (recall this means the U face of the UR cubie is in the
B face of the bu cubicle)
• the UB cubie is in the lu cubicle
• the UL cubie is in the ur cubicle.
(Look back at Chapter 1 where the terms “cubie" and “cubicle" are discussed.)6. Permutations: Products of 2-Cycles
To solve a permutation puzzle one must determine how the permutation representing the current
position of the pieces can be decomposed into permutations representing the legal moves. It is this
“decomposition problem" that will be the focus of our attention in many lectures to come.
In this lecture we will show every permutation can be decomposed as a product of 2-cycles. We
will also see how this is connected to the solvability of the Swap puzzle.
It is standard terminology to refer to a 2-cycle as a transposition. So the title of this lecture
could also be Permutations: Products of Transpositions.
6.1 Introduction
Consider the permutation α = (1 3 5)(2 4 7 6 8). We would like to show it can be written as a
product to 2-cycles.
For this permutation we consider the corresponding scramble of the Swap puzzle on 8 objects.
To solve the puzzle recall the objective is to restore all numbered tiles to their home positions where
the only legal moves are to swap tiles from any two boxes (i.e. a 2-cycle). One possible play is as
follows.80 Chapter 6. Permutations: Products of 2-Cycles
The dotted arrows indicate the two tiles that are about to be swapped.
The permutations corresponding to the moves are:
τ1 = (1 3), τ2 = (2 4), τ3 = (3 5), τ4 = (4 7), τ5 = (6 8), τ6 = (7 8)
and so the game-play corresponds to the composition: ατ1τ2τ3τ4τ5τ6 = ε. It follows that
α = τ
−1
6
τ
−1
5
τ
−1
4
τ
−1
3
τ
−1
2
τ
−1
1
(6.1)
= (7 8)(6 8)(4 7)(3 5)(2 4)(1 3) (6.2)
This is precisely what we wanted, α is written as a product of 2-cycles.
Exercise 6.1 Write the permutation β = (1 5 3 4 2) as a product of 2-cycles. Do this by using
β as the starting scramble of the Swap puzzle, then solving the puzzle and keeping track of your
moves as 2-cycles.
Answer on page 82 
6.2 Product of 2-Cycles
There doesn’t seem to be anything special about the particular permutation α that we used in the
last example. Our strategy was to just move the numbers, one at a time, to their home positions,
and we chose to do this in increasing order, though we could have done it an any order we wanted.
This means we should be able to write any permutation as a product of 2-cycles. This is such
an important observation that will state it as a theorem (a complete proof is given below).
Theorem 6.2.1 — Product of 2-Cycles. Every permutation in Sn,n > 1, can be expressed as a
product of 2-cycles.
Playing with the Swap puzzle showed us intuitively why the theorem is true, it also gave us a
method for finding such a decomposition into 2-cycles. As quick as it was to find a decomposition,
we will require a much quicker method: a way to “eyeball" the decomposition. Having to draw
a Swap game each time we want to compute a decomposition into 2-cycles would be too time
consuming. So how can we do this even more quickly?
Well, consider a 5-cycle: β = (1 5 3 4 2). By direct computation we can check
(1 5 3 4 2) = (1 5)(1 3)(1 4)(1 2).6.3 Solvability of Swap 81
Check the product for yourself!
In general we have the following “quick" method for decomposing cycles.
Decomposition of a k-cycle into 2-cycles:
A k-cycle (a1 a2 a3 ... ak−1 ak) in Sn can be decomposed into 2-cycles as follows:
(a1 a2 a3 ... ak−1 ak) = (a1 a2)(a1 a3)···(a1 ak−1)(a1 ak)
Using this method of decomposing k-cycles we can easily decompose any permutation by first
writing the permutation as a product of disjoint cycles, and then decomposing each cycle into
2-cycles. For example, consider α = (1 3 5)(2 4 7 6 8) again:
α = (1 3 5)(2 4 7 6 8) = (1 3)(1 5)(2 4)(2 7)(2 6)(2 8).
We now give a formal proof of Theorem 6.2.1.
Proof: First note that the identity can be expressed as (1 2)(1 2), and so it is a product of 2-cycles.
(This is why we needed n > 1 in the statement of the theorem.) Now consider any permutation
α ∈ Sn. We already know we can write α as a product of disjoint cycles:
α = (a1 a2 ... ar)(b1 b2 ... bs)···(c1 c2 ... ct)
and each cycle can be decomposed into 2-cycles as we observed above:
α = (a1 a2)(a1 a3)···(a1 ar)(b1 b2)(b1 b3)···(b1 bs)···(c1 c2)(c1 c3)···(c1 ct).
This completes the proof. 
6.3 Solvability of Swap
A permutation α is obtainable as a puzzle position of Swap if and only if it can be expressed as a
product of legal moves (2-cycles):
α = τ
−1
k
··· τ
−1
2
τ
−1
1
.
See Equation 6.1 for example. In other words, if α is the current position then the moves required
to solve the puzzle are τ1, τ2,..., τk.
Since every permutation is a product of 2-cycles (Theorem 6.2.1), then as a consequence we
have the following:
Corollary 6.3.1 The Swap puzzle, where the legal moves consist of swapping contents of any
two boxes, is solvable from any configuration. In other words, all permutations in Sn can be
obtained in the Swap puzzle on n-objects.
This is the first in a series of solvability results we wish to obtain for all the puzzles.
Notice, the result only applies to Swap when the legal moves are swapping contents of any two
boxes. We could consider other variations of Swap, for example:
Variation 1: Legal moves consist of swapping the contents of any other box with the object in box
1.
For this variation, a permutation α is obtainable as a position if and only if it can be written as
a product of 2-cycles of the form: (1,a) for a ∈ [n]. See Exercises 4 and 5.
Variation 2: Legal moves consist of picking any 3 boxes and cycling their contents either to the
left or right (i.e. 3-cycles).
For this variation, a permutation α is obtainable as a position if and only if it can be written as
a product of 3-cycles. See Exercises 6 and 7.82 Chapter 6. Permutations: Products of 2-Cycles
6.4 Exercises
1. For the permutation α = (1 8 4)(2 3 7)(5 6) write it as a product of 2-cycles, first by: (1)
Thinking of it as a scrambling of the Swap puzzle, and solving the puzzle as we did in the
example in section 6.1, then by (2) Using the method developed in Section 6.2. Which
method was the quickest to use?
2. Write the 3-cycle (1,2,3) as a product of two 2-cycles.
3. For each of the following permutations, in cycle form, write it as a product of 2-cycles.
(a) (1 6 4 3)
(b) (2 4 7)(3 9 5 8)
(c) (1 9 2 5)(3 11 4)(6 7)
(d) (1 2 3 4 5)(6 7 8 9 10)
4. Using only the legal moves in Variation 1 of Swap described in Section 6.3, solve the puzzle
with initial scrambling α = (1 3 5)(2 4 7 6 8).
5. Show for Variation 1 of Swap described in Section 6.3 that every permutation in Sn is
obtainable as a puzzle position. This is equivalent to showing that every permutation in Sn
can be written as a product of 2-cycle of the form (1,a) where a ∈ [n]. (Hint: First show
every cycle can be written as a product of such transpositions.)
6. Consider only the legal moves in Variation 2 of Swap described in Section 6.3. Determine
which of the following scramblings are solvable.
(a) α = (1 3 5)(2 4 7 6 8)
(b) β = (1 6 2)(3 4 8)(5 7)
(Hint: Play the game of Swap with these configurations and see if you can solve it.)
7. Discover a solvability condition for Variation 2 of Swap described in Section 6.3. That is,
determine the conditions a permutation α must satisfy in order for it to be obtainable as a
puzzle configuration.
(Given the current tools we have developed so far, this still may be a difficult problem. We’ll
soon develop the tools needed to completely solve this problem. However, for now see if you
can discover a solvability condition.)
Answers to in-chapter exercises:
Exercise 6.1: There are many correct answers to this question. One possible product is
(4 5)(3 4)(2 5)(1 5). Another one is (1 5)(1 3)(1 4)(1 2).7. Permutations: The Parity Theorem
In this lecture we introduce one of the most important theorems about permutations: The Parity
Theorem. We saw that every permutation can be expressed using 2-cycles (Theorem 6.2.1). We
now explore the question of how many 2-cycles are needed.
7.1 Introduction
In Lecture 6 we saw that the permutation α = (1 3 5)(2 4 7 6 8) can be written as a product of
2-cycles in two different ways:
α = (7 8)(6 8)(4 7)(3 5)(2 4)(1 3)
= (1 3)(1 5)(2 4)(2 7)(2 6)(2 8).
The first decomposition we obtained by considering the permutation as an initial scrambling of
the tiles of Swap, then solving the puzzle by restoring each tile to its home position in increasing
order, beginning with tile 1. The second decomposition was obtained using our “quick” method
for decomposing permutations. There are many more possible decompositions of α, here are two
more:
α = (1 6)(6 7)(1 4)(1 7)(2 8)(4 8)(1 5)(3 5)
= (1 3)(1 2)(1 4)(1 2)(1 5)(1 2)(1 7)(1 6)(1 8)(1 2)
The number of 2 cycles used in the decompositions are not always the same. In the four
decompositions we have, two use 6 , one uses 8, and one uses 10. Even though the number of
2-cycles isn’t constant, it always seems to be of the same parity, in this case it is even.
This observation is true in general. Before we state the general result we first better explain
the term parity. We say for an integer m that its parity is even if m is a multiple of 2. If m is not
a multiple of 2 then its parity is odd. Perhaps the term “parity” is not familiar, but certainly the
distinction between an odd number and an even number is. Much in the same way that integers84 Chapter 7. Permutations: The Parity Theorem
come in one of two types, based on parity: odd or even, permutations also come in one of two types,
based on the parity of a permutation. This is what the next theorem says.
Theorem 7.1.1 — The Parity Theorem. If a permutation α can be expressed as a product of an
even number of 2-cycles, then every decomposition of α into 2-cycles must have an even number.
On the other hand, if α can be expressed as a product of an odd number of 2-cycles, then every
decomposition of α into 2-cycles must have an odd number. In symbols, if
α = τ1τ2 ··· τr = σ1σ2 ···σs
where the τi’s and σi’s are 2-cycles, then r and s are both even or both odd.
We will give two different proofs of this theorem in the next few sections. But for now lets look
at some of the consequences of this theorem.
The Parity Theorem tells us that it makes sense to define the parity of a permutation: decompose
it as a product of 2-cycles in any way, then the parity we assign to the permutation is just the parity
of the number of 2-cycles that were used, either odd or even. Here is the formal definition.
Definition 7.1.1 — Even and Odd Permutation. A permutation that can be expressed as a
product of an even number of 2-cycles is called an even permutation. A permutation that can
be expressed as a product of an odd number of 2-cycles is called an odd permutation.
This definition of parity may not seem to exciting, but just wait. This will allow us to answer
important question about the puzzle, and sometimes allow us to abandon quests that are impossible.
Definition 7.1.2 — Sign of a Permutation. The sign of a permutation α is defined to be 1 if α
is even, or −1 if α is odd.
sign(α) = (
1 if α is an even permutation,
−1 if α is an odd permutation.
Parity of the Identity:
The identity permutation ε is an even permutation.
This follows from ε = (1 2)(1 2), which is a decomposition into and even number of 2-cycles.
In [1]: S5= SymmetricGroup (5)
a=S5("()") #the identity permutation in cycle form .
a. sign ()
Out[1]: 1
Parity of a Cycle:
An m-cycle, (a1 a2 ... am) is an even permutation if m is odd, and it is an odd permutation if m is
even. (Confusing, I know.)
This follows from the fact that an m-cycle can be expressed as a product of m−1 transpositions:
(a1 a2 ... am) = (a1 a2)(a1 a3)···(a1 am).7.2 Variation of Swap 85
If m is even then m−1 is odd, and vice-versa. This is why the parity of the permutation is opposite
to the parity of the length of the cycle.
In [2]: S5= SymmetricGroup (5)
a=S5("(1 ,2 ,3 ,4)"); a. sign ()
Out[2]: -1
In [3]: b=S5("(1 ,2 ,3 ,4 ,5)"); b. sign ()
Out[3]: 1
Example 7.1 Determine whether the following permutations are odd or even.
(a) (1 5 11 6 7 3) (b) (1 4 12)(3 8 5 9)(7 10)
(a) This is a 6-cycle and therefore an odd permutation since it can be written as a product of
5 transpositions:
(1 5 11 6 7 3) = (1 5)(1 11)(1 6)(1 7)(1 3).
In [4]: S11 = SymmetricGroup (11)
a=S11("(1 ,5 ,11 ,6 ,7 ,3)"); a. sign ()
Out[4]: -1
(b) Writing each cycle as a product of transpositions we have:
(1 4 12)(3 8 5 9)(7 10) = (1 4)(1 12)(3 8)(3 5)(3 9)(7 10).
Since (1 4 12)(3 8 5 9)(7 10) can be written as the product of 6 transpositions, it follows that it
is even.
In [5]: S12 = SymmetricGroup (12)
b=S12(" (1 ,4 ,12)(3 ,8 ,5 ,9)(7 ,10) "); b. sign ()
Out[5]: 1

7.2 Variation of Swap
In Lecture 6 we considered the following variation on the legal moves of Swap.
Variation: Legal move is to pick any 3 boxes and cycle their contents either to the left or right.
For this variation, a permutation corresponding to a scrambling of the tiles is solvable if and
only if it can be expressed as a product of 3-cycles (i.e. the legal moves). Since 3-cycles are even
permutations, and products of even permutations are even (see Exercise 5) then any product of
3-cycles must be an even permutation. This means an odd permutation of Swap is not solvable
under this variation of the legal moves.
For example, the scrambling86 Chapter 7. Permutations: The Parity Theorem
is not solvable. This corresponds to the permutation α = (1 3 5 4 7 6 8 2) which is an odd
permutation.
Note what happened here. By simply observing that α is an odd permutation we immediately
knew to abandon any quest to solve the puzzle. To do otherwise would be pointless. This provides
a glimpse into how we will be using the Parity Theorem to investigate the solvability of puzzles.
7.3 Proof of the Parity Theorem
In this section we provide two different proofs of the Parity Theorem. However, rather than proving
the Parity Theorem directly we will prove another result (Proposition 7.3.2), from which the Parity
Theorem follows. While reading this section, keep in mind we cannot assume that the Parity
Theorem is true (yet), since this is what we are trying to prove.
Consider the following Proposition.
Proposition 7.3.1 Any expression for the identity permutation ε as a product of transpositions
uses an even number of them. That is, if
ε = τ1τ2 ··· τm
where the τi’s are transpositions, then m is an even integer.
Before considering why this is true, let’s see how the Parity Theorem is a consequence of this
Proposition. Suppose τ1τ2 ··· τr and σ1σ2 ···σs are two decompositions of a permutation α into
2-cycles. Then
ε = αα−1 = (τ1τ2 ··· τr)(σ1σ2 ···σs)
−1 = τ1τ2 ··· τrσ
−1
s
···σ
−1
2 σ
−1
1
is a decomposition of ε into r +s transpositions. If Proposition 7.3.1 is true, then r +s must be
even, from which it follows that r and s have the same parity. Therefore the Parity Theorem 7.1.1 is
true.
Therefore, in order to prove the Parity Theorem it is sufficient to prove Proposition 7.3.1. But
how do we know Proposition 7.3.1 is true? Well, one way is to prove the next proposition.
Proposition 7.3.2 If there is an expression τ1τ2 ··· τm for the identity permutation ε that uses m
transpositions, then there is an expression for ε that uses m−2 transpositions.
Again, before considering why Proposition 7.3.2 is true, let’s see how we can use it to prove
Proposition 7.3.1. Let’s assume to the contrary that it was possible to have an expression τ1τ2 ··· τm
for ε where m is odd. Then, assuming Proposition 7.3.2 is true, we could get an expression using
m − 2 transpositions (which is still an odd number of transpositions). We could keep applying
Proposition 7.3.2, reducing the number of transpositions by 2 each time, until we end up with an
expression for ε using only one transposition. But this is impossible since a single transposition is
not equal to the identity (the two numbers in the cycle would not be fixed by the permutation). The
fact that we get something impossible from the assumption that an expression for ε exists that uses
an odd number of transpositions forces us to conclude that Proposition 7.3.1 is true.
To summarize we have
Proposition 7.3.2 ⇒ Proposition 7.3.1 ⇒ Theorem 7.1.1
So it suffices to prove Proposition 7.3.2. This is the proof will focus on here. We will provide
two completely different proofs, one will be algebraic in nature and will involve playing around
with the cycle decomposition of permutations (this is the classic proof), the other will be a little
more tactile and has a game-like feel to it (this proof is due to John O. Kiltinen).7.3 Proof of the Parity Theorem 87
7.3.1 Proof 1 of Proposition 7.3.2
The rough idea of what we will do is the following: first pick the right-most occurrence of any
number appearing in the decomposition into transpositions. Then we will push this number to the
left through the transpositions, while transforming the transpositions at the same time, until we
eventually get two transpositions that cancel.
Before giving a formal proof let’s look at an example. The product of the following 12
transpositions is the identity. Check for yourself!
ε = (1 2)(1 3)(1 4)(1 6)(1 5)(3 4)(3 5)(2 5)(2 3)(1 5)(2 6)(2 4) (7.1)
We will transform this product into a product of only 10 transpositions, which still represents
the identity. Choose a number appearing in any transposition. We’ll choose 3. Find the right-most
transposition containing this number. In this case it would be the transposition (2 3) (the ninth one
in the product). We now want to push 3 to the left, so in this product we replace (2 5)(2 3) with the
equivalent permutation (3 5)(2 5). A quick way to see this is equivalent is to use our decomposition
fact for 3-cycles: (a b c) = (a b)(a c). Using this we have (2 5)(2 3) = (2 5 3) = (5 3 2) = (3 5)(2 5).
ε = (1 2)(1 3)(1 4)(1 6)(1 5)(3 4)(3 5)(3 5)(2 5)(1 5)(2 6)(2 4).
Now we can replace (3 5)(3 5) with ε,
ε = (1 2)(1 3)(1 4)(1 6)(1 5)(3 4)(2 5)(1 5)(2 6)(2 4),
which is an expression using 2 fewer transpositions than we started with.
Sometimes it may take a few more steps, for example if we decided to use 5 instead of 3, we
would have proceeded as follows: Find the right-most transposition containing this number in
Equation (7.1). In this case it would be the transposition (1 5). We now want to push 5 to the left,
so in this product we replace (2 3)(1 5) with the equivalent permutation (1 5)(2 3), since disjoint
cycle commute.
ε = (1 2)(1 3)(1 4)(1 6)(1 5)(3 4)(3 5)(2 5)(1 5)(2 3)(2 6)(2 4)
Next replace (2 5)(1 5) with (1 5)(1 2) (since (2 5)(1 5) = (5 2)(5 1) = (5 2 1) = (1 5 2) =
(1 5)(1 2)):
ε = (1 2)(1 3)(1 4)(1 6)(1 5)(3 4)(3 5)(1 5)(1 2)(2 3)(2 6)(2 4),
then replace (3 5)(1 5) with (1 5)(1 3)
ε = (1 2)(1 3)(1 4)(1 6)(1 5)(3 4)(1 5)(1 3)(1 2)(2 3)(2 6)(2 4).
Since (3 4) and (1 5) commute, the two (1 5)’s would cancel and we get:
ε = (1 2)(1 3)(1 4)(1 6)(3 4)(1 3)(1 2)(2 3)(2 6)(2 4),
which is an expression using 2 fewer transpositions than we started with.
With these two examples behind us, we now give the formal proof.
Proof of Proposition 7.3.2:
Choose a number a that appears in the transposition τm. Since (i j) = (j i) for any transposition
(i j), the product τm−1τm can be expressed in one of the following ways as shown on the left:
(a b)(a b) = ε
(a c)(a b) = (a b)(b c)
(c d)(a b) = (a b)(c d)
(b c)(a b) = (a c)(c b)88 Chapter 7. Permutations: The Parity Theorem
If the first case occurs we may delete τm−1τm in the original product and obtain a product for ε using
m−2 transpositions. In the other three cases we replace the form τm−1τm with what appears on the
right to obtain a new product of m transpositions that is still the identity, but where the right-most
occurrence of a has now moved one 2-cycle to the left. We now repeat the process, where at each
stage either we cancel two 2-cycles (and we’re done), or we form a new product where a has moved
another 2-cycle to the left. This process must terminate with a product of (m−2) transpositions
equal to the identity, because otherwise we have a product of m transpositions equal to the identity
in which the only occurrence of a is in the left-most 2-cycle, and such a product does not fix a
whereas the identity does. 
This completes the proof of Proposition 7.3.2, and therefore the proof of the Parity Theorem
too.
7.3.2 Proof 2 of Proposition 7.3.2
We now present a more tactile proof of Proposition 7.3.2 which is due to John O. Kiltinen (see
[Kil03]).
Let’s reinterpret what the Proposition says in terms of the Swap puzzle. Suppose that you start
with the Swap puzzle in the solved state. Now imagine you do a sequence of swaps at random, not
paying particular attention to what you are doing. After doing this for a while, you then decide to
put everything back in its proper place. In other words you produce a sequence of transpositions
that equals ε. If you count the total number transpositions you used Proposition 7.3.1 states this
number must be even. Try this a few times for yourself.
Now imagine your friend shows you a sequence of transpositions that they used to produce ε.
Is it possible for you to do better than your friend and produce another such sequence that uses two
fewer transpositions? Proposition 7.3.2 says the answer is yes, and what we’ll do here is describe a
method to produce the shorter sequence, which can be done in real-time.
Let’s call your friend Alice. Imagine two copies of Swap stacked on top of each other, the top
is Alice’s board and the bottom is yours. We’ll colour Alice’s tiles green and yours blue, just to
make it clear whose is whose.
As Alice applies her transpositions, we will match/modify her moves, but in the end we will use
two fewer. Let’s see an example of how we can do this.
Suppose Alice’s move sequence is
(3 7)(4 5)(1 3)(2 7)(3 8)(1 5)(2 6)(3 7)(2 6)(2 3)(1 4)(1 5)(1 7)(1 8).
(Verify this is equal to ε.) The means Alice’s first move is (3 7). This will be the first move we
don’t do, but we will make a note that Alice moved tile 3 out of its home location, therefore she
will eventually have to move it back. When the time comes for her to move it back we’ll skip this
move too, and these will be the two moves we skip. To focus our attention on box 3 we shade the
background in the following figures. Therefore, after her first move, we don’t make a move, and
the game board looks as follows.7.3 Proof of the Parity Theorem 89
We’ve added a tag (dark square) to the corner of the box which contains tile 3. We’ll need to
keep an eye on the box containing Alice’s tile number 3 (call it the tagged box). The strategy we’ll
follow is that we only want to differ from Alice’s board by a single transposition involving the
shaded box and the tagged box. This the condition you want to check after each of our moves
below. In a sense we are just trailing behind Alice by a single swap, but not just any swap, it must
be the swap that involves box 3 and the box that contains her tile number 3 (i.e. the shaded box and
the tagged box). So we just make sure that whatever tile she has in box 3 (shaded box) we have that
same numbered tile in the box below her tile 3 (tagged box).
Alice’s next move is (4 5). Since this doesn’t affect Alice’s box 3 or tile 3 we do the same
move: τ1 = (4 5). (Check that the only difference between our game boards is a single transposition
involving the shaded box and the tagged box.)
Alice’s next move is (1 3), so she moved tile 1 into the shaded box. We make the move
τ2 = (1 7) so that our tile 1 is now below her tile 3.
Alice’s next move is (2 7) which moves her tile 3 to box 2 (which is the new tagged box). We
make the move τ3 = (2 7) so that our tile 1 is below her tile 3.
Alice’s next move is (3 8) which moves tile 8 into the shaded box. We make the move τ4 = (2 8)
so that our tile 8 is below her tile 3.
Alice’s next move is (1 5) so we mirror this move: τ5 = (1 5).
Alice’s next move is (2 6) and we mirror it: τ6 = (2 6), while at the same time moving the tag
to box 6.90 Chapter 7. Permutations: The Parity Theorem
Alice’s next move is (3 7) which moves her tile 2 into the shaded box, so we do τ7 = (6 7) to
move our tile 2 under her tile 3.
Alice’s next move is (2 6) and we mirror it τ8 = (2 6), while at the same time moving the tag
to box 2.
Alice’s next move is (2 3). This brings Alice’s tile 3 back to box 3, but we already have our
tile 3 in box 3 (we never moved it from there this whole time, since we know Alice would have to
bring hers back). Therefore we skip this move (which is now the second move that we skipped). It
is interesting to note that this whole time we seemed to be one transposition behind Alice, however
it actually seems now that we were really one step ahead. She had to move tile 3 back to the shaded
box, and we were ahead of her on this.
Now both the green and blue tiles are in the same positions so we mirror all Alice’s remaining
moves: τ9 = (1 4), τ10 = (1 5), τ11 = (1 7), τ12 = (1 8). We have now produced a product of
transpositions which is the identity:
ε =
12
∏
i=1
τi = (4 5)(1 7)(2 7)(2 8)(1 5)(2 6)(6 7)(2 6)(1 4)(1 5)(1 7)(1 8),
but uses 2 fewer permutations than Alice used.
This example illustrates the procedure, but how can we be sure it works in general. That is,
how do we know there is always a move that we can do which keeps us within one transposition of
Alice? Specifically, a transposition which involves the first tile she moved and its home location
(the shaded and tagged boxes). Well, the following rules provide us with these moves.
Rules to follow:
(a) If Alice does a transposition on her green tiles between boxes other that the shaded box or
the tagged box, then we do the same transposition on our blue tiles.
(b) If Alice does a transposition on her green tiles between the shaded box and a box other than
the tagged box, then we respond with a transposition on our blue tiles between the tagged
box and the other box, not the shaded box, that she used.7.4 Exercises 91
(c) If Alice does a transposition on her green tiles between the tagged box and a box other than
the shaded box, then we respond with a transposition on our blue tiles between the same two
boxes. However, we also move the tag so that this other box now becomes the tagged box.
(d) If Alice does a transposition on her green tiles between the tagged box and the shaded box,
then we do not do this one.
(e) Once Alice has done a transposition of the type described in (d), which she must, then for
every transposition of hers thereafter, we do the same transposition.
If we follow these rules when playing Alice, then we can be certain that our tiles differ from
Alice’s by a single transposition involving the shaded and tagged boxes until she moves her first tile
back to the shaded box. She must eventually have to make such a move since her first tile must
return home (since the permutation is the identity) and the home position is precisely the shaded
box. Since we omit the first move and the move where she returns her first tile to the shaded box,
we have effectively reduced her sequence of transpositions by 2 moves. Thus completing the proof
or Proposition 7.3.2.
This may seem like a rather long-winded proof of Proposition 7.3.2, and in fact it is. But this
approach is designed to build on the tactile experience that you have developed from playing with
the Swap puzzle and other permutation puzzles.
7.4 Exercises
1. Determine whether the following permutations are odd or even.
(a) (1 3 2)
(b) (1 3 5 7 9)
(c) (1 6 4 3)
(d) (2 4 7)(3 9 5 8)
(e) (1 9 4 5)(3 11 4)(6 7)
(f) (1 2 3 4 5)(6 7 8 9 10)
2. Determine whether the following permutations are odd or even.
(a) α =

1 2 3 4 5 6 7 8
3 2 7 8 1 4 5 6 
(b) β =

1 2 3 4 5 6 7 8
5 2 1 6 7 8 3 4 
3. The parity of 15-puzzle scrambles. For each of the following arrangements of the 15-puzzle
determine the parity of the corresponding permutation.
(a) (b)
4. The parity of some Oval Track end-game scrambles. For each of the end-game arrange￾ments of the Oval Track puzzle variations, determine its parity.92 Chapter 7. Permutations: The Parity Theorem
(a) (b)
(c) (d)
5. Show each of the following.
(a) The product of two even permutations is an even permutation.
(b) The product of two odd permutations is an even permutation.
(c) The product of one even permutation and one odd permutation is an odd permutation.
6. In Definition 7.1.2 we defined the sign of an even permutation to be +1 and an odd permuta￾tion to be −1. Draw and analogy between the result of multiplying two permutations and the
result of multiplying their corresponding signs: +1 and −1.
(Hint: Use the results of the previous exercise.)
7. If α is even, prove that α
−1
is even. If α is odd, prove that α
−1
is odd.
8. Let α,β ∈ Sn. Prove that α
−1β
−1αβ is and even permutation.
9. Let α,β ∈ Sn. Prove that α and β
−1αβ have the same parity.
10. Show that exactly half of the permutations in Sn are even.
11. Show that a permutation with odd order must be an even permutation.
12. Give an example of an even permutation with even order. Also give an example of an odd
permutation with even order.
13. Transposition on a Variation of Oval Track. Consider a variation of the Oval Track puzzle
where there are now 21 disks instead of 20. The diagram below shows a configuration in
which the tiles in positions 1 and 3 have been swapped. Show it is impossible to solve this
configuration.
(Hint: use Exercise 5.)
14. For the 3×3×3 Rubik’s cube, show each of the following.7.4 Exercises 93
(a) It is impossible to find a move sequence that swaps exactly two edge cubies of the
Rubik’s cube, while leaving every other cubie in its home location.
(b) It is impossible to find a move sequence that flips exactly one edge cubie of the Rubik’s
cube, while leaving every other edge cubie in its home position (that is, in its home
location and with proper orientation).
(c) It is impossible to find a move sequence that swaps exactly two corner cubies of the
Rubik’s cube, while leaving every other cubie in its home location.
(Hint: Suppose you want to show it is impossible to find a move sequence that does X on the
puzzle, then label some objects on the cube (stickers/cubies/edge stickers/ etc.) such that
• each basic move on Rubik’s cube is a even permutation of these objects, and
• X corresponds to an odd permutation of these objects.)
15. The least number of transpositions to express a permutation. Let α ∈ Sn with disjoint
cycle form α = σ1σ2 ···σr
, where σi
is a ki-cycle and they are arranged in such a way that
k1 ≤ k2 ≤ ··· ≤ kr
. In this situation we say α has cycle structure (k1 k2 ... kr). If we express
each cycle as a product of transpositions then we get an expression for α that uses k − r
transpositions, where k = ∑
r
i=1
ki
. Show that this is the fewest transpositions that there can
be in any expression for α in terms of transpositions.
(See the paper [Kil94] by J.O. Kiltinen for one proof.)
(Hint: A modification of the ideas used in “Proof 1" of Proposition 7.2 may be useful. Note,
this gives an optimal method for solving the Swap puzzle.)8. Permutations: An and 3-Cycles
We now focus our attention on the set of even permutations, An, and show every even permutation
can be written as a product of 3-cycles. This is an important result since we’ll see in later lectures
that 3-cycles are essential in solving permutation puzzles.
8.1 Swap Variation: A Challenge
Consider the following variation of Swap:
Variation: Legal move is to pick any 3 boxes and cycle their contents either to the left or right.
Using only these legal moves, try the following challenges.
Challenge 1: Solve the following puzzle:
Challenge 2: Solve the following puzzle:
8.2 The Alternating Group An
In Lecture 6 we discovered there are two types of permutations: even and odd. We will denote
the set of all even permutations by An, and the set of all odd permutations by On. Since every
permutation is either odd or even, and no permutation is both, it follows that
Sn = An ∪On, where An ∩On = /0.
There is one difference between these two sets which will be important for us, and this has to
do with how each of the sets behaves under composition.96 Chapter 8. Permutations: An and 3-Cycles
The set An of even permutations is closed under composition, closed under taking
inverses, and contains the identity. The set On of odd permutations is closed under
taking inverses, but definitely not closed under composition, nor does it contain the
identity. In fact, the composition of an two permutations in On is always in An.
When we say that An (or, in general, any subset of B of Sn) is closed under composition, we
mean that for any α,β ∈ An (or in B) the composition αβ ∈ An (in B). Similarly, by closed under
taking inverses we mean that for any α ∈ An (or in B) the inverse permutation α
−1
is also in An
(in B)
Let’s check why our statements about An and On are true. The product of any two even permu￾tations is another even permutation so An is closed under composition. The identity permutation is
even and therefore in An. For any permutation α ∈ An, it’s inverse α
−1
is also even, since once way
to express α
−1
as a product of transpositions is to just write the ones expressing α in reverse order.
So if an even number were used to express α then an even number can be used to express α
−1
.
Similarly, if β ∈ On then β
−1 ∈ On. The product of two odd permutations gives a permutation that
can be expressed in terms of an odd + odd = even number of transpositions, and therefore is an
even permutation.
This distinction between An and On will makes An a much more important object to study.
Why? Well, to answer this we go back to the properties of Sn.
In Lecture 3, we defined the set of all permutations to be the Symmetric Group, Sn. We listed
various properties this set has, but most notably it has the following four properties regarding
composition:
(a) Closure. The product of two elements α,β ∈ Sn is another element αβ ∈ Sn.
1
(b) Associativity. Permutation composition is associative: α(β γ) = (αβ)γ.
(c) Identity. The identity (or “do nothing") permutation ε is in Sn. It has the property that
εα = αε = α for all α ∈ Sn.
(d) Inverses. Every α ∈ Sn has an inverse in Sn denoted by α
−1
. The defining property of an
inverse is αα−1 = α
−1α = ε.
If we look back at all the computations we’ve done with permutations we see that we are
making extensive use of these properties, whether we are conscious of it or not. For example, the
cancellation property: αβ = αγ implies β = γ, and βα = γα implies β = γ, is a direct consequence
of these four properties. Look back at the proof of it in Lecture 3. This means that any set of objects,
equipped with an operation that combines two to produce a third, and the operation satisfies these
four properties, also has the cancellation property. For example, R under the operation of addition,
+, satisfies these four properties (identity is 0), so it must also have the cancellation property. The
set of invertible 2×2 matrices, under matrix multiplication, satisfies these four properties, so it
must also have the cancellation property. In a sense, we have described the “important" properties
of Sn.
A set A that comes equipped with an operation to combine pairs of elements (add/multiply/-
compose) such that A is closed under the operation, the operation is associative, there is an identity
in A, and inverses exist in A, is called a group. Our explorations into permutations puzzles will
essentially consist of considering the set of all legal move sequences, call this set M, and noticing
that this set is a subset of Sn which is also a group. (Composition of legal moves is a legal move,
composition is associative, there is a “do-nothing” move, and for each move there is a way to “undo”
it.) Therefore to each permutation puzzle we can associate a group M of legal move sequences. The
question is then: Are we able to understand the group M? In order to do this, we’ll need to build up
our stock of examples of groups.
What we’ve shown above is that An is a group, whereas On is not. On fails to contain the
1Our convention is to compose permutations from left-to-right,8.3 Products of 3-cycles 97
identity, nor is it closed under composition. An is an important family of groups, and in particular
A5 has great historical significance. The letter “A” in its name comes from the word “alternating",
which reflects some properties that were important when these groups were first studied.
Definition 8.2.1 — Alternating Group of Degree n. The set of even permutations of Sn is
denoted by An, and is called the alternating group of degree n:
An = {α ∈ Sn : α is an even permutation}
We will sometimes refer to An as the set of even permutations. As a first step in investigating
An, let’s show it contains exactly half the elements of Sn.
Theorem 8.2.1 — Cardinality of An. |An| = |On| =
n!
2
, for n ≥ 2.
Proof: Consider the function φ : An → On defined by φ(α) = (1 2)α. We’ll show that this function
is a bijection. For α,β ∈ An if φ(α) = φ(β) then (1 2)α = (1 2)β and so α = β by the cancellation
property (Lemma 3.5.3). Therefore φ is one-to-one. Now consider β ∈ On. Then (1 2)β ∈ An such
that φ((1 2)β) = (1 2)(1 2)β = β. Therefore φ is onto. Hence φ is bijective.
Therefore |An| = |On| and since |An| + |On| = |Sn| then 2|An| = |Sn|. It follows that |An| =
|Sn|
2
=
n!
2
. 
Example 8.1 List the elements of A4.
These are the permutations in S4 which are even. The most straightforward way to list
elements is to do it in disjoint cycle form, so we’ll begin with the identity:
ε.
Next, we list elements involving cycles of length at most 2 (excluding single transpositions since
we want even permutations):
(1 2)(3 4), (1 3)(2 4), (1 4)(2 3).
Next we can list 3-cycles:
(1 2 3), (1 3 2), (1 2 4), (1 4 2), (1 3 4), (1 4 3), (2 3 4), (2 4 3).
This is all the elements of A4, and there are 12 as predicted by Theorem 8.2.1. 
8.3 Products of 3-cycles
The fact that every permutation in Sn can be expressed as a product of 2-cycles, is something we
have used quite a bit. There is a similar result for the even permutations An and 3-cycles.
Theorem 8.3.1 Every permutation in An, for n ≥ 3, can be expressed as a product of 3 cycles.
Proof: Suppose α is an even permutation, then we can express it as the product of an even number
of 2-cycles:
α = τ1τ2 ··· τ2k−1τ2k.98 Chapter 8. Permutations: An and 3-Cycles
We’ll group together adjacent pairs of 2-cycles as follows:
α = (τ1τ2)(τ3τ4)···(τ2k−1τ2k).
It suffices to show that a product of two transpositions can either be dropped from the expression or
be expressed as a product of 3-cycles, without changing the value of the expression.
Each product τiτi+1 can be expressed in one of the following ways as shown on the left,
depending on whether the transpositions move two things in common, one thing in common, or
nothing in common:
(a b)(a b) = ε
(a b)(a c) = (a b c)
(a b)(c d) = (a b c)(a d c)
The last case follows from (a b)(c d) = (a b)(a c)(c a)(c d) = (a b c)(c a d) = (a b c)(a d c).
Alternatively, look at a basic game of Swap on four objects a|b|c|d. To swap a with b and c with d
we can first cycle abc to the right: c|a|b|d. Then we can cycle objects in positions acd to the left:
b|a|d|c. This shows (a b)(c d) = (a b c)(a d c).
If the first case occurs we may delete τiτi+1 in the original product. In the other two cases we
replace τiτi+1 with what appears on the right to obtain a new product of 3-cycles. 
Example 8.2 Express the even permutation α = (1 6 4)(2 3 7 8)(9 10) as a product of 3-cycles.
To do this split the second and third permutations into a product of transpositions:
α = (1 6 4)(2 3)(2 7)(2 8)(9 10)
Then group adjacent transpositions and express each in terms of 3-cycles.
(2 3)(2 7) = (2 3 7)
(2 8)(9 10) = (2 8)(2 9)(2 9)(9 10) = (2 8 9)(9 2 10) = (2 8 9)(2 10 9)
The following game of Swap shows an alternate method of expressing (2 8)(9 10) as the product
of two 3-cycles.
Now we can put everything back together to get:
α = (1 6 4)(2 3 7)(2 8 9)(2 10 9).8.4 Variations of Swap: Revisited 99

8.4 Variations of Swap: Revisited
Let’s go back to the variation of Swap in Section 8.1.
Variation: Legal move is to pick any 3 boxes and cycle their contents either to the left or right.
For example, suppose the puzzle started in the following position:
The corresponding permutation is α = (1 4 5 11 3 9)(2 12 6)(8 10).
We can solve the puzzle as follows. In each line the shaded boxes represent our choice of 3
boxes, and the arrow on the right indicates which direction the contents are being moved. We also
summarize the move by writing the corresponding 3-cycle above the arrow.
In term of permutations this move sequence tells us:
α(2 8 10)(2 8 6)(1 2 12)(1 2 9)(1 3 11)(1 5 4) = ε
or in other words,
α = [(2 8 10)(2 8 6)(1 2 12)(1 2 9)(1 3 11)(1 5 4)]−1
= (1 4 5)(1 11 3)(1 9 2)(1 12 2)(2 6 8)(2 10 8).
That is, considering α as a starting position for this variation of Swap, solving the puzzle is
equivalent to expressing α as a product of 3-cycles. Since only even permutations are expressible
as products of 3-cycles this give us a very simple solvability condition for this variation of Swap.
Corollary 8.4.1 — Solvability of Swap Variation. The Swap puzzle, where the legal moves
consist of 3-cycles on any three boxes, is solvable if and only if the starting position is an even
permutation.
To see this solvability condition in action, consider the following scramble of Swap.100 Chapter 8. Permutations: An and 3-Cycles
Try solving it using only 3-cycles.
Quickly you realize it is a difficult task. It is possible to get all but two numbers back into
their home positions. In fact, this position corresponds to the permutation (1 4 3 5 6 2) which is a
6-cycle, and therefore an odd permutation. Therefore, by Corallary 8.4.1 no matter how long we
play with the puzzle we don’t have a hope of solving it. It is simply impossible!
Looking back at Section 8.1 we see that the permutation in Challenge 1 is (1 6 4)(2 3 7 8)(9 10)
which is even and therefore solvable, whereas the permutation in Challenge 2 is (9 10) which is odd,
and therefore not solvable. Just knowing Challenge 1 is solvable doesn’t actually answer the ques￾tion, we were asked to solve the puzzle. This is equivalent to expressing (1 6 4)(2 3 7 8)(9 10) as a
product of 3-cycles, which we’ve already done in Example 8.2. There we found (1 6 4)(2 3 7 8)(9 10) =
(1 6 4)(2 3 7)(2 8 9)(2 10 9). So applying the inverse of this permutation: (2 9 10)(2 9 8)(2 7 3)(1 4 6)
will solve the puzzle. On the other hand, knowing the puzzle in Challenge 2 is not solvable means
we can abandon playing with it.
8.5 Exercises
1. Give an example of an element in A7 which contains a 4-cycle. Give an example of an
element in A10 which contains at least one 3-cycle, and at least one 4-cycle.
2. Demonstrate the truth of Theorem 8.3.1 by expressing these even permutations as products
of 3-cycles.
(a) α = (1 2)(1 3)
(b) β = (1 2)(3 4)
(c) γ = (1 2 3 4 5 6)(3 4 5)(2 5)(1 4)(5 2)
(d) δ = (1 2)(2 3)(4 5)(1 3)(6 7)(6 8)(9 10)(11 12)
(e) σ = (1 2 3 4)(2 3 4 5)(4 5 6 7)(8 9)
3. Expressing odd permutations in terms of 3-cycles and one transposition.
(a) Show that all odd permutations in Sn can be expressed using exactly one transposition
together with zero or more 3-cycles.
(b) Demonstrate the truth of this claim by expressing these odd permutations with a single
transposition and 3-cycles.
(i) α = (1 2 3 4 5 6)
(ii) β = (1 2 3 4)(5 6 7)(8 9 10)
(iii) γ = (2 5 3 7 6)(3 5 8 4)(6 8 2 1 9)
4. Using the solvability condition for the variation of Swap we considered in this section
(Corollary 8.4.1), determine whether each of the following scrambles are solvable. For the
ones that are solvable, find a sequence of moves that solve the puzzle.
(a)
(b)
(c)
(d)
5. What are the possible orders for permutations in A6? What about A7?8.5 Exercises 101
6. Show that A5 contains no element of order 15.
7. What is the maximum order of any element in A10?
8. Compute the order of each permutation in A4. What arithmetic relationship do these orders
have with the cardinality of A4.
9. How many elements of order 5 are there in A6.
10. How many elements of order 4 are there in A6.
11. Show that A5 has 24 elements of order 5, 20 elements of order 3, and 15 elements of order 2.
12. Let B ⊂ Sn be a set of permutations such that
• B is closed under multiplication (i.e. if α,β ∈ B then so is αβ), and
• An ⊂ B, and
• B contains an odd permutation γ.
Show that B = Sn. In words this says that a set of permutations B that is closed under
multiplication and contains every even permutation and at least one odd permutation must
contain every permutation.
13. Products of 4-cycles? 5-cycles? All permutations in Sn are expressible using transpositions,
and all permutations in An are expressible using 3-cycles, provided n ≥ 3. Stating this another
way, this says that you get all permutations by taking all possible products of 2-cycles, and
similarly you get all the even permutations by taking all possible products of 3-cycles. What
do you get when you take all possible products of 4-cycles? Or 5-cycles? Or k-cycles?
Explore this question and see what you can discover. Note of course that we must assume
n ≥ k before we can talk about k-cycles in Sn.9. The 15-Puzzle
We have now developed enough theory to give a full analysis of the 15-puzzle. We will present a
solvability criteria which will allow us to easily see whether a given scrambling of the puzzle is
solvable. We will also sketch a strategy for solving the puzzle.
9.1 Solvability Criteria
Determining the solvability of a scrambling of the tiles on the 15-puzzle is a simple task as we will
see. Let’s first consider the case where a scrambling places the empty space back into its original
box (box 16). This means the corresponding permutation α fixes 16: α(16) = 16. We can think
of such a permutation as an element of S15. (Just think about the disjoint cycle form, 16 doesn’t
appear since it is mapped back to itself.)
Figure 9.1 shows three different configurations of the 15-puzzle corresponding to permutations
in S15. The permutations are written below each puzzle. We’d like to be able to quickly determine
which configurations are solvable.
(a) (b) (c)
Figure 9.1: Which of the positions are solvable?104 Chapter 9. The 15-Puzzle
The next theorem says any rearrangement of tiles in the 15-puzzle starting from the solved￾state configuration which brings the empty space back to its original position must be an even
permutation of the other 15 pieces. Moreover, it says that every even permutation of the 15 tiles can
be obtained as a position on the 15-puzzle.
Theorem 9.1.1 — Solvability Criteria for 15-Puzzle - Part 1. A permutation α of the 15-puzzle
which fixes 16, is solvable if and only if it is even: i.e. α ∈ A15.
It follows that the number of solvable positions of the 15-Puzzle, where the empty space is in
its home position, is
|A15| =
15!
2
= 653,837,184,000.
We immediately conclude from this theorem that the puzzles in Figures 9.1a and 9.1c are not
solvable since the permutations are odd, whereas the puzzle in Figure 9.1b is solvable since the
permutation is even.
We will provide a proof of this theorem in Section 9.2.
What about the case when the scrambling does not place the empty space back in box 16? We’ll
see that simply knowing the parity of the permutation and the position of the empty space is enough
to determine solvability. But first we’ll define the parity of a box.
Colour the 15-puzzle like a checker board as in Figure 9.2. We will call the shaded boxes even
and the white boxes odd. This is because if the empty space is in a shaded box it takes an even
number of moves to bring it to box 16, similarly if it is in a white box it takes an odd number of
moves. Under this definition boxes 1,3,6,8,9,11,14,16 are even, whereas the other boxes are odd.
Figure 9.2: Parity of box: Define the shaded boxes to be even and the white boxes to be odd.
With this concept of odd and even boxes now defined, we can state the general solvability
criteria for the 15-puzzle.
Theorem 9.1.2 — Solvability Criteria for 15-Puzzle - Part 2. A permutation of the 15-puzzle
is solvable if and only if the parity of the permutation is the same as the parity of the location of
the empty space.
As a consequence of this theorem when the empty space is in one particular box, there are
|A15| =
15!
2
= 653,837,184,000
possible positions of the tiles. Since there are 16 different places to put the empty space, there is a
total of
16
15!
2

=
16!
2
= 10,461,394,944,000
possible ways to rearrange the tiles on the board so that the puzzle is solvable. This means, of all
16! ways to arrange the tiles in the boxes, exactly half are solvable!9.2 Proof of Solvability Criteria 105
When the puzzle craze hit the world in the early 1880’s people noticed that when they randomly
placed the tiles in the box, the puzzle was solvable half of the time. This now explains why!
As an example, the permutation corresponding to the scrambling in Figure 9.3 is
(1 10 11 7 6)(2 3 4 8 12 16 5)(13 15)
which is odd (check this yourself), and the parity of the location of the empty space is odd, therefore
the puzzle is solvable by the solvability criteria: Theorem 9.1.2.
Figure 9.3: Is this position solvable?
9.2 Proof of Solvability Criteria
We will prove Theorem 9.1.1 and then show that Theorem 9.1.2 is a direct consequence of it.
Proof of Theorem 9.1.1: There are two directions we need to prove: (i) a solvable configuration
is an even permutation, and (ii) every even permutation is a solvable configuration. The proof of (i)
is very straightforward, but the proof of (ii) requires us to use the fact that even permutations can
be expressed using 3-cycles.
(i) Suppose we have a solvable rearrangement of the 15 tiles, where the empty space is in
its home position (box 16). Let α ∈ S15 be the corresponding permutation. Since puzzle moves
consist of transpositions - the empty space is swapped with an adjacent tile - then let τ1, τ2,..., τk
be the moves (i.e. transpositions) which solve the puzzle (i.e. takes α to the identity permutation
ε). As usual, this means α = τk ... τ2τ1. Since the empty space moves around the puzzle and then
eventually returns home, the number of moves must be even. To see why this is true, refer to Figure
9.2, the empty space must start in shaded box 16, and after each move it alternates the colour of
the box it is in, and so if it returns to a shaded box it must have moved an even number of times.
This means k is even, and so α is expressible as a product of an even number of transpositions.
Therefore α is even.
(ii) We wish to show every even permutation of the 15 tiles is obtainable through puzzle moves,
starting from the solved-state. We will do this by showing we can obtain any 3-cycle of the tiles.
This is enough to prove the theorem since any even permutation is expressible as a product of
3-cycles, and if we can produce any 3-cycle then we can produce any product of them, through
sequential moves, and therefore we can produce any even permutation.
We begin by observing we can produce the 3-cycle σ = (11 12 15), by focussing on the bottom
right corner of the puzzle:
The sequence of moves is: (12 16)(11 12)(11 15)(15 16)
Now that we have one 3-cycle σ, we will show that we can use σ to construct any other 3-cycle
we want. From a solved puzzle, pick any tile, say i ∈ [15]. Move tiles 12 and 11 to boxes 16 and
12, respectively, by the move sequence α = (12 16)(11 12):106 Chapter 9. The 15-Puzzle
Then using one of the two tours in Figure 9.4 we can move tile i to box 15, without disturbing
the contents of boxes 12 and 16. Call this move sequence β.
(a) (b)
Figure 9.4: Tours for producing 3-cycles.
Applying α
−1
then moves 11 and 12 back into their home positions. This puts the puzzle in the
middle position in the following diagram, where the x’s indicate these numbers may have moved
around.
Applying the 3-cycle σ then moves tiles i, 11, and 12 around as indicated in the diagram. Now,
we apply the inverse move sequence (αβα−1
)
−1 = αβ −1α
−1
and this takes everything back to
where it was, except i stays in box 11, 11 stays in box 12, and 12 goes to box i. Therefore, we have
created the 3-cycle (11 12 i), where i is any other tile we wish.
Let’s summarize what we did:
(1) we chose some tile i,
(2) temporarily hide tiles 11 and 12 in boxes 12 and 16,
(3) used one of the tours in Figure 9.4 to bring tile i to box 15, and this didn’t disturb tiles 11 and
12 hidden in boxes 12 and 16
(4) moved 11 and 12 back out to their original positions
(5) applied the 3-cycle σ = (11 12 15)
(6) then reversed all the steps (4) to (2), thus taking everything home except 11,12, and i have been
cycled.
Here is an example (near the end we think of i as being 5 for concreteness).9.2 Proof of Solvability Criteria 107
Now we can construct any 3-cycle of the form (11 12 i), for any i 6= 11,12.
Since (11 12 k)(11 12 j) = (11 j)(12 k) we are able to put any tiles (j and k) in boxes 11 and
12, while leaving everything else in place. Moreover,
(11 j)(12 k)(11 12 i)(11 j)(12 k) = (i j k),
where i 6= j 6= k and i, j, k 6∈ {11,12}. Therefore, we can produce any possible 3-cycle.
This completes the proof. 
The proof of the general solvability condition is a simple consequence of this specific case.
Proof of Theorem 9.1.2: Let α be the current permutation of the 15-puzzle. Move the empty
space to box 16, then the new arrangement corresponds to the permutation
α
∗ = ατ1τ2 ··· τk
where τ1, τ2,..., τk were the transpositions used to move the empty space to box 16. Since the
empty space is now in box 16 then, by Theorem 9.1.1, α
∗
is solvable if and only if it is an even
permutation.
Let’s think about when α
∗
is even. This really follows from the way we defined the parities of
the boxes.
If the empty space was in an odd box, then it would have taken an odd number of transpositions
to move it to box 16. That is, k would be odd. On the other hand, if the empty space was in an even
box then k would be even, since it would have taken an even number of transpositions to move it to
box 16. In either case, k is equal to the parity of the box the empty space was in. This is precisely
the reason we defined the parity of a box as we did.
Now, putting it all together, α is solvable if and only if α
∗ = ατ1τ2 ··· τk is even, which is
equivalent to α and k having the same parity, which is equivalent to α and the location of the empty
space having the same parity. This completes the proof. 108 Chapter 9. The 15-Puzzle
9.3 Strategy for Solution
Of course, in proving Theorem 9.1.1 we’ve essentially presented a strategy for solution. First move
the empty space into box 16, then the resulting permutation is even, so we may express it as a
product of 3-cycles. In practice, our typical method for doing this is first to express it as a product of
transpositions, then group pairs of transpositions and express them as a 3-cycle or pair of 3-cycles.
We can now use the technique outlined in Section 9.2 to produce each 3-cycle, one-by-one, by
moving the desired tiles into the 11,12,15 boxes, performing the 3-cycle (11 12 15), then moving
everything back again.
Though theoretically possible, and a perfectly sound way to prove the theorem, this makes for
a completely inelegant way to solve the puzzle. Not to mention you would need to remember, or
write down, the move sequence αβα−1
since you would need to apply the inverse. This move
sequence could be very long. Instead we’ll look for a more efficient solution, and one that doesn’t
require remembering any previously made moves.
Some hints to get you started:
Hint 1: Solve the puzzle by setting the tiles in their proper places, one-by-one, in numerical order.
At some stages, it may be necessary to temporarily disturb placed pieces, but they shouldn’t have to
move too far out of place.
If you haven’t tried this already, do so now.
Hint 2: There are some tricky parts. For instance if 1,2,3 are all in place, but 4 is not, it will be
necessary to disturb the previously placed pieces in order to get 4 in its proper place. Instead, before
placing 3, join it with 4 to form a chain and bring the two of them into place together. Forming
chains of tiles is a useful strategy.
If you haven’t tried this already, do so now.
Hint 3: Getting the final few pieces in the proper places is of course tricky. But at this stage,
making use of 3-cycles, as in the proof above, may be useful. After all, if you can use mathematics
to shed some light on what to do, then do it!
Most of all, just have some fun. Try some strategies of your own, if they are useful, then write
them down so you won’t forget them.
SPOILER ALERT: We now present a complete method for solving the 15-Puzzle, read only if
you want to spoil the fun of discovering a solution yourself.
The following solution is due to Jaap Scherphuis (see [Sch11]). It is not an optimal solution,
that is, it won’t allow you to solve the puzzle in the minimum number of moves, but it does give a
method that works on any solvable configuration, and it extends to puzzles of sizes other than 4×4.
Using this method, with a smooth puzzle, or better yet a virtual version, solutions can take between
1 to 2 minutes, possibly faster.
Phase 1: Solve the top row from left to right.
1. Find the next tile you want to place in position in the top row.
2. If it is not the last tile of the row, it is fairly easy to place correctly, simply keep the following
points in mind:
(a) Never disturb any previously placed pieces.
(b) To move the tile in a certain direction, move the other tiles around until the space is
next to your tile on the side you want to move it to. Then you can move the tile.
3. If the last tile is not already in position, bring it to the position directly below its correct spot,
with the space directly below that. Then move tiles in the following directions: down, down,
right, up, left, up, right, down, down, left, up. This should place the piece in position. Note it
does temporarily disturb the previously placed tile. See figure below.9.4 Exercises 109
Phase 2: Solve the rest of the puzzle
1. Use the technique in phase 1 to solve each row in turn, until there are only two rows left.
2. Rotate the puzzle a quarter turn to the right. The left column of the two rows becomes the
top row now.
3. Use the technique in phase 1 to solve each row in turn, until there are only two rows left.
This means there is only a 2×2 square left to solve. For example, the next figure show how
to get tile 12 in the correct place in the bottom left corner of the 4×4 version.
4. Move the pieces in the remaining 2×2 square around until one piece is positioned correctly,
and the space is in the correct spot. The other two tiles should automatically be correctly
positioned as well.
5. If there are two tiles that need to be swapped, then this cannot be done unless two other tiles
are swapped as well. If there are two identical tiles somewhere in the puzzle, then you will
have to swap them and solve the rest again. (This may happen if there are letters or pictures
on the tiles instead of numbers.)
9.4 Exercises
1. In the early 1880’s the world went crazy over trying to solve configuration of the 15-puzzle
where the 14 and 15 were swapped. See the Figure below. Explain why no one was able to
find a solution.
2. Show that each of the following scramblings of the 15-puzzle are solvable.
(a) (b) (c) (d)110 Chapter 9. The 15-Puzzle
3. Show that each of the following scramblings of the 15-puzzle are unsolvable.
(a) (b) (c) (d)
4. Determine which of the following arrangements of the 15-puzzle are solvable and which are
unsolvable.
(a) (b) (c) (d)
5. This exercise is to help us understand the details of the proof in Section 9.2, and to get some
practice with creating 3-cycles. Starting with the puzzle in the solved state write down a
sequence of moves which will produce each of the 3-cycles:
(a) (11 12 13) (b) (11 12 8) (c) (11 8 13).
Either write the moves using transpositions, or use the words “up", “down", “left", “right",
to indicate the direction the tile adjacent to the empty space is moved. It may help to use a
physical or virtual version of the puzzle. See the “software" section of the course webpage
for links to virtual versions of the puzzle.
6. A 15-puzzle manufacturer wants to sell the puzzle with the tiles already mixed-up, and they
want the pattern to be “pretty" so it catches the eye of the customer when sitting on a store
shelf. This manufactured version of the puzzle does not allow the pieces to be removed, so
the pattern needs to be solvable. They propose to use a pattern where all then even numbered
tiles are in the first two rows, and the odd numbered tiles in the last two rows (see the Figure
below). They also colour all the even tiles red, so that in the solved state the puzzle will have
a pattern of vertical lines. If they manufacture the puzzle in this way, will it be solvable? Or
will this result in angry customers wanting to return their puzzles?
7. In 1959, the Plas-Trix Company in the USA produced a letter version of the 15-puzzle. The
problem is to rearrange the blocks so they correctly spell RATE YOUR MIND PAL. They
manufactured and sold the puzzle with the last two tiles switched. See the figure below.
Explain why it is possible to solve this puzzle.9.4 Exercises 111
(Hint: At first glance it seems this is analogous to the 15-14 problem in Exercise 1, in which
case it is not solvable. But this is not entirely equivalent, and the subtle differences are what
allows this puzzle to be solved. Can you spot the reason this puzzle is solvable?
Play online: http://www.sfu.ca/ jtmulhol/math302/applets/rate-your-mind-pal/rate-your-mind￾pal.html)
8. The Panama Canal Puzzle dates back to 1915. The staring position has the red letter “P" and
the black letter “C" swapped. The problem is to swap the two blocks back. Explain why it is
possible to solve this puzzle.
Play online: http://www.sfu.ca/ jtmulhol/math302/applets/panama-canal/panama-canal.html
9. The Get My Goat Puzzle was patented in 1914. The problem is to get the goat inside the
fenced-in area, after removing the marked block. This basically requires a swap of the block
with the picture of the goat’s head and the block adjacent to it. Explain why this puzzle is
solvable.
Play online: http://www.sfu.ca/ jtmulhol/math302/applets/get-my-goat/get-my-goat.html.
Conjugation:
Exercises 10 through 12 introduce the idea of conjugation.
First a definition:
If α,β ∈ Sn, we call the permutation β
−1αβ the conjugate of α by β.
Looking back at the proof of Theorem 9.1.1 we transformed the 3-cycle σ = (11 12 15) into
another 3-cycle (11 12 i) by:
γσ γ−1 = (11 12 i),
where γ = αβα−1 was a sequence of moves that moved tile i to box 15, and left tiles 11
and 12 alone. We used conjugation twice in the proof: αβα−1
and γσ γ−1
. These types of
products are used extensively when solving permutation puzzles. If you have some experience
with permutation puzzles you will notice you frequently make moves of the form:112 Chapter 9. The 15-Puzzle
• do a move m1,
• then do another move m2,
• then undo the first move m
−1
1
.
If you notice you do this, then you already have a working feel for conjugation. In the next
few exercises we investigate conjugation, and show that β
−1αβ and α have the same cycle
structure. This general result is the reason why γσ γ is a 3-cycle.
10. For each of the following pairs of permutations α,β ∈ Sn calculate the conjugate of α by β.
In other words, compute the product β
−1αβ.
(a) α = (1 2 3 4 5), β = (1 5 8)(2 6)(3 7 4)
(b) α = (1 5 8)(2 6)(3 7 4), β = (1 2 3 4 5)
(c) α = (5 7 3 6)(10 11 8 12), β = (1 2)(4 10 5 11 7 9 12)
In each case notice, the cycle structure of β
−1αβ is the same as α. For instance in (b), α is
a product of two 2-cycles and one 3-cycle, and so is β
−1αβ.
11. For α = (1 2 3 4) and β = (1 4)(3 5 2) do the following.
(a) Calculate β
−1αβ.
(b) Calculate the values of β(1), β(2), β(3), β(4), then write down the 4-cycle, (β(1),β(2),β(3),β(4)).
(c) Observe that the 4-cycle in part (b) is the same as the answer to part (a). Coincidence?
The next exercise says, this is no coincidence.
12. Show that for any α,β ∈ Sn the conjugate β
−1αβ has the same cycle structure as α.
Hint: express α in disjoint cycle form σ1σ2 ···σk, where σi
is a mi-cycle, for 1 ≤ i ≤ k.
Then show
(i) β
−1αβ = (β
−1σ1β)(β
−1σ2β)···(β
−1σkβ).
Then it suffices to only consider the case when α is a cycle. Which means, you just need to
prove:
(ii) β
−1
(a1 a2 ... am)β = (β(a1) β(a2) ... β(am)).
Other Board Sizes and Obstacles:
In Exercises 13 to 15 we investigate board sizes other than 4×4.
13. Consider 5 tiles and an empty space on a board consisting of 3 rows and 2 columns. Show, by
using a similar argument to the one used for the 15 puzzle that a permutation α ∈ S5, where
the empty space is in its home location, corresponds to a solvable configuration if and only if
α is an even permutation.
Hint: By using a two-by-two square of four boxes, show that a single 3-cycle can be obtained.
Then show every 3-cycle can be obtained by conjugation, similar to the argument we used
for the 15 puzzle.
14. The following board shows a variation of the 15 puzzle where boxes 6,7, and 11 are obstacles.
That is, these boxes are “out-of-play" and cannot be used. We can still ask the question as
to which permutations of the tiles are solvable. Show that, just like the original 15 puzzle,
Theorems 9.1.1 and 9.1.2 remain true.
Hint: For simplicity just focus on permutations leaving the empty space in its home location.
Use the two-by-two square of four boxes to generate all 3-cycles: first show you can obtain
one 3-cycle, then use conjugation to obtain all others.9.4 Exercises 113
15. [Challenging] The following is a general characterization of the solvability condition for
rectangular boards, with obstacles. Verify it is true.
Let α denote an arbitrary permutation of tiles on a rectangular m×n board such that the
board
(a) has one empty space,
(b) has at least one two-by-two array of boxes all of which are in use, and
(c) may have some obstacles (boxes that are out-of-play and cannot be used), but these
obstacle do not trap tiles (in other words, any tile can be moved to any other location).
Then the permutation α is solvable if and only if the parity of α is the same as the parity of
the location of the empty space.III 10 Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
10.1 Group: Definition
10.2 Some Everyday Examples of Groups
10.3 Further Examples of Groups
10.4 Exercises
11 Subgroups . . . . . . . . . . . . . . . . . . . . . . . . . 139
11.1 Subgroups
11.2 Examples of Subgroups
11.3 The Center of a Group
11.4 Lagrange’s Theorem
11.5 Cyclic Groups Revisited
11.6 Cayley’s Theorem
11.7 Exercises
12 Puzzle Groups . . . . . . . . . . . . . . . . . . . . . . 149
12.1 Puzzle Groups
12.2 Rubik’s Cube
12.3 Hungarian Rings
12.4 15-Puzzle
12.5 Exercises
13 Commutators . . . . . . . . . . . . . . . . . . . . . . 161
13.1 Commutators
13.2 Creating Puzzle moves with Commutators
13.3 Exercises
14 Conjugates . . . . . . . . . . . . . . . . . . . . . . . . 175
14.1 Conjugates
14.2 Modifying Puzzle moves with Conjugates
14.3 Exercises
15 The Oval Track Puzzle . . . . . . . . . . . . . . . 187
15.1 Oval Track with T = (1 4)(2 3)
15.2 Variations of the Oval Track T move
15.3 Exercises
16 The Hungarian Rings Puzzle . . . . . . . . . 203
16.1 Hungarian Rings - Numbered version
16.2 Building Small Cycles: Tools for Our End-Game Tool￾box
16.3 Solving the end-game
16.4 Hungarian Rings - Coloured version
16.5 Exercises
17 Partitions & Equivalence Relations . . . 211
17.1 Partitions of a Set
17.2 Relations
17.3 Equivalence Relation
17.4 Exercises
18 Cosets & Lagrange’s Theorem . . . . . . . 221
18.1 Cosets
18.2 Lagrange’s Theorem
18.3 Exercises
Part Three: Group Theory10. Groups
Group Theory is typically referred to as the mathematical study of symmetry. The puzzles we are
studying have exhibited a remarkable amount of symmetry. In this lecture we begin our introduction
into group theory by introducing the concept of a group. Though, from our experience in exploring
puzzles and permutations we already have experience in working with groups. In later lectures, we
will see that group theory is the tool required to understand permutation puzzles, in particular their
end-game.
10.1 Group: Definition
Playing with permutation puzzles has already given us a working definition of a group. We have a
set of move-sequences, call this set M. We are able to compose two move-sequences together to
form a new move-sequence (m1,m2 ∈ M =⇒ m1m2 ∈ M), there is a “do-nothing" move (ε ∈ M) and
we can “undo" a move sequence (for m1 ∈ M there is an m
−1
1 ∈ M such that m1m
−1
1 = m
−1
1 m1 = ε).
This is also how permutations behave under composition. Each consist of a set, an operation to
combine objects in the set, and a few properties this operation must possess. This is precisely what
we will call a group.
Definition 10.1.1 — Group. A group is a nonempty set G, together with an operation, which
can be thought of as a function ∗ : G×G → G, that assigns to each ordered pair (a,b) of elements
in G an element a ∗ b ∈ G, that satisfies the following properties:
1. Associativity: The operation is associative: (a ∗ b) ∗ c = a ∗ (b ∗ c) for all a,b, c ∈ G.
2. Identity: There is an element e (called the identity) in G, such that a ∗ e = e ∗ a = a for all
a ∈ G.
3. Inverses: For each element a ∈ G, there is an element b in G (called the inverse of a) such
that a ∗ b = b ∗ a = e.
Typically we drop the notation ∗ for the operation and just write the operation by juxtaposition,
that is, we simply write a ∗ b as ab. We’ve already been doing this with permutation composition,118 Chapter 10. Groups
and the composition of puzzle moves. In the case where the group operation is addition, then we
will use the symbol "+".
Definition 10.1.2 — Order of a Group. The number of elements of a group (finite or infinite)
is called the order of the group. We will use |G| to denote the order of the group, since this is
really just the cardinality of the set.
The power of mathematics resides in abstraction. Mathematicians look for the similarities
between objects, then articulate and abstract these similarities. They generally work with these
abstract conceptualizations, since as a result, their discoveries hold for all objects satisfying the
properties of the abstraction.
Consider an analogy from biology. Biologists consider the similarities between spiders, scor￾pions, harvestmen, ticks, and mites, to be significant enough that they talk about them as being
from the same “family": the Arachnid family. Arachnids are a class of joint-legged invertebrate
animals, all of which have eight legs. There are over 100,000 named species, five of which we
named above. In this sense, a biologist who studies the (abstract) family Arachnida is in effect
studying over 100,000 named species, simultaneously.
Looking back at the definition of a group, in particular at the property “inverses", we see that
nowhere did it say the inverse has to be unique. However, in our examples of puzzle movements,
and permutations, inverses were unique. Should we have added this as a property? Well, it turns
out that we don’t need to since it is a direct consequence of the properties in the definition.
Theorem 10.1.1 — Uniqueness of Inverses. For each element a in a group G, there is a unique
element b ∈ G such that ab = ba = e.
Proof: Suppose b and c are both inverses of a. Then
b = be identity (property 2)
= b(ac) since ac = e (property 3)
= (ba)c by associativity (property 1)
= ec since ba = e (property 3)
= c identity (property 2).
Therefore b = c, so inverses are unique. 
Since inverses are unique we can unambiguously denote the inverse of a ∈ G by a
−1
.
Previously we observed that permutations under composition satisfied the cancellation property.
This is true of any group.
Theorem 10.1.2 — Cancellation Property. In a group G, the right- and left- cancellation
properties hold: ba = ca implies b = c, and ab = ac implies b = c.
Proof: If ba = ca then (ba)a
−1 = (ca)a
−1
and by associativity, b(aa−1
) = c(aa−1
). Since
aa−1 = e, then be = ce from which it follows that b = c. Left cancellation can be proved in a
similar manner. 
We can define the order of an element of a group in the same way we defined the order of a
permutation.10.1 Group: Definition 119
Definition 10.1.3 — Order of an Element. For an element a of a group G the smallest positive
integer m such that a
m = e is called the order of a. If no such integer exists then a is said to have
infinite order
The order of an element can be thought of as the smallest positive integer that “kills" the
element, and by “kill" we mean reduce it to the identity. The following theorem, which generalizes
Theorem 3.8.2 to any group, tells us that the only integers that “kill" a are multiples of its order.
Theorem 10.1.3 — Order Divides Power. Let a be an element of a group G and k an integer
such that a
k = e, then ord(a) divides k.
Proof: Let m = ord(a), then by the division algorithm (Theorem B.1.1) write k = qm+r for some
integers q and 0 ≤ r < m. Then e = a
k = a
qm+r = (a
m)
qa
r = a
r
, but r < ord(a) therefore r = 0.
Hence ord(a) divides k. 
10.1.1 Multiplication (Cayley) Table
Since a group is merely a set with a way to combine elements (a sort-of multiplication), we can
give the operation in terms of a table, provided the set is finite.
The multiplication table1 of a (finite) group G is a tabulation of the values of the operation ∗.
Let G = {g1,...,gn}. The multiplication table of G is:
* g1 g2 ... gj
... gn
g1
g2
.
.
.
gi gi ∗ gj
.
.
.
gn
This says the entry of the table in row gi and column gj
is the element gi ∗ gj
.
This table must satisfy some basic properties, which are immediate consequences of the
definition of a group:
Lemma 10.1.4 (a) Each element gk ∈ G occurs exactly once in each row of the table.
(b) Each element gk ∈ G occurs exactly once in each column of the table.
(c) If the (i, j)
th entry of the table is equal to the (j,i)
th entry then gi ∗ gj = gj ∗ gi
.
(d) If the table is symmetric about the diagonal & then g ∗ h = h ∗ g for all g,h ∈ G. (In this
case, we call G abelian.)
The proof is left to the reader as Exercise 30.
In the next section we give a number of examples of groups, most of which should already
be familiar to the reader. It is interesting to note that we now know, for those examples and any
others we encounter during the rest of our lives, if the set satisfies the properties of a group then (i)
inverses are unique, and (ii) the cancellation property holds. This is the power of abstraction!
1Also known as a Cayley table, after noted English mathematician Arthur Cayley (1821-1895)120 Chapter 10. Groups
10.2 Some Everyday Examples of Groups
Now that we have a formal description of a group, our first job is to notice we already familiar with
many examples.
(1) The set of integers Z, the set of rational numbers Q, and the set of real numbers R, are all
groups under ordinary addition. The identity is 0 in each case, and the inverse of a is its
negative −a.
(2) The set of non-zero rational numbers Q∗ = {r ∈ Q | r 6= 0} is a group under ordinary
multiplication. The identity is 1, and the inverse of r is 1/r.
Similarly, the set of non-zero real numbers R
∗ = {r ∈ R | r 6= 0} is a group under ordinary
multiplication. The identity is 1, and the inverse of r is 1/r.
Note, that we had to leave out 0, since it doesn’t have a multiplicative inverse, i.e. there is no
rational number r such that r· 0 = 1. In other words, Q is not a group under multiplication.
The set of non-zero integers Z
∗ = {n ∈ Z | n 6= 0} is not a group under ordinary multiplication,
since it is not closed under taking inverses. For example, the inverse of 2 is 1
2
, but 1
2
is not in
Z
∗
.
(3) The set R
3 = {(a1,a2,a3) | a1,a2,a3 ∈ R} is a group under componentwise addition:
(a1,a2,a3) + (b1,b2,b3) = (a1 +b1,a2 +b2,a3 +b3).
The identity is (0,0,0) and the inverse of (a1,a2,a3) is (−a1,−a2,−a3).
In general, the set of all n-tuples of real numbers R
n = {(a1,a2,...,an) | a1,a2,...,an ∈ R}
is a group under componentwise addition:
(a1,a2,a3,...,an) + (b1,b2,b3,...,bn) = (a1 +b1,a2 +b2,a3 +b3,...,an +bn).
The identity is (0,0,0,...,0).
(4) A rectangular array of the form 
a b
c d 
, where a,b, c,d ∈ R, is called a 2×2 (real) matrix.
The set of all 2×2 matrices is denoted by M2,2(R):
M2,2(R) =  a b
c d 
| a,b, c,d ∈ R

.
If we define the addition of two matrices to be componentwise:

a b
c d 
+

w x
y z 
=

a+w b+x
c+y d +z

,
then M2,2(R) is a group under this addition. The identity is 
0 0
0 0 
and the inverse of

a b
c d 
is 
−a −b
−c −d

.
In general, for positive integers n and m, the set of all matrices with n rows and m columns,
the so-called n×m matrices, Mn×m(R) is a group under componentwise addition.
Mn,m(R) =





a1,1 a1,2 ··· a1,m
a2,1 a2,2 ··· a2,m
an,1 an,2 ··· an,m

 | ai, j ∈ R



.10.2 Some Everyday Examples of Groups 121
(5) General Linear Group. The determinant of a 2×2 matrix A =

a b
c d 
is the number
det(A) = ad −bc. The set of all 2×2 matrices with non-zero determinant,
GL(2,R) = {A ∈ M2,2(R) | det(A) 6= 0}.
under matrix multiplication:

a b
c d   w x
y z 
=

aw+by ax+bz
cw+dy cx+dz 
is a group. The identity is I =

1 0
0 1 
, and the inverse of 
a b
c d 
is  d
ad−bc
−b
ad−bc
−c
ad−bc
a
ad−bc

.
(Check.)
In general, the set of invertible n×n matrices GL(n,R), under matrix multiplication, is a
group. It is called the general linear group of n×n matrices over R. This follows from the
properties that det(AB) = det(A)det(B) and A is invertible if and only if det(A) 6= 0. These
statements are proved in any elementary course in linear algebra.
(6) Special Linear Group. The set of n×n matrices with determinant 1 is a group under matrix
multiplication. This group is denoted by SL(n,R) and is called the special linear group of
n×n matrices over R.
SL(n,R) = {A ∈ GL(n,R) | det(A) = 1}.
To see why it is closed under multiplication, suppose A,B ∈ SL(n,R). Then det(A) = 1 and
det(B) = 1, but then det(AB) = det(A)det(B) = 1 · 1 = 1, by the property of determinants.
Therefore, AB ∈ SL(n,R). Moreover, since det(A
−1
) = 1
det(A) =
1
1 = 1 then A
−1 ∈ SL(n.R).
(7) Translations. For each (a,b) ∈ R
2
, define Ta,b : R
2 → R
2 by
(x, y) 7→ (x+a, y+b).
Think of Ta,b as a function which translates each point in the plane R
2
in the direction of the
vector (a,b). The set of all such functions Ta,b:
T (R
2
) = {Ta,b | a,b ∈ R}
is a group under function composition. To see this, notice that
(Ta,b ◦Tc,d)(x, y) = Ta,b(Tc,d(x, y)) = Ta,b(x+c, y+d) = (x+a+c, y+b+d) = Ta+c,b+d(x+y)
for all (a, y) ∈ R
2
. Therefore, Ta,b ◦ Tc,d = Ta+c,b+d, so T (R
2
) is closed under composition.
Moreover, T0,0 is the identity, and the inverse of Ta,b is T−a,−b. Function composition is
always associative. The elements in T (R
2
) are called translations of R
2
.
Similarly we could define the group of translations of R
n
, for any positive integer n, as
T (R
n
) = {Ta1,...,an
: R
n → R
n
| ai ∈ R}
where Ta1,...,an
(x1,..., xn) = (x1 +a1,..., xn +an).122 Chapter 10. Groups
(8) Linear Transformations. A linear transformation of R
n
is a function T : R
n → R
n
such that
T(a~v+~w) = aT(~v) +T(~w) for all~v,~w ∈ R
n
and a ∈ R. The set of all linear transformations
L(R
n
) of R
n
, for a positive integer n:
L(R
n
) = {T : R
n → R
n
| T is a linear transformation}
is a group under function addition: for T,U ∈ L(R
n
) define T +U by
(T +U)(~v) = T(~v) +U(~v).
To see why, first we note that T +U is a linear transformation since
(T +U)(a~v+~w) = T(a~v+~w) +U(a~v+~w) = aT(~v) +T(~w) +aU(~v) +U(~w)
= a(T(~v) +U(~v)) + (T(~w+U(~w))
= a(T +U)(~v) + (T +U)(~w).
So L(R
n
) is closed under addition. Moreover, the linear transformation~v 7→~0 is the identity,
and for any T the inverse is −T. Since addition in R is associative, so is addition in L(R
n
).
Some of the previous examples have the property that the group operation is commutative, that
is ab = ba for all a,b ∈ G. Groups with this property are called abelian. Named after Niel Abel, a
noted Norwegian mathematician who studied such groups in the 1820’s. Groups where there exist
elements that do not commute are called non-abelian.
10.3 Further Examples of Groups
Now we’ll present a few more examples of groups. These are the examples that will be important
for us in this course since we will use them quite frequently.
10.3.1 Symmetric and Alternating Groups
A permutation of a set X is a bijection X → X. The set of all permutations of a set X, is a group
under composition. This set is denoted by SX and called it the symmetric group of X.
SX = {α : X → X | α is a bijection}.
In the case where X is the set [n] = {1,2,3,...,n} then we denoted S[n]
simply by Sn, and called
it the symmetric group of degree n.
The set of even permutations An in Sn is also a group. Since it is a subset of Sn we call it a
subgroup of Sn.
For example, consider A4: the set of even permutations of degree 4. We know |A4| =
4!
2 = 12
and we can list all the permutations in A4 as follows:
ε = (1), σ1 = (1 2)(3 4), σ2 = (1 3)(2 4), σ3 = (1 4)(2 3),
σ4 = (1 2 3), σ5 = (1 3 2), σ6 = (1 2 4), σ7 = (1 4 2),
σ8 = (1 3 4), σ9 = (1 4 3), σ10 = (2 3 4), σ11 = (2 4 3).
We can compute all possible products of two elements of the group and display them in a
multiplication table. This table contains all the information of the group A4. For example, the
inverse of σ6 is σ7 since ε appears as table entry σ6σ7. Also, A4 is not abelian, since the table is
not symmetric about the diagonal line &.10.3 Further Examples of Groups 123
ε σ1 σ2 σ3 σ4 σ5 σ6 σ7 σ8 σ9 σ10 σ11
ε ε σ1 σ2 σ3 σ4 σ5 σ6 σ7 σ8 σ9 σ10 σ11
(1,2)(3,4) = σ1 σ1 ε σ3 σ2 σ8 σ10 σ9 σ11 σ4 σ6 σ5 σ7
(1,3)(2,4) = σ2 σ2 σ3 ε σ1 σ11 σ6 σ5 σ8 σ7 σ10 σ9 σ4
(1,4)(2,3) = σ3 σ3 σ2 σ1 ε σ7 σ9 σ10 σ4 σ11 σ5 σ6 σ8
(1,2,3) = σ4 σ4 σ11 σ7 σ8 σ5 ε σ3 σ10 σ6 σ1 σ2 σ9
(1,3,2) = σ5 σ5 σ9 σ10 σ6 ε σ4 σ8 σ2 σ3 σ11 σ7 σ1
(1,2,4) = σ6 σ6 σ10 σ9 σ5 σ2 σ11 σ7 ε σ1 σ4 σ8 σ3
(1,4,2) = σ7 σ7 σ8 σ4 σ11 σ9 σ3 ε σ6 σ10 σ2 σ1 σ5
(1,3,4) = σ8 σ8 σ7 σ11 σ4 σ10 σ1 σ2 σ5 σ9 ε σ3 σ6
(1,4,3) = σ9 σ9 σ5 σ6 σ10 σ3 σ7 σ11 σ1 ε σ8 σ4 σ2
(2,3,4) = σ10 σ10 σ6 σ5 σ9 σ1 σ8 σ4 σ3 σ2 σ7 σ11 ε
(2,4,3) = σ11 σ11 σ4 σ8 σ7 σ6 σ2 σ1 σ9 σ5 σ3 ε σ10
We can use SageMath to construct multiplication tables. The command to use is cayley_table().
In [1]: A4= AlternatingGroup (4)
A4. cayley_table ()
Out[1]: * a b c d e f g h i j k l
+ - - - - - - - - - -- - - - - - - - - - - - - -
a| a b c d e f g h i j k l
b| b c a f d e h i g l j k
c| c a b e f d i g h k l j
d| d g j a h k b e l c f i
e| e i k c g l a f j b d h
f| f h l b i j c d k a e g
g| g j d k a h e l b i c f
h| h l f j b i d k c g a e
i| i k e l c g f j a h b d
j| j d g h k a l b e f i c
k| k e i g l c j a f d h b
l| l f h i j b k c d e g a
Notice that we have no idea which element of A4 each letter represents. We can use the
command column_keys() to find out.
In [2]: A4. cayley_table (). column_keys ()
Out[2]: (() , (2 ,3 ,4) , (2 ,4 ,3) , (1 ,2)(3 ,4) , (1 ,2 ,3) , (1 ,2 ,4) , (1 ,3 ,2) ,
(1 ,3 ,4) , (1 ,3)(2 ,4) , (1 ,4 ,2) , (1 ,4 ,3) , (1 ,4)(2 ,3))
This tells us the order the elements appear in the column and row headings. In other words,
a = (), b = (2 3 4), etc. We can change the order of the elements in the table by creating a list
with the order we want, then passing the list to cayley_table() using the optional argument
elements=.
In [3]: A4list =["()", " (1 ,2)(3 ,4) ", " (1 ,3)(2 ,4) ", " (1 ,4)(2 ,3) ", "(1 ,2 ,3)",
"(1 ,3 ,2)", "(1 ,2 ,4)", "(1 ,4 ,2)", "(1 ,3 ,4)", "(1 ,4 ,3)", "(2 ,3 ,4)",
"(2 ,4 ,3)"]
A4. cayley_table ( elements = A4list )124 Chapter 10. Groups
Out[3]: * a b c d e f g h i j k l
+ - - - - - - - - - -- - - - - - - - - - - - - -
a| a b c d e f g h i j k l
b| b a d c i k j l e g f h
c| c d a b l g f i h k j e
d| d c b a h j k e l f g i
e| e l h i f a d k g b c j
f| f j k g a e i c d l h b
g| g k j f c l h a b e i d
h| h i e l j d a g k c b f
i| i h l e k b c f j a d g
j| j f g k d h l b a i e c
k| k g f j b i e d c h l a
l| l e i h g c b j f d a k
We can also change the names it uses to represent the elements. We first create a list of “names",
in precisely the same order as our elements are listed in A4list, then pass this to cayley_table()
using the optional argument names=.
In [4]: A4names =["1", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9",
"s10", "s11"]
A4. cayley_table ( names = A4names , elements = A4list )
Out[4]: * 1 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11
+ - - - - - - - - - -- - - - - - - - - - - - - - - - - - - - -- - - - - - - - - - - - - - - - -
1| 1 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11
s1| s1 1 s3 s2 s8 s10 s9 s11 s4 s6 s5 s7
s2| s2 s3 1 s1 s11 s6 s5 s8 s7 s10 s9 s4
s3| s3 s2 s1 1 s7 s9 s10 s4 s11 s5 s6 s8
s4| s4 s11 s7 s8 s5 1 s3 s10 s6 s1 s2 s9
s5| s5 s9 s10 s6 1 s4 s8 s2 s3 s11 s7 s1
s6| s6 s10 s9 s5 s2 s11 s7 1 s1 s4 s8 s3
s7| s7 s8 s4 s11 s9 s3 1 s6 s10 s2 s1 s5
s8| s8 s7 s11 s4 s10 s1 s2 s5 s9 1 s3 s6
s9| s9 s5 s6 s10 s3 s7 s11 s1 1 s8 s4 s2
s10 | s10 s6 s5 s9 s1 s8 s4 s3 s2 s7 s11 1
s11 | s11 s4 s8 s7 s6 s2 s1 s9 s5 s3 1 s10
And there is our multiplication table, labeled exactly how we wanted.
Exercise 10.1 Construct a multiplication table for S3. First list the elements of S3 then work
out the table. Check your resulting table by using SageMath. 
Answer on page 137
10.3.2 Finite Cyclic Groups
Consider the set of Rubik’s cube moves G = {ε,R, R
2
,R
3}. Notice that the composition of any
moves in this set is still in this set. For example, move R followed by move R
2
is move R
3
,
similarly move R3
followed by move R2
is move R. In other words,
RR2 = R
3
, and R3R
2 = R.
Each element has an inverse, R−1 = R
3
and (R
2
)
−1 = R
2
.
It follows that this set G is a group. It has the particular property that every element in G is
some power of R (even the identity is a power of R: ε = R
0 = R
4
). A group with this property is
called a cyclic group.10.3 Further Examples of Groups 125
Definition 10.3.1 — Cyclic Group. A group G is called cyclic if there is one element in G, say
g, so that every other element of G is a power of g:
G = {g
k
| k ∈ Z}.
In this case we write G = hgi, and say g is a generator for G.
If g has order n then G = {e,g,g
2
,g
3
,...,g
n−1} and we say G is a cyclic group of order n.
In the case when the group operation is addition then G is cyclic if every other element is a
multiple of g: G = {kg | k ∈ Z}.
In our example, G is a cyclic group of order 4, since it has four elements, and it is generated by
R.
The multiplication table for G is
G ε R R2 R
3
ε ε R R2 R
3
R R R2 R
3
ε
R
2 R
2 R
3
ε R
R
3 R
3
ε R R2
As another example consider the move sequence α = R
2U
2 of the Rubik’s cube. This move
has order 6, and if we consider the set of all powers of this move, we get a cyclic group of order 6:
H = hαi = {ε,α,α
2
,α
3
,α
4
,α
5
}.
The multiplication table for H is
H ε α α2 α
3 α
4 α
5
ε ε α α2 α
3 α
4 α
5
α α α2 α
3 α
4 α
5
ε
α
2 α
2 α
3 α
4 α
5
ε α
α
3 α
3 α
4 α
5
ε α α2
α
4 α
4 α
5
ε α α2 α
3
α
5 α
5
ε α α2 α
3 α
4
You may have noticed that in each of our examples all elements commute under the operation.
In other words, the group is abelian. This is true for any cyclic group.
Theorem 10.3.1 — Cyclic Groups are Abelian. Let G be a cycle group. For any a,b ∈ G,
ab = ba.
Proof: Let G = hgi. For a,b ∈ G there exist r and s such that a = g
r
and b = g
s
, and so
ab = g
rg
s = g
r+s = g
s+r = g
sg
r = ba. 
In the examples above each element is determined precisely by the power of R (or α), so let’s
write out the multiplication table where we just write i, in place of Ri
(or α
i
).
G 0 1 2 3
0 0 1 2 3
1 1 2 3 0
2 2 3 0 1
3 3 0 1 2
H 0 1 2 3 4 5
0 0 1 2 3 4 5
1 1 2 3 4 5 0
2 2 3 4 5 0 1
3 3 4 5 0 1 2
4 4 5 0 1 2 3
5 5 0 1 2 3 4126 Chapter 10. Groups
These tables represent the way we "multiply" in G and H. If we look closely we see that to
multiply α
2
and α
4 we just add the exponents, and if the sum is larger than 5 then we take the
remainder when divided by 6. So in this case 2+4 = 6 which has remainder 0 when divided by 6.
In the next section, we investigate this "remainder" operation on the set of integers.
10.3.3 Group of Integers Modulo n: Zn
Consider the set Z12 = {0,1,2,3,4,5,6,7,8,9,10,11}. We define the operation +12 to be addition
modulo 12. By this we mean a+12 b is the remainder of a+b when divided by 12. This type of
addition is familiar to anyone who adds time on a clock. For example, if it is 8-o’clock, then 6
hours later is 8+12 6 = 2, or 2-o’clock.
Some examples are: 2+12 3 = 5, 7+12 5 = 0, since 7+5 = 12 which is divisible by 12, and
11+12 10 = 9, since 11+10 = 21 which has remainder 9 when divided by 12. In SageMath re￾mainders are computed using the operator %.
In [5]: (2+3)%12
Out[5]: 5
In [6]: (7+5)%12
Out[6]: 0
In [7]: (11+10)%12
Out[7]: 9
Is Z12 a group under this "new" addition +12? Let’s check the properties one-by-one.
closed: Since the remainder will always be a number between 0 and 11 then Z12 is certainly
closed under +12.
associative: This addition is associative, since it is built from regular addition of integers which
is associative.
identity: The identity is 0, since 0+12 b = b for all b ∈ Z12.
inverses: What is the inverse of an element? For example, what is the inverse of 3? This would
be a number b such that 12 divides 3+b. The number 12−3 = 9 has this property. So the inverse
of 3 is 9. In general, the inverse of a is 12−a.
It follows that Z12 is a group.
There was nothing special about 12 in this example, other than it being familiar to us from our
experience dealing with clocks. We can really do this for any positive integer n.
Definition 10.3.2 Let n > 1 be and integer. Define an operation on the set Zn = {0,1,2,3,...,n−
1}, called addition modulo n, as follows. For a,b ∈ Zn, let a +n b be the remainder of a + b
when divided by n. Zn is a group under addition modulo n, and is called the (additive) group
of integers modulo n. Since this group is cyclic it is often called the (additive) cyclic group of
order n.
The group Zn is also usually denoted by Z/nZ, which is read ”Z mod n Z".
Why is Zn cyclic? Each element of Zn can be obtained from 1 by repeatedly adding 1 to itself.
Note, our group operation is addition so the analogy of a “power" is a multiple. Since every element
of Zn is a suitable multiple of 1 then Zn = h1i.
Notation & Terminology:10.3 Further Examples of Groups 127
If a, b, and n are integers we say a is congruent to b modulo n if n | b−a and we write a ≡ b
mod n. For example, 15 ≡ 3 mod 12, and 6 ≡ 2 mod 4, but 7 6≡ 3 mod 5 since 5 6 | 7−3.
Addition of two integers, a and b, modulo n, which we denoted as a+n b is often denoted by
a+b mod n.
For example, 11+12 10 = 9 is more commonly written as 11+10 ≡ 9 mod 12.
In Section 10.3.2 we saw the multiplication tables for G and H, written only using the exponents,
are precisely the groups Z4 and Z6. This observation, is true in general, in the sense that every finite
cyclic group is essentially Zn for some integer n. The only difference it just how the elements were
named, which is superficial.
Finite cyclic groups are built into SageMath with the command CyclicPermutationGroup().
As the name suggests, cyclic groups are constructed using permutations. Lets look at an example.
In [8]: Z5= CyclicPermutationGroup (5)
Z5. list ()
Out[8]: [() , (1 ,2 ,3 ,4 ,5) , (1 ,3 ,5 ,2 ,4) , (1 ,4 ,2 ,5 ,3) , (1 ,5 ,4 ,3 ,2)]
Here, Z5 is represented by using the 5-cycle (1 2 3 4 5) as a generator. We can compute the
multiplication table by first telling SageMath how to name the elements.
In [9]: Z5list =["()", "(1 ,2 ,3 ,4 ,5)", "(1 ,3 ,5 ,2 ,4)", "(1 ,4 ,2 ,5 ,3)", "(1 ,5 ,4 ,3 ,2)"]
Z5names =["0","1","2","3","4"]
Z5. cayley_table ( names = Z5names , elements = Z5list )
Out[9]: * 0 1 2 3 4
+ - - - - - - - - - -
0| 0 1 2 3 4
1| 1 2 3 4 0
2| 2 3 4 0 1
3| 3 4 0 1 2
4| 4 0 1 2 3
If one wants to work with Zn where the elements are {0,1,...,n−1}, rather than permutations,
then this can be done using IntegerModRing(). Though, for just doing calculations we would
use the modulo operator %, as in the clock example above.
In [10]: Z5= IntegerModRing (5)
Z5. list ()
Out[10]: [0 , 1 , 2 , 3 , 4]
In [11]: Z5 (3)+ Z5 (4)
Out[11]: 2
Exercise 10.2 Construct a Cayley table for Z7 = {0,1,2,3,4,5,6}, under addition modulo 7.
Check your results using SageMath. 
Answer on page 137
Example 10.1 Determine the order of each element in Z12 = {0,1,2,3,4,5,6,7,8,9,10,11}.
1 has order 12. Since 6 · 2 ≡ 2+2+2+2+2+2 ≡ 0 mod 12 then 2 has order 6. Similarly
4 · 3 ≡ 0 mod 12 so 3 has order 4. Continuing in this way we find:128 Chapter 10. Groups
k elements of order k
1 0
2 6
3 4,8
4 3,9
6 2,10
12 1,5,7,11
It follows that 1,5,7, and 11 are all generators of Z12. That is,
Z12 = h1i = h5i = h7i = h11i.
A few curious things to note: (i) the only orders that show up are divisors of 12, and (ii) the
generators of Z12 are the elements relatively prime to 12. Are these coincidences? We’ll see in
Corollary 11.4.2 and Theorem 11.5.4 that these observations are not coincidences. 
10.3.4 Group of Units Modulo n: U(n)
You may wonder if we can do the same thing with multiplication, instead of addition, on Zn. That
is, does Zn form a group under multiplication modulo n, which we denote by ·n?
First we notice that the identity would be 1, but of course 0 doesn’t have a (multiplicative)
inverse. So let’s take 0 out of consideration, and just focus on the set Z
∗
n = {1,2,3,...,n−1}.
As an example consider Z
∗
6 = {1,2,3,4,5}. Lets check to see if this set is closed under
multiplication modulo 6. Well, 3 ·6 5 = 3 ∈ Z
∗
6
, so far so good. But 2 ·6 3 = 0 6∈ Z
∗
6
. Therefore, Z
∗
6
is definitely not closed under multiplication, so it is not a group.
But all is not lost. It just seems that some elements in Z
∗
6
are just trouble-makers. Their presence
prevents it from being closed under multiplication. Who are these trouble makers? Lets find out.
1 ·6 2 = 2 1 ·6 3 = 3 1 ·6 4 = 4 1 ·6 5 = 5
2 ·6 2 = 4 2 ·6 3 = 0 6∈ Z
∗
6
2 ·6 4 = 2 2 ·6 5 = 4
3 ·6 3 = 3 3 ·6 4 = 0 6∈ Z
∗
6
3 ·6 5 = 3 4 ·6 4 = 4
4 ·6 5 = 2 5 ·6 5 = 1
The elements 2, 3 and 4 seem to be causing the problems. These are precisely the elements
that have a factor in common with 6. Is this a coincidence? Not at all, the remainder of division
by 6 will always be between 0 and 5, and since Z
∗
6
does not contain 0, the trouble makers are the
numbers whose products are divisible by 6. For two numbers a,b ∈ Z
∗
6
to have a product divisible
by 6, they each must have a factor in common with 6.
We say two numbers are relatively prime if they do not have a common prime factor. If two
numbers have a common factor then we say they are not relatively prime. Note that if two numbers
are relatively prime, then they have no common prime factor, and so their greatest common divisor
is 1. This means a and b are relatively prime if and only if gcd(a,b) = 1. See Appendix B for more
information on greatest common divisors.
We have just determined that the trouble makers are the numbers which are not relatively prime
to 6. Namely, 2, 3, and 4.
Therefore, consider just the set of numbers in Z
∗
6
that are relatively prime to 6: This set is
denoted by U(6):
U(6) = {1,5}.
This set is a group! The inverse of 5 is itself. The multiplication table is:10.3 Further Examples of Groups 129
U(6) 1 5
1 1 5
5 5 1
In [12]: U6 =[m for m in range (0 ,6) if gcd(m ,6)==1]
Out1, 5:
The previous construction can be done for any integer n in place of 6. This is the next definition.
Definition 10.3.3 — Group of Units Modulo n. Let n > 1 be and integer, and let
U(n) = {m | 1 ≤ m ≤ n−1 and gcd(m,n) = 1}.
U(n) is a group under multiplication modulo n, and is called the group of units modulo n.
In the case when p is prime, U(p) = Z
∗
p = {1,2,3,..., p−1}.
The number of elements in U(n) is precisely the integers between 1 and n which are relatively
prime to n. There is an important number-theoretic function, called Euler’s φ-function, denoted by
φ, which calculates this number: φ(n) = |U(n)|. See Section B.4 in Appendix B for information
on this function including a simple formula to calculate its value from the prime factorization of n.
Euler’s φ-function is implemented in SageMath, under the command euler_phi(). For
example, here we see φ(6) = 2.
In [13]: euler_phi (6)
Out[13]: 2
Exercise 10.3 Determine the elements of the set U(8), and construct the multiplication table. 
Answer on page 137
Example 10.2 In this example we will investigate the group U(18), which has 6 elements.
In [14]: euler_phi (18)
Out[14]: 6
Of course, we could have done this by hand (or use SageMath code similar to the example
we did for U(6)). We would just go through the numbers from 1 to 18 and omit any that have a
factor of 2 or 3.
U(18) = {1,5,7,11,13,17}.
What is the inverse of 11? One way is to compute the product of 11 with each element of U(18)
and check when we get 1:
In [15]: for m in [1 , 5 , 7, 11 , 13 , 17]:
if 11*m %18==1:
print m
Out[15]: 5
Therefore 11−1 = 5 in U(18).130 Chapter 10. Groups
A more efficient way to find the inverse is to use the Extended Euclidean Algorithm: If a
and b are integers and gcd(a,b) = d then there must be integers u and v so that ua+vb = d
(see Theorem B.1.4 in Appendix B). The standard algorithm for finding the gcd is called the
Euclidean Algorithm, and the algorithm for producing numbers u and v is called the Extended
Euclidean Algorithm. For details of these algorithms see Appendix B. These algorithms are
implemented in SageMath, so we can use them.
In [16]: d,u,v = xgcd (11 ,18)
print u,v
Out[16]: 5 , -3
How does this help us find 11−1
? Well, the Extended Euclidean Algorithm has returned
three numbers: the first is 1 which is the gcd, the other two, 5 and −3, have the property that
5(11)+ (−3)(18) = 1. This means 5(11) has remainder 1 when divided by 18. Which is exactly
what it means for 5 to be an inverse of 11.
To find the inverse of 13 we can do the same thing, and get 13−1 = 7.
In [17]: d,u,v = xgcd (13 ,18)
sage : print u,v
Out[17]: 7 , -5
We can write a function called inverse that will return the inverse of a in U(m).
In [18]: def inverse (a,m):
d,u,v= xgcd (a,m)
if d ==1:
return u%m # return inverse as a number between 1 and m -1
else :
return a, "is not in U group " # just in case a is not in U(m)
inverse (11 ,18)
Out[18]: 5
In [19]: inverse (13 ,18)
Out[19]: 13
Actually, SageMath already has a built in inverse function ofU(n). The syntax is inverse_mod(a,n)
and it returns the inverse of a in U(n).
To compute the order of an element, we can take successive powers until we hit the identity.
As an example, we determine the order of 11 is 6.
In [20]: for n in (1..6):
print n, 11^n%18
Out[20]: 1 11
2 13
3 17
4 7
5 5
6 110.3 Further Examples of Groups 131
We can also create a function to do this. We’ll see next lecture that the order of an element
must divide the order of the group so we can limit the exponents we need to check. The function
divisors(m) returns a list of the divisors of m, arranged from smallest to largest. Recall
|U(m)| = φ(m), the Euler φ-function.
In [21]: def order (a,m):
if gcd(a,m )==1: # first check that a is in U(m)
for k in divisors ( euler_phi (m)): # order divides |U(m)|
if a^k%m ==1:
return k
else :
return a, "is not in U group "
order (5 ,18)
Out[21]: 6
In [22]: order (13 ,18)
Out[22]: 3
It follows that U(18) is a cyclic group generated by 5:
U(18) = h5i.
The element 11 also generates the group.
U(18) has proper subgroups {1}, {1,17}, and {1,7,13}.

10.3.5 Dihedral Groups: Dn
Consider a square as shown in Figure 10.1a. We want to determine all the ways we can pick up the
square, move it in some way, then put it back in the original space it occupied. If an observer didn’t
see us pick it up, but only saw it before and after, they shouldn’t notice any change. For example,
we could rotate it 90 degrees, or we could flip it over a horizontal line. We’d like to determine all
possible ways we could have moved the square. In some sense, the number of ways we can do this
is related to how “symmetric" a square is.
(a) (b)
Figure 10.1: A square and its lines of symmetry.
Let G denote the set of ways in which we can move the square. To keep track of the motions,
we can label the vertices of the squares as 1,2,3,4, see Figure 10.1b, and each motion corresponds132 Chapter 10. Groups
to a permutation of the labels on the vertices. In Table 10.1 we list the elements of G: G =
{R0,R90,R180,R270,H,V,D,D
0}.
notation description permutation
R0 rotation of 0◦
(i.e. do nothing) ε
R90 rotation of 90◦
(clockwise) (1 2 3 4)
R180 rotation of 180◦
(clockwise) (1 3)(2 4)
R270 rotation of 270◦
(clockwise) (1 4 3 2)
H reflection of 180◦
about horizontal axis (1 4)(2 3)
V reflection of 180◦
about vertical axis (1 2)(3 4)
D reflection of 180◦
about diagonal axis (see Figure 10.1b) (2 4)
D
0
reflection of 180◦
about other diagonal axis (see Figure 10.1b) (1 3)
Table 10.1: Symmetries of the square
We can combine elements of G through consecutive motions. For example, R90H means first
rotate by 90◦
, then reflect about the horizontal axis. The resulting motion is equivalent to D
0
. We
can see this by actually doing both motions R90H and D
0
and observing they do exactly the same
thing. Or we could compose their corresponding permutations: (1 2 3 4)(1 4)(2 3) = (1 3).
G is a group under this way of composing moves. It is the group of symmetries of the square,
or more commonly called the dihedral group of order 8, and denoted by D4. The multiplication
table for D4 is
D4 R0 R90 R180 R270 H V D D0
R0 R0 R90 R180 R270 H V D D0
R90 R90 R180 R270 R0 D
0 D H V
R180 R180 R270 R0 R90 V H D0 D
R270 R270 R0 R90 R180 D D0 V H
H H D V D0 R0 R180 R90 R270
V V D0 H D R180 R0 R270 R90
D D V D0 H R270 R90 R0 R180
D
0 D
0 H D V R90 R270 R180 R0
The analysis carried out for a square can similarly be done for any regular n-gon, Pn (where
n ≥ 3). See Figure 10.2 for some familiar n-gons. If n = 3 then P3 is an equilateral triangle. If
n = 4 then P4 is a square as we just considered. If n = 5 then P5 is a regular pentagon, and so on.
The corresponding group is denoted by Dn and is called the dihedral group of order 2n.
Dihedral groups are frequently found in art and nature, and they are a very important type of
group used by mineralogists to study crystals.
You may wonder where the “2n" comes from in the name. Looking back at the square we
see that there are 8 motions preserving the square (we call these the symmetries of the square).
Four were rotations, and four were reflections. This is true for any regular n-gon. There will be n
rotational symmetries and n reflective symmetries, for a total of 2n.
Dihedral groups are built into SageMath. Each element is represented as permutations of the
vertices of the n-gon. Here is an example with D4.
In [23]: D4= DihedralGroup (4)
D4. list () # lists the elements of D4
Out[23]: [() , (2 ,4) , (1 ,2)(3 ,4) , (1 ,2 ,3 ,4) , (1 ,3) , (1 ,3)(2 ,4) , (1 ,4 ,3 ,2) , (1 ,4)(2 ,3)]10.3 Further Examples of Groups 133
Figure 10.2: Some regular n-gons.
We can assign each element to a name. For example, (1,2,3,4) corresponds to the 90◦
rotation
R90.
In [24]: R90 =D4("(1 ,2 ,3 ,4)")
R180 =D4(" (1 ,3)(2 ,4) ")
R270 =D4("(1 ,4 ,3 ,2)")
H=D4(" (1 ,4)(2 ,3) ")
V=D4(" (1 ,2)(3 ,4) ")
D=D4("(2 ,4)")
Dp=D4("(1 ,3)") # we use Dp for D’
We can now compute products. For example, we see R90D = H.
In [25]: R90 *D
Out[25]: (1 ,4)(2 ,3)
The full multiplication table for D4 can be computed in SageMath as follows.
In [26]: D4list =["()", "(1 ,2 ,3 ,4)", " (1 ,3)(2 ,4) ", "(1 ,4 ,3 ,2)", " (1 ,4)(2 ,3) ",
" (1 ,2)(3 ,4) ", "(2 ,4)", "(1 ,3)"]
D4names =["R0","R90"," R180 "," R270 ","H","V","D","D’"]
D4. cayley_table ( names = D4names , elements = D4list )
Out[26]: * R0 R90 R180 R270 H V D D’
+ - - - - - - - - -- - - - - - - - - - - - - - - - - - - - -- - - - - - - - - -
R0| R0 R90 R180 R270 H V D D’
R90 | R90 R180 R270 R0 D’ D H V
R180 | R180 R270 R0 R90 V H D’ D
R270 | R270 R0 R90 R180 D D’ V H
H| H D V D’ R0 R180 R90 R270
V| V D’ H D R180 R0 R270 R90
D| D V D’ H R270 R90 R0 R180
D’| D’ H D V R90 R270 R180 R0134 Chapter 10. Groups
10.3.6 Notation for Dn
For a regular n-gon we typically use r to denote a clockwise rotation through 360
n
degrees, and more
generally, r
k
to denote a clockwise rotation through k
360
n
degrees. A reflection through a line of
symmetry is denoted by fi
, for 1 ≤ i ≤ n.
For example, the lines of symmetry for a regular 7-gon are labelled below. Some of the elements
are described in Table 10.2. There are 14 elements in D7:
D7 = {1,r,r
2
,r
3
,r
4
,r
5
,r
6
, f1, f2, f3, f4, f5, f6, f7}.
notation description permutation
1 rotation of 0◦
(i.e. do nothing) ε
r rotation of 360
7
degrees (clockwise) (1 2 3 4 5 6 7)
r
k
rotation of k
360
n
degrees (clockwise) for 1 ≤ k ≤ 7 7-cycle
f1 reflection of 180◦
about f1 line (2 7)(3 6)(4 5)
fi reflection of 180◦
about fi axis for 1 ≤ i ≤ 7 product of three 2-
cycles
Table 10.2: Symmetries of a regular 7-gon
One can check that every element of D7 can be expressed as a product of the form r
k
f
`
1
for
some 0 ≤ k ≤ 6, and 0 ≤ ` ≤ 1. For example, f5 = r
3
f1. We say D7 is generated by r, f1 and write
D7 = hr, f1i.
10.4 Exercises
1. Give two reasons why the set of odd integers under addition is not a group.
2. Show that 
1 1
2 2 
does not have a multiplicative inverse in GL(2,R).
3. Show that the group GL(2,R) is non-abelian by finding two matrices A and B in GL(2,R)
where AB 6= BA.
4. Find the inverse of 
1 2
1 3 
in SL(2,R). First verify it is in SL(2,R).10.4 Exercises 135
5. The group operation ∗ is frequently omitted, for example a ∗ b would just be written as ab.
This is due to the fact that we often refer to the operation as “multiplication". However, when
the operation is addition we keep the + symbol, and we also use 0 for the identity instead of
e. Translate each of the following multiplicative expression into its additive counterpart.
(a) a
2b
(b) b
4a
−3b
(c) (ab3
)
−2
c
3 = e
6. Let G = {a,b, c,d} have an operation ∗ with corresponding multiplication table
∗ a b c d
a a b c d
b b a d c
c c d a b
d d d b c
Is G a group under this operation? Explain.
Dihedral Groups:
Exercises 7 through 13 investigate the dihedral groups.
7. (a) With pictures and words, describe each symmetry in D3 (the set of symmetries of an
equilateral triangle).
(b) Write out a complete multiplication (Cayley) table for D3.
(c) Is D3 abelian (that is, does every element commute with every other element)?
8. With pictures and words, describe each symmetry in D5 (the set of symmetries of a regular
pentagon).
9. For n ≥ 3 describe the elements of Dn. (You will need to consider two cases, depending on
whether n is even or odd.)
10. In Dn, explain geometrically why
(a) a reflection followed by a reflection must be a rotation.
(b) a reflection and a rotation taken together in either order must be a reflection.
11. Is Dn a cyclic group? That is, does Dn = hgi for some g ∈ Dn?
12. Is Dn abelian?
13. If r1, r2, and r3 represent rotations and f1, f2, and f3 represent reflections from Dn, determine
whether f1r3r2 f2r1 f1 is a rotation or reflection.
Group of Integers under addition modulo n:
Exercises 14 through 18 investigate the group of integers modulo n: Zn.
14. List the element of Z2, and write out a multiplication table for this group.
15. Determine the following in Z15
(a) 7+15 6
(b) 13+15 8
(c) 12 · 7
(d) the inverse of
11
(e) the inverse of 3
(f) ord(10)
(g) ord(7)
16. Determine the order of each element in Z10.
17. Determine which elements of Z10 are generators for Z10. That is, find all g ∈ Z10 such that
Z10 = hgi.
18. Find all the elements of g ∈ Z18 for which Z18 = hgi.
Unit Group modulo n:
Exercises 19 through 22 investigate the Unit Groups U(n).
19. Determine the elements of the set U(5), and construct the multiplication table.136 Chapter 10. Groups
20. Determine the elements of the set U(12), and construct the multiplication table.
21. (a) How many elements does U(37) have?
(b) Find the inverse of 25 in U(37).
(c) What is the order of 25.
(d) Is U(37) cyclic? If so, find a generator.
(Hint: use SageMath to help with calculations.)
22. Is U(20) cyclic?
Groups in General:
Exercises 23 through 31 investigate groups in general. Solutions to these exercises should be
based on the four properties listed in the definition of a group, and any theorems which were
consequences of these properties.
23. For any elements a and b from a group G, and any integer n, prove that (b
−1ab)
n = b
−1a
nb.
(We’ve already shown this for permutations, so this question is asking you to verity this is
really just a consequence of group properties.)
24. Let a and b be elements of an abelian group G, and let n be any integer. Show that (ab)
n =
a
nb
n
. Is this true for non-abelian groups? Explain.
25. If a,b ∈ G such that ord(a
2
) = ord(b
2
), is it necessarily true that ord(a) = ord(b)?
26. In a group G show that the number of nonidentity elements that satisfy the equation x
5 = e is
a multiple of 4.
27. Show that if G is a group and a ∈ G such that a
2 = a then a must be the identity.
28. Suppose G = {e,a,b, c,d} is a group with multiplication table
e a b c d
e e
a b e
b c d e
c d a b
d
Fill in the blank entries.
29. Suppose G = {e,a,b, c,d, f } is a group with multiplication table
e a b c d f
e e a b c d f
a a e
b b f
c c e a
d d c a
f f b c a e
Fill in the blank entries.
30. Prove Lemma 10.1.4.
(Hint: The first two parts are really just consequences of the left- and right- cancellation
properties.)
31. Prove that if G is a group with the property that the square of every element is the identity
(i.e. every element has order 2), then G is abelian.
32. Let G be a group with operation ·. For which operation ∗ is the set G a group under ∗?
(a) a ∗ b = b · a
(b) a ∗ b = b
−1
· a · b
(c) a ∗ b = b
−1
· a10.4 Exercises 137
(d) a ∗ b = (a · b)
2
A few more examples of groups:
33. The integers 5 and 15 are among a collection of 12 integers that form a group under multipli￾cation modulo 56. List all 12.
34. Nim Group. Consider the set G = {0,1,2,3,4,5,6,7}. Suppose there is a group operation
∗ on G that satisfies the following two conditions:
(a) a ∗ b ≤ a+b for all a,b in G,
(b) a ∗ a = 0 for all a in G.
Construct the multiplication table for G. This groups is sometimes called the Nim Group due
to its relationship to the game of Nim.
35. Prove that the set of all 3×3 matrices with real entries of the form


1 a b
0 1 c
0 0 1


is a group under matrix multiplication. (This group, sometimes called the Heisenberg group
after the Nobel Prize winning physicist Werner Heisenberg, is intimately related to the
Heisenberg Uncertainty Principle of Quantum Physics.)
Answers to in-chapter exercises:
Exercise 10.1:
ε (1 2) (1 3) (2 3) (1 2 3) (1 3 2)
ε ε (1 2) (1 3) (2 3) (1 2 3) (1 3 2)
(1 2) (1 2) ε (1 2 3) (1 3 2) (1 3) (2 3)
(1 3) (1 3) (1 3 2) ε (1 2 3) (2 3) (1 2)
(2 3) (2 3) (1 2 3) (1 3 2) ε (1 2) (1 3)
(1 2 3) (1 2 3) (2 3) (1 2) (1 3 2) (1 3) ε
(1 3 2) (1 3 2) (1 3) (2 3) (1 2) ε (1 2 3)
Exercise 10.2:
0 1 2 3 4 5 6
0 0 1 2 3 4 5 6
1 1 2 3 4 5 6 0
2 2 3 4 5 6 0 1
3 3 4 5 6 0 1 2
4 4 5 6 0 1 2 3
5 5 6 0 1 2 3 4
6 6 0 1 2 3 4 5
Exercise 10.3: U(8) = {1,3,5,7}
1 3 5 7
1 1 3 5 7
3 3 1 7 5
5 5 7 1 3
7 7 5 3 111. Subgroups
In Lecture 10 we introduced the concept of a group. This is a set equipped with an (associative)
operation that allows us to combine two elements to produce another element in the same set. We
require the set, under this operation, to have an identity, and for every element to have an inverse.
We saw a number of familiar sets and operations which satisfy the property of being a group. In
this lecture we look at subsets of groups.
11.1 Subgroups
Not all subsets of groups are created equal. For example, consider the two subsets of the set of all
Rubik’s cube moves: H = {ε,R,R
2
,R
3} and K = {ε,R,U}. The set H is a group itself as we saw
in 10.3.2. On the other hand, the set K is not a group since, for one thing the product of R and U is
not in K.
If G is a group, and H is a subset of G which is also a group (using the same operation), then
we say H is a subgroup of G, and we write H < G.
Example 11.1 (a) H = {ε,(1 2)} is a subgroup of S3.
(b) The subset G = {ε,(1 2 3 4),(1 4 3 2),(1 3)(2 4),(1 4)(2 3),(1 2)(3 4),(2 4),(1 3)} of
S4 is a subgroup. We could check that every product of elements in G is again in G, and
that each element has an inverse in G. However, we could just observe that G is precisely
D4, the dihedral group of order 8 that we investigated in 10.3.5, so we already know it is
a group.
(c) The subset {0,2,4} is a subgroup of the cyclic group of order 6, Z6 = {0,1,2,3,4,5}. It
is closed since the sum of any two elements in {0,2,4} is still in {0,2,4}. The inverse of
2 is 4 since 2+4 = 0 mod 6.

To verify whether a subset of a group is itself a group we don’t need to start from scratch. For
instance, since the operation on G is associative, then restricting the operation to just elements of140 Chapter 11. Subgroups
a subset H the operation would still have to be associative. This means we don’t need to check
associativity, we get this for free. So we really only need to check (i) H is closed, (ii) the identity is
in H, and (iii) each element of H has an inverse in H. Notice that if we have (i) and (iii) then we
get (ii) for free, since aa−1 = e. This means we have the following test for a subgroup.
Theorem 11.1.1 — Two-Step Subgroup Test. Let G be a group and H a nonempty subset of G.
If
(a) for every a,b ∈ H, ab ∈ H (closed under multiplication), and
(b) for every a ∈ H, a
−1 ∈ H (closed under inverses),
then H is a subgroup of G.
11.2 Examples of Subgroups
Imagine playing with Rubik’s cube but only allowing yourself to use moves U and R. Some
examples of move sequences that you could perform are: RU R
−1 U
2 R
2 U
−1
, RURURURUR,
and (R
2U
2
)
3
. Observe that every move sequence has an inverse involving only R and U, and the
product of any two move sequences is another move sequence involving only R and U. That is, the
set of all such move sequences is a group! We denote this group by hR,Ui.
For any group G, let g1,g2,...,gk be elements in G. Let hg1,g2,...,gki be the set of all elements
of G which can be expressed as products of g1,g2,...,gk and their inverses g
−1
1
,g
−1
2
,...,g
−1
k
:
hg1,g2,...,gki = {x ∈ G | x = g
mi
ji
g
m2
j2
···g
m`
j`
for some indices ji’s and exponents mi ∈ Z},
then hg1,g2,...,gki is the subgroup generated by g1,g2,...,gk.
When k = 1, the group hgi = {g
n
| n ∈ Z} is called a cyclic subgroup of G.
Many of our examples of subgroups will be of these types, and this is how we will construct
groups in SageMath.
(1) Recall S3 = {ε,(1 2),(1 3),(2 3),(1 2 3),(1 3 2)}.
One subgroup of S3 is h(1 2 3)i = {ε,(1 2 3),(1 3 2)}. Check this is indeed a subgroup.
We can list all subgroups of S3 as follows:
hεi = {ε}
h(1 2)i = {ε,(1 2)}
h(1 3)i = {ε,(1 3)}
h(2 3)i = {ε,(2 3)}
h(1 2 3)i = {ε,(1 2 3),(1 3 2)} = h(1 3 2)i
We can check that h(1 2),(1 3)i = S3. What this means is that any element of S3 can be
written as a product involving (1 2) and (1 3). In fact, the subgroup generated by any two
elements will be all of S3 again.
In [1]: S3= SymmetricGroup (3)
a=S3("(1 ,2)")
b=S3("(1 ,3)")
H= PermutationGroup ([a,b]) # forms the group generated by a and b
H== S3 # check if H is equal to the whole group
Out[1]: true
(2) Recall Z10 = {0,1,2,3,4,5,6,7,8,9} and the operation is additional modulo 10. The sub￾groups of Z10 are:
h0i = {0}
h2i = {0,2,4,6,8}11.3 The Center of a Group 141
h5i = {0,5}.
There are no other (proper) subgroups of Z10.
(3) Recall U(10) = {1,3,7,9} and the operation is multiplication modulo 10. Since 3
2 = 9 and
3
3 = 7 then U(10) = h3i. A proper subgroup of U(10) is h9i = {1,9}. Verify this is the only
other proper subgroup of U(10), besides the trivial subgroup {1}.
(4) In S10, the permutations α = (1 2) and β = (1 5 3)(2 4) generate a subgroup H of size 120.
The permutation (1 4 3 2) is in H since αβαβ2 = (1 4 3 2). On the other hand, (8,9,10) 6∈ H,
since any product of α and β would have to fix 10.
In [2]: S10 = SymmetricGroup (10)
a=S10("(1 ,2)")
b=S10("(1 ,5 ,3)(2 ,4) ")
H= PermutationGroup ([a,b]) # could use H=S10. subgroup ([a,b])
H. order ()
Out[2]: 120
In [3]: a*b*a*b^2
Out[3]: (1 ,4 ,3 ,2)
In [4]: S10 ("(1 ,4 ,3 ,2)") in H
Out[4]: true
In [5]: S10 ("(8 ,9 ,10)") in H
Out[5]: false
(5) Some subgroups of the dihedral group D4 = {R0,R90,R180,R270,H,V,D,D
0} are
hR90i = {R0,R90,R180,R270}
hR180i = {R0,R180}
hVi = {R0,V}
hH,Vi = {R0,R180,H,V}
If we construct only the portion of the multiplication table that involves {R0,R180,H,V}
then we can immediately see that it is a subgroup since it is closed under the operation, and
inverses.
In [6]: D4= DihedralGroup (4)
D4sublist =["()"," (1 ,3)(2 ,4) ", " (1 ,4)(2 ,3) ", " (1 ,2)(3 ,4) "]
D4subnames =["R0"," R180 ","H","V"]
D4. cayley_table ( names = D4subnames , elements = D4sublist )
Out[6]: * R0 R180 H V
+ - - - - - - - - - - -- - - - - - - - -
R0| R0 R180 H V
R180 | R180 R0 V H
H| H V R0 R180
V| V H R180 R0
11.3 The Center of a Group
The center of a group G is the subset Z(G) of all elements that commute with every element of G:
Z(G) = {a ∈ G | ag = ga for all g ∈ G}.142 Chapter 11. Subgroups
Theorem 11.3.1 For a group G the center Z(G) is a subgroup of G.
Proof: The identity is in Z(G), therefore Z(G) 6= /0. If a and b are in Z(G) then for any g ∈ G,
(ab)g = a(bg) = a(gb) = (ag)b = (ga)b = g(ab) so ab ∈ G. Also, ag = ga implies ga−1 = a
−1g
so a
−1 ∈ G. Therefore, by the Two-Step subgroup test Z(G) < G. 
Note that Z(G) = G if and only if G is abelian. We’ve shown in Lecture 3 Exercise 9 that for
every non-trivial permutation in Sn, where n ≥ 3, there exists one that does not commute with
it. This means Z(Sn) = {ε}. However, for subgroups of Sn this is not necessarily the case. For
example A3 is abelian and so Z(A3) = A3. Here we verify this in SageMath.
In [7]: A3= AlternatingGroup (3)
A3. center ()
Out[7]: Permutation Group with generators [(1 ,2 ,3)]
In [8]: A3. center (). list ()
Out[8]: [() , (1 ,2 ,3) , (1 ,3 ,2)]
In Section 21.3.1 we determine the center of the Rubik’s cube group.
11.4 Lagrange’s Theorem
Looking back at our examples in last section we make the following observation: the order of a
subgroup divides the order of the group. For example, in S3, which is a group of order 6, all the
subgroups we listed are either of order 1, 2 or 3, which are precisely the divisors of 6. Verify this
observation for the other examples.
This raises the question: Must the order of a subgroup always be a divisor of the order of
the group? If this is true, then it puts a pretty strict condition on the possible subsets that can be
subgroups. For instance, we would be able to quickly conclude that {R0,H,D} is not a subgroup of
D4 since 3 does not divide 8.
It turns out that our observation is true in general. This is known as Lagrange’s Theorem.
Theorem 11.4.1 — Lagrange’s Theorem. If G is a finite group and H is a subgroup of G, then
|H| divides |G|.
We will prove this theorem in Section 18.2 of Lecture 18. Also see Exercise 15 in Lecture 17.
If we consider the subgroup hgi generated by an element g ∈ G, then the order of this subgroup
is precisely the order of g. In other words, our two definitions of the word “order" (both as the size
of a group, and the smallest number n for which g
n = e) agree.
Corollary 11.4.2 — ord(a) divides |G|. In a finite group, the order of each element divides the
order of the group.
Here is some experimental evidence in support of the corollary.
In [9]: n=20
Zn = CyclicPermutationGroup (n)
element_orders =Set ([g. order () for g in Zn ])
element_orders11.5 Cyclic Groups Revisited 143
Out[9]: {1 , 2 , 4 , 5 , 10 , 20}
The orders of the elements in Z20 are all divisors of 20. We could vary n, try dihedral groups or
unit integer groups, etc. In every case, we would find that the order of an element must divide the
order of the group.
As a partial converse to Lagrange’s Theorem (in particular to Corollary 11.4.2) we have the
following.
Theorem 11.4.3 — Cauchy’s Theorem. Let p be a prime dividing |G|. Then there is a g ∈ G
of order p.
Note that for non-prime divisors d of |G| it is not true in general that G contains an element
of order d. For example, A4 is a group of order 12 but it does not contain an element of order 4
(Why?).
We will not prove Cauchy’s theorem.
11.5 Cyclic Groups Revisited
In a cyclic group G = hgi every element is of the form g
k
for some k. If G is infinite then every
distinct power of g is a distinct element of G. Think about Z = h1i under addition as an example
(of course, here we have to reinterpret “power" to mean “multiple" since the group operation is
addition),
If G = hgi is a finite group of order n then G = {e,g,g
2
,...,g
n−1} and g
i = g
j
if and only if
n | j −i.
This means it is fairly easy to work with cyclic groups, since taking products and determining
when two elements are really the same is a straightforward task.
The following theorems list some nice properties that cyclic groups have, including how to find
all subgroups and all elements of a particular order.
Theorem 11.5.1 — Fundamental Theorem of Cyclic Groups. Every subgroup of a cyclic
group is cyclic. Moreover, if |hgi| = n then for each divisor k of n there is exactly one subgroup
of hgi of order k.
Proof: Let G = hgi be a cycle group. First we show that every subgroup of G is cyclic.
Let H < G, and let m be the smallest positive integer such that g
m ∈ H. So hg
mi ⊂ H. We’ll
show that H = hg
mi. To see why, let h ∈ H, then h = g
`
for some integer ` (since h ∈ G = hgi).
By the division algorithm (Theorem B.1.1) write ` = ms+r for some integers m and 0 ≤ r < m.
Therefore h = g
` = (g
m)
sg
r
and so g
r = (g
m)
−sh ∈ H which means r = 0 since m was chosen to be
the smallest positive integer such that g
m ∈ H. Thus h = (g
m)
s ∈ hg
mi. Therefore H ⊂ hg
mi, hence
H = hg
mi.
Now we prove the second part of the theorem. Let k be a divisor of n = |hgi|, and write n = k`.
The subgroup hg
`
i has order k and we’ll show it is the only subgroup of that order. To see why,
suppose there is another subgroup of order k, say hg
mi (we know it is cyclic by the first part of the
theorem). Since g
m has order k then g
mk = e and so, by Theorem 10.1.3, n | mk ⇒ k` | mk ⇒ ` | m.
Therefore hg
mi < hg
`
i, and since they are finite and have the same cardinality then hg
mi = hg
`
i.

Theorem 11.5.2 — Generators of Cyclic Groups. Let G = hgi be a cyclic group of order n.
Then G = hg
k
i if and only if gcd(k,n) = 1.144 Chapter 11. Subgroups
Proof: (=⇒) Suppose G = hg
k
i and let gcd(k,n) = m. Since (g
k
)
n
m = (g
n
)
k
m = e
k
m = e, then n |
n
m
(because g
k has order n), and so m = 1.
(⇐=) Suppose gcd(k,n) = 1, then by the Extended Euclidean Algorithm (Theorem B.1.4) there
exist integers u and v such that ku+nv = 1. Therefore, g = g
ku+nv = (g
k
)
u
(g
n
)
v = (g
k
)
u ∈ hg
k
i, and
so G = hg
k
i. 
Theorem 11.5.3 — Number of elements of each order in a cyclic group.. If d is a divisor
of n, the number of elements of order d in a cyclic group of order n is φ(d).
Proof: Let G be the cyclic group of order n. By Theorem 11.5.1 G has exactly one subgroup, say
H, of order d and it is cyclic. All elements of G of order d must be generators of H, so by Theorem
11.5.2 (applied to H) it follows that H has exactly φ(d) generators. Therefore, G has exactly φ(d)
elements of order d. 
In the specific case when the group is Zn, and the operation is addition, these theorems can be
restated as follows.
Theorem 11.5.4 — Generators, Subgroups, and Orders in Zn. Consider the group of integers
modulo n, Zn.
(a) An integer k is a generator of Zn if and only if gcd(k,n) = 1.
(b) For each divisor k of n, the set hn/ki is the unique subgroup of Zn of order k, moreover,
these are the only subgroups of Zn.
(c) For each k | n the elements of order k are of the form ` ·(n/k) where gcd(`, k) = 1. The
number of such element is φ(k), and each of these is a generator of the unique subgroup of
order k.
Example 11.2 Let’s determine all the subgroups of Z24. By Theorem 11.5.4 the genera￾tors of Z24 are precisely the elements which are relatively prime to 24 = 2
33. These are
1,5,7,11,13,17,19,23.
h1i = Z24
2 is an element of order 12, so it generates a cyclic subgroup of order 12:
h2i = {0,2,4,6,8,10,12,14,16,18,20,22}.
The other generators are k · 2 where k is relatively prime to 12. Since there are φ(12) = 4
numbers relatively prime to 12, namely {1,5,7,11} then the other generators of this subgroup
are 5 · 2 = 10, 7 · 2 = 14, 11 · 2 = 22.
3 is an element of order 8, so it generates a cycle subgroup of order 8:
h3i = {0,3,6,9,12,15,18,21}.
Other generators of this subgroup are m · 3 where m is relatively prime to 8. There are
φ(8) = 4 such generators: 3,9,15,21.
We can continue looking for subgroups (and generators) in this way. We just keep in mind
that to find a subgroup of size k we look for an element of order k, since it will generate the only
subgroup of size k. This is what Theorem 11.5.4 (and more generally Theorem 11.5.1) states.
Table 11.1 lists all subgroups, orders and generators of Z24.11.6 Cayley’s Theorem 145
subgroup order other generators
h1i = Z24 24 5,7,11,13,17,19,23
h2i = {0,2,4,6,8,10,12,14,16,18,20,22} 12 10,14,22
h3i = {0,3,6,9,12,15,18,21} 8 9,15,21
h4i = {0,4,8,12,16,20} 6 20
h6i = {0,6,12,18} 4 18
h8i = {0,8,16} 3 16
h12i = {0,12} 2
h0i = {0} 1
Table 11.1: Subgroups of Z24

11.6 Cayley’s Theorem
We’ve mostly been focussing our attention on permutation groups. One may wonder whether we
are limiting ourselves and missing out on some pretty important groups that we wouldn’t otherwise
see. Well, as it turns out, every group is really just a permutation group, the difference is only in
how we name the elements. To see this, let G be a finite group of order n. List the elements of G:
g1, g2, g3, ..., gn−1, gn.
For any element a ∈ G multiply the elements of the list by a:
ag1, ag2, ag3, ..., agn−1, agn.
This is just a permutation of the list of elements in G. Why? In other words, we can associate
to the element a the permutation that it induces on the elements of G. It turns out that the set of all
such permutations contains all the information about G. In other words, we can just think of G as a
set of permutations. This is known as Cayley’s theorem.
Theorem 11.6.1 — Cayley’s Theorem. Let G be a group. For each a ∈ G, define a mapping
ρa : G → G
x 7→ ax.
Then
(a) ρa is a permutation of the set G,
(b) H = {ρa | a ∈ G} is a subgroup of SG, the group of all permutations of the set G.
(c) H and G are essentially the same groups, all that is different is the names of the elements.
More precisely, ab = c in G if and only if ρaρb = ρc as permutations.
We only note the theorem here since it tells us that we aren’t, in a sense, limiting ourselves by
studying only permutation groups. Also, this theorem indicates why SageMath uses permutation
groups to represent other groups.146 Chapter 11. Subgroups
11.7 Exercises
1. Is {ε,(1 2),(1 2 3)} a subgroup of S4?
2. Name the elements in S3 as follows:
s1 = (1 2), s2 = (1 3), s3 = (2 3), s4 = (1 2 3), s5 = (1 3 2).
(a) Let G be the subgroup generated by s1, G = hs1i. Verify there are only two elements in
G.
(b) What is the order of s4?
(c) Let H be the permutation group with generator s5, G = hs5i. Verify that there are only
three elements in H.
(d) Show that S3 = h(1 2),(1 3 2)i. In other words, show that S3 is generated by (1 2) and
(1 3 2).
3. Let G = h(1 2),(3 4 5)i. Show that G is a subgroup of S5 of order 6.
4. Find a subgroup of order 4 in S4.
5. Find a subgroup of order 8 in S4.
6. (a) List all the elements of A4.
(b) List all the subgroups of A4.
(c) Show that the converse of Lagrange’s Theorem is false by finding a divisor of |A4| for
which there is no subgroup of that order.
Dihedral Groups:
7. Determine all the subgroups of D3.
8. Find the center Z(D4) of D4.
9. Determine all the subgroups of D5.
10. (a) Determine the number of elements of order 2 in Dn.
(Hint: You will need to consider separately the cases when n is even and n is odd.)
(b) How many subgroups of order 2 does Dn have?
11. Determine the orders of the elements in D33 and how many there are of each.
12. How many elements of order 4 does D12 have? How many elements of order 4 does D4n
have?
13. Let n be an odd integer. Prove that every subgroup of Dn of odd order is cyclic.
Group of Integers under addition modulo n:
14. Find all the subgroups, and determine generators for each subgroup, for each of the following.
(a) Z8 (b) Z12 (c) Z17
15. Find all the elements of order 6 in Z18.
16. Find all the elements of order 15 in Z30.
17. Find all the elements of order 10 in Z40.
18. List all the elements of order 8 in Z8000000.
Unit Group modulo n:
19. Determine all the subgroups of U(12).
20. For each value of n listed below, determine whether or not U(n) is a cyclic group. When it is
cyclic, list all of the generators of U(n), n = 5,9,10,14,15,18,20,22,25. Make a conjecture
about the prime power decomposition of integers n for which U(n) is cyclic. Are n = 9 and
n = 16 counterexamples of your conjecture? (Try them.) If so, modify your conjecture.
21. Given the fact that U(49) is a cyclic group with 42 elements, determine the number of
generators that U(49) has without actually finding any of the generators.11.7 Exercises 147
22. Prove that U(2
n
) (n ≥ 3) is not cyclic.
(Hint: Look for a property that U(2
n
) has but cyclic groups do not have.)
Subgroups in General:
23. Prove that a group of order 3 must be cyclic.
24. Suppose that G is a cyclic group for which 6 divides |G|. How many elements of order 6 does
G have? If 8 divides |G|, how many elements of order 8 does G have? If a is one element of
order 8, list the other elements of order 8.
25. Let |G| = 33. What are the possible orders for the elements of G? Show that G must have an
element of order 3.
26. Let |G| = 8. Show that G must have an element of order 2. Show by counterexample that G
need not have an element of order 4.
27. If G is an abelian group and contains cyclic subgroups of orders 4 and 5, what other sizes of
cyclic subgroups must G contain.
28. If G is an abelian group and contains a pair of subgroups of order 2, show that G must contain
a subgroup of order 4. Must this subgroup be cyclic?
29. Show that every group of order at most 4 is abelian. This says that groups of order ≤ 4 don’t
have enough room to have elements that don’t commute.
30. Show that if G is a group where |G| = p is prime then G is cyclic.
31. Let G be a group such that |G| = p
n
, where p is prime. Show that G has an element of order
p.
32. Let G be a group such that |G| = p
2
. Show that either G is cyclic, or a
p = e for all a ∈ G.
33. One-Step Subgroup Test. Let G be a group and H a nonempty subset of G. Show that H is
a subgroup of G if ab−1 ∈ H for every a,b ∈ H.
34. Finite Subgroup Test Let G be a finite group and H a nonempty subset of G. Show that H
is a subgroup of G if H is closed under multiplication.12. Puzzle Groups
In this lecture we associate a group to each permutation puzzle, called the puzzle group. We’ll see
that this group can be represented by a group of permutations, allowing us to use SageMath to
investigate the puzzles.
12.1 Puzzle Groups
Let’s first recall the definition of a permutation puzzle, since we would like to see how groups come
into the picture. In Lecture 1 we defined a one person game, and the following definition of a
permutation puzzle.
A permutation puzzle is a one person game (solitaire) with a finite set T = {1,2,...,n} of
puzzle pieces satisfying the following four properties:
1. For some n > 1 depending only on the puzzle’s construction, each move of the puzzle
corresponds to a unique permutation of the numbers in T,
2. If the permutation of T in (1) corresponds to more than one puzzle move then the two
positions reached by those two respective moves must be indistinguishable,
3. Each move, say M, must be "invertible" in the sense that there must exist another move, say
M−1
, which restores the puzzle to the position it was at before M was performed, In this
sense, we must be able to “undo" moves.
4. If M1 is a move corresponding to a permutation τ1 of T and if M2 is a move corresponding to
a permutation τ2 of T then M1 · M2 (the move M1 followed by the move M2) is either
• not a legal move, or
• corresponds to the permutation τ1τ2.
As indicated in part 4 it may happen that the composition of two moves is not legal. For
example, this happens with the 15-Puzzle since legal moves change as the empty space moves
around the board. This generally happens when dealing with a puzzle that contains a “gap". We
won’t consider such puzzles in this lecture, besides a remark in Section 12.4. Instead we will150 Chapter 12. Puzzle Groups
focus on puzzles for which two moves can always be composed. Typically these are the puzzles
"without-gaps".
Let Puz be a permutation puzzle (where any two moves can be composed). For example Puz
could be Rubik’s cube, Oval Track, or Hungarian Rings. We consider two puzzle moves, m1 and m2,
to be equivalent if the two positions reached by those two respective moves are indistinguishable.
Let M(Puz) be the set of all inequivalent puzzle move-sequences. We can think of M(Puz) as
just the set of all possible configurations, or permutations of the puzzle pieces. We have a way to
combine elements of M(Puz): if m1,m2 ∈ M then m1m2 represents the move-sequence m1 followed
by m2, which is again in M(Puz). (This is why we assume the puzzle does not have gaps.) It turns
out that M(Puz) is a group under this operation. The identity is the “do nothing" move, and inverses
exist by part 3 of the definition above. Associativity follows from the fact that “moves" correspond
to “permutations" and permutation composition is associative.
Definition 12.1.1 — Puzzle Group. For a permutation puzzle Puz, the set of all inequivalent
puzzle moves M(Puz) is a group under move composition. M(Puz) is called the puzzle group
of Puz.
Since puzzle moves and positions correspond to permutations we can represent M(Puz) as
a subgroup of a permutation group. To do this we just need to associate each basic legal move
mi ∈ M(Puz), 1 ≤ i ≤ k, to a permutation αi
. We then use the permutation group hα1,α2,...,αki
to represent the puzzle. We’ve already done this with all of our puzzles in Lecture 5, so here we are
just emphasizing the fit within group theory.
12.2 Rubik’s Cube
Let Puz be an n×n×n Rubik’s cube, then we call M(Puz) the n-cube group. In the special case
when n = 3 we call it the Rubik’s cube group. We use the special notation RCn to denote the
n-cube group.
12.2.1 3×3×3 Cube Group
As in Lecture 1 label the facets of the Rubik’s cube as shown Figure 12.1. Figure 12.2 shows the
labeling on a 3-dimensional cube.
Figure 12.1: Facet labeling on the Rubik’s cube.12.2 Rubik’s Cube 151
(a) Labeling on Up, Right, Front
faces
(b) Labeling on Down, Back, Left
faces
Figure 12.2: The labeling of the facets of Rubik’s cube.
The permutation corresponding to each of the basic moves of the Rubik’s cube are:
R = (25 27 32 30)(26 29 31 28)(3 38 43 19)(5 36 45 21)(8 33 48 24)
L = (9 11 16 14)(10 13 15 12)(1 17 41 40)(4 20 44 37)(6 22 46 35)
U = (1 3 8 6)(2 5 7 4)(9 33 25 17)(10 34 26 18)(11 35 27 19)
D = (41 43 48 46)(42 45 47 44)(14 22 30 38)(15 23 31 39)(16 24 32 40)
F = (17 19 24 22)(18 21 23 20)(6 25 43 16)(7 28 42 13)(8 30 41 11)
B = (33 35 40 38)(34 37 39 36)(3 9 46 32)(2 12 47 29)(1 14 48 27)
R
−1
,L
−1
,U
−1
,D
−1
,F
−1
,B
−1
correspond to the inverses of these permutations.
Since the centre piece of each face is fixed by these moves then any two of these moves are
inequivalent. This means that RC3 can be represented by the subgroup of S48 generated by these
permutations:
RC3 = hR,L,U,D,F,Bi.
We can define RC3 in SageMath as follows.
In [1]: S48 = SymmetricGroup (48)
R=S48(" (25 ,27 ,32 ,30)(26 ,29 ,31 ,28)(3 ,38 ,43 ,19)(5 ,36 ,45 ,21)(8 ,33 ,48 ,24) ")
L=S48(" (9 ,11 ,16 ,14)(10 ,13 ,15 ,12)(1 ,17 ,41 ,40)(4 ,20 ,44 ,37)(6 ,22 ,46 ,35) ")
U=S48(" (1 ,3 ,8 ,6)(2 ,5 ,7 ,4)(9 ,33 ,25 ,17)(10 ,34 ,26 ,18)(11 ,35 ,27 ,19) ")
D=S48(" (41 ,43 ,48 ,46)(42 ,45 ,47 ,44)(14 ,22 ,30 ,38)(15 ,23 ,31 ,39)(16 ,24 ,32 ,40) ")
F=S48(" (17 ,19 ,24 ,22)(18 ,21 ,23 ,20)(6 ,25 ,43 ,16)(7 ,28 ,42 ,13)(8 ,30 ,41 ,11) ")
B=S48(" (33 ,35 ,40 ,38)(34 ,37 ,39 ,36)(3 ,9 ,46 ,32)(2 ,12 ,47 ,29)(1 ,14 ,48 ,27) ")
RC3 =S48. subgroup ([R,L,U,D,F,B]) # define Rubik ’s cube group to be RC3
Now that RC3 is in SageMath we can calculate some facts about the Rubik’s cube. For example,
we can determine the size of RC3. This is the number of different configurations there are of the
cube.
In [2]: RC3 . order ()
Out[2]: 43252003274489856000
In [3]: factor (RC3. order ())
Out[3]: 2^27 * 3^14 * 5^3 * 7^2 * 11
Therefore there are approximately 4.3 · 1019 configurations of the cube. And only one solution!152 Chapter 12. Puzzle Groups
Theorem 12.2.1 The Rubik’s cube group RC3 has order
2
273
145
3
7
2
11 = 43,252,003,274,489,856,000.
Since the order of an element in a group must divide the size of the group, then we immediately
see from the factored form of |RC3| that there are no elements of prime order ≥ 13. Also, by
Cauchy’s theorem (see Lecture 11), there must be an element of order 11. Actually finding such an
element is another story, all we know is one exists. In fact, at least 9 others must exist as well since
it would generate a subgroup of order 11.
We can also check if it is possible to flip a single edge, while leaving everything else in
place. Consider flipping the cubie in the uf cubical, the corresponding permutation is (7 18). The
following calculation shows it is not in RC3.
In [4]: S48 ("(7 ,18)") in RC3
Out[4]: False
However, we can flip two edges, say for example the cubies in the uf and ur cubicals. This
corresponds to the permutation (7,18)(5,26).
In [5]: S48 (" (7 ,18)(5 ,26) ") in RC3
Out[5]: True
Notice this only tells us that it is possible to flip two edges using moves R,L,U,D,F,B, but
it doesn’t indicate what sequence of moves will do this. This is in fact a much harder problem.
Basically what we are asking for is a method which can determine, for any element of RC3, a way
to write it as a product of the generators (or equivalently, as a word in R,L,U,D,F,B). This is
known as the word problem in group theory and is very difficult in many situations.
However, Sage does contain an implementation of an algorithm for solving the word problem
in RC3. It doesn’t necessarily return the shortest possible move sequence, but it does a pretty good
job nonetheless. For this we need to use the built-in CubeGroup() package.
In [6]: rubik = CubeGroup ();
state = rubik (" (7 ,18)(5 ,26) ")
rubik . solve ( state ) # calls the solve algorithm
Out[6]: "F2 R2 B’ F’ D’ F D B R2 F’ R’ F’ R"
Therefore, one move-sequence for flipping edges u f and ur is
F
2R
2B
−1F
−1D
−1FDBR2F
−1R
−1F
−1R.
12.2.2 2-Cube Group
Label the facets of the Pocket Cube as shown in Figure 12.3 and Figure 12.9.
The permutation corresponding to each of the basic moves of the Pocket Cube are:
R = (13 14 16 15)(10 2 19 22)(12 4 17 24)
L = (5 6 8 7)(3 11 23 18)(1 9 21 20)
U = (1 2 4 3)(9 5 17 13)(10 6 18 14)
D = (21 22 24 23)(11 15 19 7)(12 16 20 8)
F = (9 10 12 11)(3 13 22 8)(4 15 21 6)
B = (17 18 20 19)(1 7 24 14)(2 5 23 16)12.2 Rubik’s Cube 153
Figure 12.3: Facet labeling on the Pocket cube.
(a) Labeling on Up (blue), Right (yel￾low), Front (red) faces
(b) Labeling on Down (green), Back
(orange), Left (white) faces
Figure 12.4: The labeling of the facets of the Pocket Cube.
R
−1
,L
−1
,U
−1
,D
−1
,F
−1
,B
−1
correspond to the inverses of these permutations.
There is one major difference between the Pocket cube and Rubik’s cube: the Pocket cube
does not have any fixed centres. Why does this matter? Consider the moves R and L. They are
equivalent! Notice that applying R, leaves the cube in exactly the same position as L (the cube as a
whole has just been rotated in space). Another way to say this is RL−1
is the identity in RC2. Try it!
But if we were to use the permutations above to generate a group then this wouldn’t be the
group RC2. Since the product of permutations associated with R and L don’t have the property that
RL−1 = ε. This means the permutations are picking up the fact that the cube rotated in space.
Again let’s summarize the real difference between Rubik’s cube and the Pocket cube: the
Pocket cube can be rotated in space using only puzzle moves (which rotate faces), whereas Rubik’s
cube cannot be rotated in space using puzzle moves (since centres stay fixed under face rotations).
This means that RC2 is smaller that the permutation group generated by the 6 permutations above.
In fact, we really only need one of each of the following pairs of moves: {R,L},{U,D},{F,B}.
We’ll choose to only use R,D,F. This means the UBL cubie always remains in its home position.
This is the piece we will keep fixed.
In [7]: S24 = SymmetricGroup (24)
R=S24(" (13 ,14 ,16 ,15)(10 ,2 ,19 ,22)(12 ,4 ,17 ,24) ")
D=S24(" (21 ,22 ,24 ,23)(11 ,15 ,19 ,7)(12 ,16 ,20 ,8) ")
F=S24(" (9 ,10 ,12 ,11)(3 ,13 ,22 ,8)(4 ,15 ,21 ,6) ")
RC2 =S24. subgroup ([R,D,F]) # define Pocket cube group to be RC2154 Chapter 12. Puzzle Groups
We can determine the size of RC2.
In [8]: RC2 . order ()
Out[8]: 3674160
In [9]: factor (RC2. order ())
Out[9]: 2^4 * 3^8 * 5 * 7
Therefore there are approximately 3.6 million configurations of the Pocket cube. And only one
solution.
Theorem 12.2.2 The Pocket cube group RC2 has order 243
85 · 7 = 3,674,160.
If we didn’t realize that some moves are equivalent, and just constructed the group generated
by all moves, what would happen?
In [10]: S24 = SymmetricGroup (24)
R=S24(" (13 ,14 ,16 ,15)(10 ,2 ,19 ,22)(12 ,4 ,17 ,24) ")
L=S24(" (5 ,6 ,8 ,7)(3 ,11 ,23 ,18)(1 ,9 ,21 ,20) ")
U=S24(" (1 ,2 ,4 ,3)(9 ,5 ,17 ,13)(10 ,6 ,18 ,14) ")
D=S24(" (21 ,22 ,24 ,23)(11 ,15 ,19 ,7)(12 ,16 ,20 ,8) ")
F=S24(" (9 ,10 ,12 ,11)(3 ,13 ,22 ,8)(4 ,15 ,21 ,6) ")
B=S24(" (17 ,18 ,20 ,19)(1 ,7 ,24 ,14)(2 ,5 ,23 ,16) ")
S24 . subgroup ([R,L,U,D,F,B]). order ()
Out[10]: 88179840
In [11]: 88179840/3674160
Out[11]: 24
We would have been off by a factor of 24. Why 24? This is precisely the number of different
rotational symmetries there are for the whole cube. The permutation group is treating rotations of
the cube as different states, but the cube group RC2 should know these states really aren’t different
at all, so it is no surprise that we are be off by the number of rotations to the cube: 24.
This does illustrate, however, that we can’t just assign a permutation to each move, and form
the permutation group. Some thought needs to be taken as to whether the representation is faithful.
Swapping Corners on the Pocket Cube:
Are we able to swap two corners on the Pocket Cube, while keeping every other cubie in its
home location (not necessarily with proper orientation)?
Think about what a typical permutation would look like. Since corners can possibly be twisted
when returned to their home locations, it is not simply a matter of asking if a 2-cycle is in RC2.
However, we aren’t really interested in how the stickers move around, just the cubies themselves. If
we view RC2 acting on the 8 cubies, we just want to know if we can swap two cubies, and fix all
other cubies in their current location.
If we number the cubicles as follows: 1 is the ufr cubical, 2 is the urb cubical, 3 is the ubl
cubical, 4 is the ulf cubical, 5 is the dfr cubical, 6 is the drb cubical, 7 is the dbl cubical, 8 is the dlf
cubical.
The action of each move on the cubies are then:12.2 Rubik’s Cube 155
R = (1 2 6 5)
L = (3 4 8 7)
U = (1 4 3 2)
D = (5 6 7 8)
F = (1 5 8 4)
B = (2 3 7 6)
We can the ask SageMath to compute whether it is possible to swap the 1 and 2 cubies.
In [12]: S8= SymmetricGroup (8)
R=S8("(1 ,2 ,6 ,5)")
L=S8("(3 ,4 ,8 ,7)")
U=S8("(1 ,4 ,3 ,2)")
D=S8("(5 ,6 ,7 ,8)")
F=S8("(1 ,5 ,8 ,4)")
B=S8("(2 ,3 ,7 ,6)")
H=S8. subgroup ([R,L,U,D,F,B])
S8("(1 ,2)") in H
Out[12]: True
In [13]: H. order ()= factorial (8)
Out[13]: True
The computation shows we can not only swap cubies 1 and 2 but in fact every permutation of
the 8 cubies is possible. Remember though, the representation of RC2 that we chose to work with
here ignores any twisting of corners. So even though we can move the pieces anywhere we want,
there may be limitations on how we can twist them. We will investigate how the corners can twist
in Lecture 20.
12.2.3 Oval Track
Let Puz be the Oval Track puzzle (or one of its variations), then we call M(Puz) the Oval Track
group and we use the notation OT to denote this group.
We’ll look at a few different variations of the puzzle, corresponding to different modifications
of the turntable move T.
12.2.4 Oval Track - TopSpin: T = (1 4)(2 3)
The basic legal moves of the TopSpin version of the Oval Track puzzle are R, and T, where R
denotes a clockwise rotation of numbers around the track, where each number moves one space,
and T denotes a rotation of the turntable. See Figure 12.5.
Figure 12.5: The Oval Track Puzzle.156 Chapter 12. Puzzle Groups
The permutation corresponding to the legal moves R, and T are as follows:
R = (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
T = (1 4)(2 3)
Notice T
−1 = T since spinning the turntable in either direction achieves the same result. OT
can be represented by the permutation group generated by these two permutations.
In [14]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20)")
T=S20(" (1 ,4)(2 ,3) ")
OT= S20. subgroup ([R,T]) # define OT to be a permutation group
What is the size of OT? The puzzle consists of permuting 20 disks, so it is natural to wonder if
all permutations are possible. Since there are 20! permutations of 20 objects, we’d like to know if
|OT| = 20!.
In [15]: OT. order ()== factorial (20)
Out[15]: True
This means OT is actually the symmetric group of degree 20: OT = S20. Therefore, every
permutation of the disks is possible. Of course, the key to solving this puzzle is to figure out how
you can obtain each permutation using only moves R and T.
12.2.5 Oval Track - Variation 2: T = (1 4 3 2)
The turntable move in the original TopSpin puzzle is now replaced with the move indicated by the
purple dashed lines. In this version, the new turntable move for the puzzle in Figure 12.6 moves the
disk in spot 4 to spot 3, the disk in 3 to 2, the disk in 2 to 1, and the disk in 1 to 4.
Figure 12.6: The Oval Track Puzzle.
The permutation corresponding to the legal moves R, and T are as follows:
R = (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
T = (1 4 3 2)
In [16]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20)")
T=S20("(1 ,4 ,3 ,2)")
OT2 =S20. subgroup ([R,T]) # define OT2 to be a permutation group
OT2 . order ()== factorial (20)
Out[16]: True
In this variation all possible permutations of the 20 disks are possible.12.3 Hungarian Rings 157
12.2.6 Oval Track - Variation 3: T = (1 6)(2 5)(3 4)
Another version of the turntable move involving 6 disks is given in Figure 12.7.
Figure 12.7: The Oval Track Puzzle.
In [17]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20)")
T=S20(" (1 ,6)(2 ,5)(3 ,4) ")
OT3 =S20. subgroup ([R,T]) # define OT3 to be a permutation group
OT3 . order ()== factorial (20)
Out[17]: True
In this variation all possible permutations of the 20 disks are possible.
12.3 Hungarian Rings
Let Puz be the Hungarian Rings puzzle (numbered version), then we call M(Puz) the Hungarian
Rings group and we use the notation HR to denote this group.
The basic legal moves of the Hungarian Rings puzzle are R, and L, where R denotes a clockwise
rotation of numbers around the right-hand ring (each number moves one space), and L denotes a
clockwise rotation of numbers around the left-hand ring.
Figure 12.8: Hungarian Rings - numbered version.
The permutation corresponding to each of the legal moves R and L are:
R = (1 38 37 36 35 6 34 33 32 31 30 29 28 27 26 25 24 23 22 21)
L = (1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2)
HR can be represented by the group of permutations generated by R and L.
In [18]: S38 = SymmetricGroup (38)
L=S38("(1 ,20 ,19 ,18 ,17 ,16 ,15 ,14 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,5 ,4 ,3 ,2)")
R=S38("(1 ,38 ,37 ,36 ,35 ,6 ,34 ,33 ,32 ,31 ,30 ,29 ,28 ,27 ,26 ,25 ,24 ,23 ,22 ,21)")
HR= S38. subgroup ([R,L ])== factorial (38)158 Chapter 12. Puzzle Groups
Out[18]: True
Therefore, all possible permutations of the 38 balls are possible.
12.4 15-Puzzle
The 15-puzzle does not fit into group theory as neatly as our other puzzles do. The problem is that a
move must involve the empty space, so the available legal moves at each stage changes depending
on where the empty space is.
In what follows, we will describe a move of the pieces of the 15 puzzle by the first letter of the
word (u)p, (d)own, (l)eft, (r)ght, which is to indicate the direction a tile is pushed into the empty
space. For example, beginning with the empty space in spot 16, let m1 be the sequence of moves:
m1 = rrr.
Similarly, with the empty space in spot 16, let m2 be the sequence of moves:
m2 = rddd.
Move m1 places the empty space in spot 13 by moving all tile on the bottom row to the right.
Whereas, move m2 places the empty space in spot 3. Therefore, it is impossible to perform the
move sequence m1m2 = (rrr)(rddd) since once three r moves are applied there is no tile to the
left of the empty space to apply another r move. The set of all legal moves is not closed under
composition, therefore is not a group.
However, if we narrow our focus we can find a group lurking in there somewhere.
Represent each move-sequence by its corresponding permutation, so the set of all such move￾sequences corresponds to a subset of the permutation group S16. Let this subset be denoted by
FP:
FP = {α | α is the permutation corresponding to a legal position of the 15-puzzle}.
We already noted FP is not a group but the example gives us some insight into how we can
fix this. If each moves starts with the empty space in box 16, then returns it to box 16, then the
next move can be applied without any trouble. Let FP∗
consist of the set of all moves that fixes the
empty space in spot 16 (empty space can temporarily move during the sequence but must return by
the end). This means:
FP∗ = {α ∈ FP | α(16) = 16}.
Now FP∗
is a group. In fact we know it to be the group A15 (Theorem 9.1.1).
In general when considering puzzles with gaps, we can look at the subset of legal moves where
each move returns the space to its home position, this set will form a group.
12.5 Exercises
You are free to use SageMath in answering the following questions.
1. Single Corner Twist. Is it possible to rotate a single corner cubie of Rubik’s cube, while
leaving everything else in its home position? See Figure 12.9a.
2. Two Corner Twists. For Rubik’s cube, is it possible to rotate two corner cubies in the same
direction, while leaving everything else in its home position? See Figure 12.9b.12.5 Exercises 159
(a) Figure for Exercise 1 (b) Figure for Exercise 2 (c) Figure for Exercise 3
Figure 12.9: Which corner twists are possible?
3. Another Two Corner Twists. For Rubik’s cube, is it possible to rotate two corner cubies in
opposite directions, while leaving everything else in its home position? See Figure 12.9c.
4. Swapping Corners on Rubik’s cube. Show that it is impossible to swap two corner cubies
on Rubik’s cube, while leaving all other cubies in their home locations (not necessarily with
proper orientation)?
5. Oval Track with 19 Disks. Consider the Oval Track puzzle (TopSpin version) where only
19 disks are used. Are all permutations of the 19 disks possible? If not, can you describe
exactly which permutations are possible?
6. Varying the Number of Disks on Oval Track. For the Oval Track puzzle with n disks,
let OTn denote the puzzle group, determine the size of OTn, for 6 ≤ n ≤ 20. In each case,
describe exactly which permutations of the puzzle pieces are possible.
7. Very Few Disks on Oval Track. Consider OTn for n = 4,5. Investigate which permutations
of the puzzle pieces are possible.
8. Varying the turntable move T of the Oval Track puzzle. In this exercise you will inves￾tigate some variations of the Oval Track puzzle. In all variations1
, we assume there are 20
disks, and the usual move consisting of rotating the pieces along the track is R. We will vary
the turntable move T. We have already seen that if the turntable move is T = (1,4)(2,3) or
T = (4,3,2,1) then we are still able to obtain all permutations of the 20 disks. Investigate
the other variations of the move T given in the table below. Under the column “permutation
group", try to determine what group of permutations of the 20 pieces is possible. The first
two rows have been filled in already.
variation turntable move T permutation group
OT 1 (1 4)(2 3) S20
OT 2 (4 3 2 1) S20
OT 3 (3 2 1)
OT 4 (5 4 3 2 1)
OT 5 (1 2)(3 4)
OT 6 (1 11)(4 14)
OT 7 (5 3 1)
OT 8 (1 3)(2 4)
1Variation names are due to John O. Kiltinen who studies these in his book: Oval Track and other Permutation
Puzzles.13. Commutators
fanwuq: Just solve one corner at a time like LBL until you get to last layer. Then, you can
just use commutators to solve the rest of the corners.
JBogwith: I’m sorry, I don’t understand. I can get to the last layer, it is then where I get
stuck. What are commutators?
www.speedsolving.com forum discussion. Dec. 2007
In this lecture we look at a product known as a commutator. This type of move sequence is
useful for creating moves on permutation puzzles.
As you read through this lecture, you will find it useful to have a puzzle in-hand to try things
out for yourself.
13.1 Commutators
When playing with permutation puzzles, certain move sequences are more useful than others. For
instance, a move sequence of the form “move 1, then move 2, then inverse of move 1, then inverse
of move 2" turns out to be quite useful. This type of move is called a commutator.
Definition 13.1.1 If g, h are two elements of a group G, then we call the element
[g,h] = ghg−1
h
−1
the commutator of g and h.
Note that if g and h commute then [g,h] = e. To see this observe,
[g,h] = ghg−1
h
−1 = (gh)(g
−1
h
−1
) = (hg)(g
−1
h
−1
) = h(gg−1
)h
−1 = heh−1 = hh−1 = e.162 Chapter 13. Commutators
Conversely, if [g,h] = e then g and h commute (exercise 2). Commutators are useful in mathematics
wherever non-commutative operations occur.
The commutator [g,h] provides a measure of how much g and h fail to commute with each
other. In particular. if g and h are permutations and they fail to commute with each other by “just
a little bit" then [g,h] will be close to the identity, i.e. it will only permute a few numbers. This
is why commutators will be of interest to us in solving permutation puzzles, they will help us to
create good moves. You may have just realized that you frequently use commutators when solving
puzzles; if this is the case then you already have a working understanding of commutators.
Example 13.1 Consider the symmetric group S3 and the elements s1 = (1 2), s2 = (1 3 2).
Then the commutator [s1,s2] is
[s1,s2] = s1s2s
−1
1
s
−1
2 = (1 2)(1 3 2)(1 2)(1 2 3) = (1 3 2),
and the commutator [s2,s1] is
[s2,s1] = s2s1s
−1
2
s
−1
1 = (1 3 2)(1 2)(1 2 3)(1 2) = (1 2 3).
It is not a coincidence that [s2,s1] = [s1,s2]
−1
(exercise 3). 
13.2 Creating Puzzle moves with Commutators
We will explore some properties of commutators of permutations and then see how we can apply
what we learn to our standard collection of puzzles.
For a permutation α ∈ Sn define the fixed set of α to be the set of all numbers in [n] =
{1,2,3,...,n} that α doesn’t move:
fix(α) = {m ∈ [n] | α(m) = m}.
The set of numbers that are not fixed by α, the ones that are moved, is the compliment of this set,
which we denote by mov(α):
mov(α) = fix(α) = {m ∈ [n] | α(m) 6= m}.
We will refer to this as the moved set of α. fix(α) is precisely the set of numbers that would appear
as 1-cycles in the disjoint cycle form of α, and mov(α) are those numbers that appear in cycles of
length ≥ 2.
1 Since α and α
−1 fix precisely the same objects it follows that fix(α) = fix(α
−1
) and
mov(α) = mov(α
−1
).
In terms of permutation puzzles, mov(α) is the list of all the positions of the pieces that are
moved when α is applied, and fix(α) are positions in which the pieces are left alone.
We’ll need one more bit of notation to simplify things to come. For a subset A ⊂ [n] and a
permutation α ∈ Sn, we denote the set of all images of the elements of A under α as αA:
2
αA = {α(m) | m ∈ A}.
Since α is injective then |αA| = |A|.
1The moved set, as we have called it here, is sometimes referred to as the support of the permutation, denoted by
supp(α).
2This type of set is sometimes denoted by α(A).13.2 Creating Puzzle moves with Commutators 163
Example 13.2 For α = (1 7 3 4 12)(5 9) ∈ S13, the set of objects that are moved is mov(α) =
{1,3,4,5,7,9,12} and the set of objects that are fixed is fix(α) = {2,6,8,10,11,13}. For A =
{2,4,6,8,10,12} and B = {3,7,11}, αA = {α(2),α(4),α(6),α(8),α(10),α(12)} = {2,12,6,8,10,1},
and αB = {α(3),α(7),α(11)} = {4,3,11}. This can be done in SageMath by using the map
function: map(f,L) applies function f to each element of a list/set L.
In [1]: S13 = SymmetricGroup (13)
a=S13("(1 ,7 ,3 ,4 ,12)(5 ,9)")
map (a,Set ([2 ,4 ,6 ,8 ,10 ,12]))
Out[1]: [2 ,12 ,6 ,8 ,10 ,1]
In [2]: map (a,Set ([3 ,7 ,11]))
Out[2]: [4 ,3 ,11]

Now we are ready to investigate why the commutator [α,β] is likely to be “close" to the identity.
Let α,β ∈ Sn, and m a number in [n]. If m is moved by the commutator [α,β], i.e. m ∈
mov([α,β]), then both:
(a) m ∈ mov(α) or β(m) ∈ mov(α), and
(b) m ∈ mov(β) or α(m) ∈ mov(β) .
In set notation, we can write this as:
mov([α,β]) ⊂
￾
mov(β)∪α
−1mov(β)

∩
￾
mov(α)∪β
−1mov(α)

. (13.1)
To see why (b) is true assume that m,α(m) 6∈ mov(β), then [α,β] must leave m fixed:
[α,β](m) = (αβα−1
β
−1
)(m) = β
−1
(α
−1
(β(α(m))) = β
−1
(α
−1
(α(m))) = β
−1
(m) = m,
so m 6∈ mov([α,β]). This proves (b). The proof of (a) is analogous.
We can describe the set of pieces that are moved in a more verbal way. First we need an
alternate expression for (13.1). An equivalent way to write the set on the right-hand side in (13.1) is
(mov(α)∩mov(β))∪α
−1
(mov(α)∩mov(β))∪β
−1
(mov(α)∩mov(β)).
This follows from the facts that γ (mov(δ)∩mov(σ)) = γmov(δ)∩γmov(σ) and γ
−1mov(γ) =
mov(γ) (See exercises 7 and 8). To simplify notation we will define mov(α,β) to be the intersection
of mov(α) and mov(β):
mov(α,β) = mov(α)∩mov(β).
Therefore (13.1) can be written as
mov([α,β]) ⊂ mov(α,β)∪α
−1mov(α,β)∪β
−1mov(α,β). (13.2)
Notice mov(α,β) is the set of pieces affected by both α and β, and α
−1mov(α,β) is the set
of pieces that are moved to mov(α,β) by α, and β
−1mov(α,β) is the set of pieces moved to
mov(α,β) by β. In words (13.2) says the following:
R
If α and β are puzzle moves, the permutation produced by [α,β] only affects pieces that are
in, or moved to, locations that are moved by both α and 164 Chapter 13. Commutators
This remark will guide our choices for α and β. We want very little overlap in these two moves,
and we want very few new pieces moved into this overlap.
It is worth pointing out that we don’t necessarily have equality in (13.2). Consider α = (1 2 3)
and β = (1 2 3 4). In this case mov([α,β]) = {2,3,4} but the right-hand side of (13.2) is {1,2,3,4}.
With this little bit of theory behind us, let’s put it into practice on a number of our favourite
puzzles.
13.2.1 Rubik’s Cube
Consider the move sequence URU−1R
−1
. Although it is not the identity (apply it to your cube to
see this), it is a lot less complex than UR alone.
In [3]: S48 = SymmetricGroup (48)
R=S48(" (25 ,27 ,32 ,30)(26 ,29 ,31 ,28)(3 ,38 ,43 ,19)(5 ,36 ,45 ,21)(8 ,33 ,48 ,24) ")
L=S48(" (9 ,11 ,16 ,14)(10 ,13 ,15 ,12)(1 ,17 ,41 ,40)(4 ,20 ,44 ,37)(6 ,22 ,46 ,35) ")
U=S48(" (1 ,3 ,8 ,6)(2 ,5 ,7 ,4)(9 ,33 ,25 ,17)(10 ,34 ,26 ,18)(11 ,35 ,27 ,19) ")
D=S48(" (41 ,43 ,48 ,46)(42 ,45 ,47 ,44)(14 ,22 ,30 ,38)(15 ,23 ,31 ,39)(16 ,24 ,32 ,40) ")
F=S48(" (17 ,19 ,24 ,22)(18 ,21 ,23 ,20)(6 ,25 ,43 ,16)(7 ,28 ,42 ,13)(8 ,30 ,41 ,11) ")
B=S48(" (33 ,35 ,40 ,38)(34 ,37 ,39 ,36)(3 ,9 ,46 ,32)(2 ,12 ,47 ,29)(1 ,14 ,48 ,27) ")
RC3 =S48. subgroup ([R,L,U,D,F,B]) # define Rubik ’s cube group to be RC3
commutator = lambda x,y: x*y*x^( -1)*y^( -1)
# define function commutator
commutator (U,R)
Out[3]: (1 ,3 ,9 ,33 ,35 ,27)(2 ,5 ,21)(8 ,24 ,19 ,43 ,25 ,30)(26 ,28 ,34)
In [4]: commutator (U,R). order ()
Out[4]: 6
In [5]: U*R
Out[5]: (1 ,38 ,43 ,19 ,11 ,35 ,32 ,30 ,25 ,17 ,9 ,48 ,24 ,8 ,6)(2 ,36 ,45 ,21 ,5 ,7 ,4)(3 ,33 ,27)
(10 ,34 ,29 ,31 ,28 ,26 ,18)
In [6]: (U*R). order ()
Out[6]: 105
In the above code we defined a function called commutator which takes two arguments x and
y and returns the product xyx−1
y
−1
. We use a Python lambda function to do this, which is just a
quick way to define a function in one line where no complicated decision making has to be done
(see Section A.5 in Appendix A for more information). Of course, we really didn’t need to define
the function, we could have just typed in U*R*U^-1*R^-1, but with this function now defined we
can quickly work out other commutators with less typing (just cut-and-paste).
Why should we have expected URU−1R
−1
to be less complicated than UR? Many of the pieces
that are moved by UR are returned to where they started by U
−1R
−1
. For instance, consider the
cubie in the u f l cubicle. The move U sends it to the ubl cubicle which is untouched by the move R,
then it is moved back to the u f l cubicle by move U
−1
, and finally move R
−1
leave it where it is.
This means the move sequence URU−1R
−1
leaves the u f l cubicle untouched.
In general, if a piece is moved by U to a place that is not moved by R, then it will be moved
back by U
−1
to where it started. If the place where it started is not moved by R
−1 – or equivalently,
is not moved by R – then URU−1R
−1
ends up leaving the piece where it started. Only where there is13.2 Creating Puzzle moves with Commutators 165
an overlap of the moves U and R are the pieces affected. The permutation produced by URU−1R
−1
only affects pieces that are in, or moved to, locations common to both the up and right faces. This
is precisely what (13.2) (and thus Remark 13.2) says. See Figure 13.1a.
(a) Possible cubies moved by
URU−1R
−1
.
(b) Z-commutator: Shading
indicates locations changed by
FRF−1R
−1
(c) Y-commutator: Shading
indicates locations changed by
FR−1F
−1R
Figure 13.1: Y- and Z- commutators
In terms of the notation introduced, since the 3 pieces moved by both U and R are mov(U,R) =
{ur f,ur,ubr}, and the pieces moved to these positions by U and R are:
U
−1mov(U,R) = {ubr,ub,ulb} and R
−1mov(U,R) = { f rd, f r, f ur},
then URU−1R
−1 moves at most the 7 pieces shaded in Figure 13.1a.
Commutators of two faces which share an edge occur so frequently that they have been given
special names: the Z-commutator is [F,R] = FRF−1R
−1
, and the Y-commutator is [F,R
−1
] =
FR−1F
−1R . The names, Z-commutator and Y-commutator are used regardless of which two
adjacent faces are used, all that matters is both faces are turned in the same direction (Z-commutator),
or turned in opposite directions (Y-commutator). See Figure 13.1.
The cycle structure of a commutator may be such that taking powers of it will kill-off some
cycles, and as a result reduce the number of pieces that are moved. This is illustrated in the next
exercise.
Exercise 13.1 If x and y are basic moves of Rubik’s cube associated with faces that share an
edge, verify that
(a) [x, y]
2 permutes exactly 3 edges and does not permute any corners;
(b) [x, y]
3 permutes exactly 2 pairs of corners and does not permute any edges.

Let’s try to create a move-sequence, using commutators, that moves only a few pieces of
the cube around. Looking back at (13.2) (and Remark 13.2) we keep in mind that for any move
sequences x and y, the commutator only affects pieces that are in, or moved to, locations that are
moved by both x and y. For example, consider the move
x = LD2L
−1
.
Amongst other things, this move sequence takes u f l to bdr, and leaves all other cubies in the up
face in their original positions. If we now consider the move
y = U,
there is only one cubie that both x and y move: the u f l cubie. Since y only moves u f r to ul f , and x
only moves rbd to lu f , then the only cubies that are possibly affected by [x, y] are: u f l, u f r, and166 Chapter 13. Commutators
Figure 13.2: cubies moved by [LD2L
−1
,U].
rbd. Trying this new move sequence out we see it moves all 3 of these cubies: the ones shaded in
the Figure 13.2.The order of [x, y] = [LD2L
−1
,U] is 3.
In [7]: commutator (L*D ^2*L^( -1) ,U)
Out[7]: (6 ,8 ,38)(11 ,19 ,32)(17 ,25 ,48)
In [8]: commutator (L*D ^2*L^( -1) ,U). order ()
Out[8]: 3
As another example, let’s construct a move to untwist two corner cubies. Consider the two
moves
x = LD2L
−1F
−1D
2F, and y = U.
The first move may look a little complicated, but try it out for yourself. It is actually quite simple: it
moves u f l to the bottom layer, then brings it back into its home location, but twisted into position
f lu. The only location that is affected by both x and y is u f l, but x does not move it to another
location, it only twists it in place. Once x is applied, then applying y followed by x
−1
restores the
down and middle layers of the cube, and will untwist the piece that moved from ur f to u f l by y.
Finally y
−1 moves the piece that started in ur f back home, but now twisted. The result is that [x, y]
twists the corner piece in u f l clockwise, and the corner piece in ur f counter-clockwise as shown in
Figure 13.3. When we write out the move sequence for [x, y] = [LD2L
−1F
−1D
2F,U] it is 14 moves
long:
[x, y] = LD2L
−1F
−1D
2FUF−1D
2FLD2L
−1U
−1
.
Figure 13.3: cubies moved by [LD2L
−1F
−1D
2F,U].
The move notation that we are using doesn’t take into account that we can twist the whole cube
around in our hands. This may make it difficult to see that a move sequence is a commutator. For
example, the move sequence
x = U
2LR−1F
2L
−1R
doesn’t look like it has the form of a commutator. However, if we let R denote a clockwise rotation
of the whole cube around an axis through the right face, then F
2
can be written as RU
2R−1
and so13.2 Creating Puzzle moves with Commutators 167
x can be seen to be the move sequence:
x = U
2LR−1RU
2R−1RL−1
= [U
2
,LR−1R],
which is a commutator. This move sequence is order 3 and permutes 3 edge cubies as shown in
Figure 13.4. If we let MR denote the “slice move" which consists of rotating the middle slice,
parallel to the R face, in the clockwise direction, from the perspective of the R face, then we can
simply write this commutator move as:
x = [U
2
,MR].
Figure 13.4: cubies moved by [U
2
,LR−1R] = U
2LR−1F
2L
−1R.
13.2.2 Hungarian Rings
Using (13.2), and the remark that follows it, will help us create moves that affect only a few pieces
on the Hungarians Rings.
Figure 13.5: Hungarian rings puzzle.
This puzzle has the feature that the two rings intersect at only two locations (1 and 6), so
the two moves L and R have very little overlap. Specifically, mov(L) = {1,2,3,...,20} and
mov(R) = {1,6}∪ {21,22,...,38}, and the intersection is mov(L,R) = mov(L)∩mov(R) = {1,6}.
Consequently, from (13.2) a commutator [R
i
,L
j
], 1 ≤ i, j ≤ 19, moves at most 6 disks:
mov([R
i
,L
j
]) = {1,6} ∪R
−i
{1,6} ∪L
−j
{1,6} (13.3)
= {1,6,R
−i
(1),R
−i
(6),L
−j
(1),L
−j
(6)}. (13.4)
R On the Hungarian Rings puzzle, any commutator of the form [L
i
,R
j
] moves at most 6 disks.168 Chapter 13. Commutators
This maximum number can be reached, for example the commutator [L,R
−1
] moves 6 disks:
1,2,6,7,34,38.
In [9]: S38 = SymmetricGroup (38)
L=S38("(1 ,20 ,19 ,18 ,17 ,16 ,15 ,14 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,5 ,4 ,3 ,2)")
R=S38("(1 ,38 ,37 ,36 ,35 ,6 ,34 ,33 ,32 ,31 ,30 ,29 ,28 ,27 ,26 ,25 ,24 ,23 ,22 ,21)")
commutator (L,R ^( -1)) # commutator was defined in a previous code block
Out[9]: (1 ,38 ,2)(6 ,34 ,7)
For [L
i
,R
j
] to move fewer than 6 disks we would need some elements in (13.4) to be the same.
(13.2) indicates we should look for a move L
j which moves as few new disks into spots 1 and 6 as
possible. The values of j that do this are 5 and 15 (or equivalently −5). If we take i, j ∈ {5,15}
then one of L
−i
(1) = 6 or L
−i
(6) = 1 is true, and one of R
−j
(1) = 6 or R
−j
(6) = 1 is true, which
means mov([R
i
,L
j
]) has 4 elements. This gives the following.
R On the Hungarian Rings puzzle, any commutator of the form [L
i
,R
j
] where i, j ∈ {5,15}
moves exactly 4 disks.
As an example,
[L
5
,R
−5
] = (1 6)(11 30), and [L
−5
,R
5
] = (1 6)(16 25).
(a) L
5R
−5L
−5R
5
(b) L
−5R
5L
5R
−5
Figure 13.6: Basic commutators on the Hungarian Rings puzzle
Knowing these commutators is enough to solve the colour version of this puzzle (see Section
16.4).
We could use SageMath to determine all the powers i and j for which |mov([L
i
,R
j
])| = 4. The
first line of code below defines a function mov whose input is a permutation a and whose output is
the set of all numbers between 1 and n which a moves. The command len(a.tuple()) just gets
the value of n from the permutation in cycle form by first converting the permutation to a list, then
computing its length.
In [10]: mov = lambda a: Set ([ m for m in (1.. len(a. tuple ())) if a(m)!=m])
for i in range (1 ,20):
for j in range (1 ,20):
if mov( commutator (L^(i) ,R^(j ))). cardinality ()==4:
print i, j
Out[10]: 5 5
5 15
15 5
15 1513.2 Creating Puzzle moves with Commutators 169
13.2.3 Oval Track Puzzle
A natural type of commutator to consider for this puzzle is [R
i
,T] where R
i
is a rotation of the
disks around the track by i positions, and T is a rotation of the turntable. In this case mov(R
i
) =
{1,2,3,...,20} and mov(T) = {1,2,3,4}, and so by (13.2) a commutator of this type will move at
most 2min{20,4} = 8 disks.
Figure 13.7: Oval Track puzzle.
This maximum can sometimes be reached, for example the commutator [R
−4
,T] = (1 4)(2 3)(5 8)(6 7)
moves 8 disks: 1,2,3,4,5,6,7,8.
For the commutator [R
−1
,T] the numbers of disks moved is less. This is because R
−1 moves
only one new disk into the turntable, namely disk number 5. As a result [R
−1
,T] = (1 4 2 5 3) only
moves 5 disks.
In [11]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20)")
T=S20(" (1 ,4)(2 ,3) ")
OT= S20. subgroup ([R,T])
commutator (R^( -4) ,T) # a function we defined in a previous code block
Out[11]: (1 ,4)(2 ,3)(5 ,8)(6 ,7)
In [12]: commutator (R^( -1) ,T)
Out[12]: (1 ,4 ,2 ,5 ,3)
We will look for a commutator of the form [R
−i
,T] with a useful cycle structure. We can run a
simple loop to see this quite quickly.
In [13]: for i in (1..19):
print i, commutator (R^( -i) ,T)170 Chapter 13. Commutators
1 (1 ,4 ,2 ,5 ,3)
2 (1 ,4 ,5)(2 ,3 ,6)
3 (1 ,4 ,7)(2 ,3)(5 ,6)
4 (1 ,4)(2 ,3)(5 ,8)(6 ,7)
5 (1 ,4)(2 ,3)(6 ,9)(7 ,8)
6 (1 ,4)(2 ,3)(7 ,10)(8 ,9)
7 (1 ,4)(2 ,3)(8 ,11)(9 ,10)
8 (1 ,4)(2 ,3)(9 ,12)(10 ,11)
9 (1 ,4)(2 ,3)(10 ,13)(11 ,12)
10 (1 ,4)(2 ,3)(11 ,14)(12 ,13)
11 (1 ,4)(2 ,3)(12 ,15)(13 ,14)
12 (1 ,4)(2 ,3)(13 ,16)(14 ,15)
13 (1 ,4)(2 ,3)(14 ,17)(15 ,16)
14 (1 ,4)(2 ,3)(15 ,18)(16 ,17)
15 (1 ,4)(2 ,3)(16 ,19)(17 ,18)
16 (1 ,4)(2 ,3)(17 ,20)(18 ,19)
17 (1 ,18 ,4)(2 ,3)(19 ,20)
18 (1 ,20 ,4)(2 ,19 ,3)
19 (1 ,3 ,20 ,2 ,4)
For 4 ≤ i ≤ 16 it is no surprise the cycle structure is a product of four disjoint 2-cycles. The
commutator [R
−i
,T] brings four new disks: disks i+1,i+2,i+3,i+4, into the turntable, permutes
them, then sends them back, and finally it permutes the original four disks: 1,2,3,4. The resulting
permutation is:
[R
−i
,T] = (1 4)(2 3)(i+1,i+4)(i+2,i+3) for 4 ≤ i ≤ 16.
Consider the case when i = 1,2,3. The cases when i = 17,18,19 are similar, only the rotation
move R
−i
is clockwise 20−i spots. Perhaps at this point we should mention why we are considering
a negative exponent on R. This is really just because for i = 1,2,3, [R
−i
,T] only brings other small
numbered disks into the turntable. If we were to rotate clockwise first, then some high numbered
disks (i.e. 20,19, etc) would enter the turntable. Eventually we would like to consider variations of
the puzzle where the number of disks is changed, so it would be nice to have our results expressed
in such a way that does not depend on the total number of disks.
The commutator [R
−3
,T] has a particularly advantageous cycle structure, it consists of one
3-cycle and two 2-cycles. We can kill-off the 2-cycles by applying the commutator twice:
[R
−3
,T]
2 = ((1 4 7)(2 3)(5 6))2 = (1 4 7)
2
(2 3)
2
(5 6)
2
= (1 7 4).
This square-commutator can be realized as a single commutator: [R
−3
,T]
2 = [R
−3T R3
,T].
Viewing it this way may makes it easier to see what it does, and thus easier to remember. The
R
−3T R3 part is essentially doing a turntable move on positions 4,5,6,7, and T does the turntable
move on positions 1,2,3,4. The commutator of these moves will affect only the disks in positions
1,4,7.
This 3-cycle will be a useful move in solving end-game problems on this puzzle. Also, since
commutators are even (see Exercise 1) this is the smallest (non-trivial) permutation we could get
using products of commutators.
13.3 Exercises
1. Let α,β ∈ Sn. Show that the commutator [α,β] is an even permutation.13.3 Exercises 171
(a) R
−3T R3T
−1 = (1 4 7)(2 3)(5 6) (b) (R
−3T R3T
−1
)
2 = (1 7 4)
Figure 13.8: Basic commutators on the Oval Track puzzle
2. Show that if [g,h] = e then g and h commute.
3. Let G be a group and g,h ∈ G, show that [g,h]
−1 = [h,g].
4. Prove each of the following.
(a) A permutation α commutes with the commutator [α,β] if and only if [α,β] = [β,α
−1
].
(b) A permutation β commutes with the commutator [α,β] if and only if [α,β] = [β
−1
,α].
(c) Both α and β commute with [α,β] if and only if [α,β] = [β,α
−1
] = [β
−1
,α].
5. We have already seen that if α and β commute then (αβ)
n = α
nβ
n
. But this can fail if α and
β do not commute. Show that if α and β satisfy the weaker hypothesis that both commute
with [α,β], then for every positive integer n, (αβ)
n = α
nβ
n
[β,α]
n(n−1)/2
.
6. Let α,β ∈ Sn.
(a) If mov(α) and mov(β) have no locations (elements) in common (i.e. mov(α) ∩
mov(β) = /0), what is the permutation of [α,β]?
(b) If mov(α) and mov(β) have two locations (elements) in common (i.e. |mov(α) ∩
mov(β)| = 2), what is the largest |mov([α,β])| can be?
(c) If mov(α) and mov(β) have two locations (elements) in common, what are the possi￾bilities for |mov([α,β])|.
7. Let γ,δ,σ ∈ Sn. Prove the following.
(a) mov(γ) = mov(γ
−1
)
(b) γ
−1mov(γ) = mov(γ)
(c) γ (mov(δ)∩mov(σ)) = γmov(δ)∩γmov(σ)
8. Prove that for permutations α and β,
￾
mov(β)∪α
−1mov(β)

∩
￾
mov(α)∪β
−1mov(α)

= mov(α,β)∪α
−1mov(α,β)∪β
−1mov(α,β).
(Hint: Use the Distributive Law: A∩(B∪C) = (A∩B)∪(A∩C), and the results of Exercise
7.)
Rubik’s Cube:
9. Find the order of the Y-commutator [F,R
−1
] = FR−1F
−1R and of the Z-commutator [F,R] =
FRF−1R
−1
.
10. Find the order of [R,[F,U]].
11. What is the permutation produced by [F,R
−1
][R,U
−1
][U,F
−1
]?
12. Show that
(a) [F,R
−1
]
5 = R
−1
[F,R]R
(b) [F
−1
,R
−1
] = R
−1F
−1
[F,R]FR.
13. What is the permutation produced by [(R
2U
2F
2
)
3
,U
2
]?
14. 3-cycle of corners. In this exercise you will build, as a commutator, a move which cycles 3
corner cubies as shown in the diagra172 Chapter 13. Commutators
(a) To begin with, consider the move sequence α = F
−1D
−1FR−1D
2RF−1DF. Verify that
this move swaps the two corner cubes in the up layer, keeping their orientation (i.e.
the up colour remains in the up face, which in the diagram is indicated by black). The
lightly shaded cubies in the middle and down layer in the diagram move around, but the
unshaded cubies remain fixed.
You may wonder how this move was constructed. The idea is to basically take one or
two cubies from the up layer, move them to the bottom layer, perform some moves
which have minimal effect on the up layer, then bring them back to the up layer. Since
we don’t require pieces in the middle and down layers to be returned home, coming up
with these moves isn’t so difficult.
(b) Since α only affects two cubies in the up layer, let β = U and consider the commutator
[α,β]. Can you predict the effect of this move on the cubies? Hint: Remark 13.2 tells
us which cubies can be affected. And with a little more thought you should be able to
see how they are affected.
(c) Perform the move [α,β] = (F
−1D
−1FR−1D
2RF−1DF)U(F
−1D
−1FR−1D
2RF−1DF)
−1U
−1
and verify your prediction from the previous part.
15. Flip 2 adjacent edges. Let MR denote the “slice move" which consists of rotating the middle
slice, parallel to the R face, in the clockwise direction, from the perspective of the R face.
Consider the move sequence
α = MRUM−1
R U
−1MRU
2M−1
R
.
(a) Verify α flips the edge in the f d position, and fixes everything else in the down layer.
(b) Since α only affects one cubies in the down layer, let β = D and consider the commu￾tator [α,β]. Can you predict the effect of this move on the cubies?
(c) Perform the move [α,β] and verify your prediction from the previous part.
16. Another, flip 2 adjacent edges. If we instead would like to flip 2-edges in the up layer. We
could consider the move sequence
α = M−1
R DMRD
−1M−1
R D
2MR.
(a) Verify α flips the edge in the u f position, and fixes everything else in the up layer.
(b) Since α only affects one cubie in the up layer, let β = U and consider the commutator
[α,β]. Can you predict the effect of this move on the cubies?
(c) Perform the move [α,β] and verify your prediction from the previous part. The move
sequence should produce the double edge flip as shown in the figure below.13.3 Exercises 173
17. Flip 2 opposite edges. Find moves α and β so that the commutator [α,β] flips two opposite
edges (as shown in the diagram below), and fixes everything else. (Hint: Modify the moves
in the previous exercise.)
18. Investigate the commutators [α,β] for each of the following choices of α and β.
(a) α = RUR−1
and β = D
−1
(b) α = F
−1D
−1FR−1D
2RF−1DF and β = U
2
(c) α = RUR−1U
−1RUR−1
and β = D
−1
(d) α = M−1
R
and β = M−1
U
. (MX denotes a slice move of the middle slice parallel to face
X.)
19. Create some of your own moves using commutators. Start by creating a move α which
affects very few cubies in the up layer. Then take the commutator with β = U. Try to predict
what your move with do before you even apply it.
Hungarian Rings:
20. Exploring the following commutators on the Hungarian Rings puzzle. Express the resulting
permutation in disjoint cycle form.
(a) [L,R]
(b) [L,R
−1
]
(c) [R,L]
(d) [R,L
−1
]
(e) [L
5
,R]
(f) [R,L
5
]
(g) [L
5
,R
−1
]
(h) [L,R
−5
]
(i) [L
5
,R
5
]
(j) [R
5
,L
5
]
(k) [L
−5
,R
−5
]
(l) [L
5
,R
−5
]
21. Getting a 3-cycle with compound commutators. In this exercise we investigate the com￾pound commutator: [[L
5
,R
5
],R
−1LR]. It may look pretty complicated at first glance, but its
construction has been well controlled. Let α = [L
5
,R
5
] and β = R
−1LR, so the compound
commutator is [α,β]. The overlap of pieces moved by both α and β consists of a single disk
as we’ll see below. This indicates that the commutator [α,β] will likely be a good move to
know.
(a) Show that the permutation corresponding to the commutator α = [L
5
,R
5
] is (1 25)(6 11).
Conclude that mov(α) = {1,6,11,25}.
(b) Show that the only pieces of the right ring that β affects are the pieces in positions 34
and 38. Note that β affects all pieces in the left ring, except for 1 and 6. Conclude that
mov(β) = (mov(L)−{1,6})∪{34,38} = {38}∪{20,19,18,...,8,7}∪{34}∪{5,4,3,2}.
(c) If you didn’t already do so in the previous part, determine the cycle form of β.174 Chapter 13. Commutators
(d) Show that mov(α,β) = {11}.
(e) Show that α
−1mov(α,β) = {6} and β
−1mov(α,β) = {12}.
(f) Conclude from formula (13.2) that [α,β] moves only 6,11, and 12, and verify that
[α,β] = (6 11 12).
Note: One could just use SageMath to compute [α,β] = [[L
5
,R
5
],R
−1LR], however this
wouldn’t help to understand how to “build" this useful commutator in the first place. The
exercises above are to get you to investigate how the commutator was constructed, so you
may discover how to build your own commutators in the future.
Oval Track:
22. Determine the permutation corresponding to the commutator [R
−1T R,T] on the Oval Track
puzzle.
23. Consider the variation of the Oval Track puzzle where the turntable move T corresponds to
the permutation T = (4,3,2,1). See Figure 13.9.
(a) Show that [R
−1
,T] = (1 2 5).
(b) Show that [T
−1
,R
−1
] = (1 5 4).
(c) Show the product [R
−1
,T][T
−1
,R
−1
] is (1 2 4).
(d) Since commutators are even, so is any product of commutators. This means that 3-
cycles are the best we can do. However, the turntable move T is odd, so combining
this move with a commutator may allow us to produce a 2-cycle. See what the product
[R
−1
,T][T
−1
,R
−1
]T gives you.
Figure 13.9: Oval Track puzzle variation for Exercise 23.
24. Varying the turntable move T of the Oval Track puzzle. In this exercise you will investi￾gate, with the help of SageMath , some variations of the Oval Track puzzle. In all variations3
,
we assume there are 20 disks, and the usual move consisting of rotating the pieces along the
track is R. We will vary the turntable move T. We have already investigated commutators on
OT 1, the original Oval Track puzzle. In the previous exercise we investigated commutators
on OT 2 where the turntable move is T = (4,3,2,1). In each case below, write out the
permutation resulting from the commutator in cycle form.
(a) [R
−1
,T] on OT 2 where T = (4 3 2 1)
(b) [R
−2
,T] on OT 2 where T = (4 3 2 1)
(c) [T
2
,R
−2
] on OT 2 where T = (4 3 2 1)
(d) [R
−1
,T
2
] on OT 2 where T = (4 3 2 1)
(e) [R
−1
,T] on OT 4 where T = (5 4 3 2 1)
(f) [R
−1
,T
2
] on OT 4 where T = (5 4 3 2 1)
(g) [R
−1
,T] on OT 5 where T = (1 2)(3 4)
(h) [R
−2
,T] on OT 5 where T = (1 2)(3 4)
(i) [R
−3
,T] on OT 5 where T = (1 2)(3 4)
(j) [R
−5
,T] on OT 17 where T =
(1 6)(2 5)(3 4)
3Variation names are due to John O. Kiltinen who studies these in his book [Kil03].14. Conjugates
Commutators provided us with a method for creating puzzle moves that affect only a small number
of pieces. In this lecture we introduce “conjugation" which is a process for modifying existing
moves to produce new moves that have similar structure.
14.1 Conjugates
When playing with permutation puzzles, a move sequence of the form “move 1, then move 2, then
inverse of move 1" comes in handy. Moves of this form are called conjugates. You may have just
realized that you frequently use “conjugate moves" when solving puzzles, if this is the case then
you already have a working understanding of conjugation. As you read through this lecture, you
will find it useful to have a puzzle on hand to try things out for yourself.
Definition 14.1.1 If g, h are two elements of a group G, then we call the element
g
h = h
−1
gh
the conjugate of g by h.
Note that g
h = g if and only if g and h commute. Therefore, much like the commutator, the
conjugate g
h provides a measure of how much g and h fail to commute with each other. If g and h
don’t commute, then g
h 6= g, however g
h
should be like g in some ways. In the case of permutations
we can say exactly how they are similar. This is stated in Lemma 14.1.1 below.
The exponential notation is used because conjugation enjoys similar properties to that of
exponentiation. See Exercise 5.
Example 14.1 Consider the symmetric group S3 and the elements s1 = (1 2), s2 = (1 3 2).176 Chapter 14. Conjugates
Then the conjugate of s1 by s2 is
s
s2
1 = s
−1
2
s1s2 = (1 2 3)(1 2)(1 3 2) = (1 3)
and the conjugate of s2 by s1 is
s
s1
2 = s
−1
1
s2s1 = (1 2)(1 3 2)(1 2) = (1 2 3).

Definition 14.1.2 We say that two elements g1,g2 ∈ G are conjugate (in G) if there is an element
h ∈ G such that g2 = g
h
1
.
The set of all elements in G that are conjugate to g is called the conjugacy class of g and
denoted by cl(g):
cl(g) = {x
−1
gx | x ∈ G}.
In the example above we see that cycle structure seems to be preserved by conjugation. By this
we mean, the conjugate of a 2-cycle is also a 2-cycle, the conjugate of a 3-cycle is also a 3-cycle.
This is true in general, and we state it as the following remark. We prove this as a part of the
subsequent lemma.
R
For α,β ∈ Sn, the two permutations α and β
−1αβ have the same cycle structure.
Lemma 14.1.1 — Conjugation preserves cycle structure. Let α,β be any permutation in
Sn, and suppose α(i) = j. Then α
β = β
−1αβ sends β(i) to β(j):
(α
β
)(β(i)) = β(j).
Moreover, if α has cycle structure
α = (a1 a2 ... ak1
)(b1 b2 ... bk2
)···(c1 c2 ... ckm
)
then α
β has the same cycle structure
α
β = (β(a1) β(a2) ... β(ak1
))(β(b1) β(b2) ... β(bk2
))···(β(c1) β(c2) ... β(ckm
))
Proof: To see α
β = β
−1αβ sends β(i) to β(j) we notice
α
β
(β(i)) = (β
−1αβ)(β(i)) = β(α(β
−1
(β(i)))) = β(α(i)) = β(j).
To show that the cycle structure is as described in the statement of the lemma first express α in
disjoint cycle form: α = σ1σ2 ···σm, where σi
is a ki-cycle. Observe that
α
β = β
−1
(σ1σ2 ···σm)β = (β
−1σ1β)(β
−1σ2β)···(β
−1σmβ),
so it suffices to prove the result for each of the cycles σi
.
Consider the cycle σ = (a1 a2 ... ak), and let di = β(ai). By the first part of the lemma, which
we have already proved, σ
β
contains the cycle (d1 d2 ... dk). Moreover, if x is an element that
is moved by σ
β
then (β
−1σβ)(x) 6= x and so σ(β
−1
(x)) 6= β
−1
(x), which means β
−1
(x) = ai for
some i. Therefore, x = di for some i. It follows that
σ
β = (d1 d2 ... dk).14.2 Modifying Puzzle moves with Conjugates 177
This proves the lemma. 
As an example, this lemma and the preceding remark tells us that if we have a 3-cycle α, then
no matter what the permutation β is, the conjugate α
β will be another 3-cycle. This is how we will
use conjugation to modify existing puzzle moves.
As a consequence of Lemma 14.1.1 it is easy to see when two permutations α,β ∈ Sn are
conjugate in Sn: they are conjugate if and only if the cycles in their respective disjoint cycle
forms have the same length when arranged from shortest to longest (i.e. they have the same cycle
structure). The “only if" part we have already proven. On the other hand, if two permutation α and
β have the same cycle structure then arrange their disjoint cycle forms as follows (here we insert
1-cycles on the end):
α = (a1,1 a1,2 ... a1,k1
)(a2,1 a2,2 ... a2,k2
)···(am,1 am,2 ... am,km
)(am+1,1)···(am+s,1)
β = (b1,1 b1,2 ... b1,k1
)(b2,1 b2,2 ... b2,k2
)···(bm,1 bm,2 ... bm,km
)(bm+1,1)···(bm+s,1)
and construct a permutation γ such that γ(ai, j) = bi, j
. It follows the α
γ = β and so α and β are
conjugate. (Note, γ is not necessarily unique.)
For example, the permutations
α = (1 2 3)(4 5 6 7 8)(9 10), and β = (4 5 3)(1 8 2 10 11)(7 12)
are conjugate in S12. One possibility for γ is (1 4)(2 5 8 11 6)(3)(7 10 12 9).
14.2 Modifying Puzzle moves with Conjugates
We’ve already made extensive use of conjugation while investigating the 15-puzzle. We showed in
Lecture 9 that the solvable configurations of the 15-puzzle, where the empty space is in box 16,
are precisely the even permutations. The way we argued this was we found one 3-cycle, namely
(11 12 15) and by conjugation we were able to modify this to produce any other 3-cycle.
In general, if we have a move α that does something useful then we can modify it by using
conjugates. First find a set-up move β
−1
that takes some pieces that we wish to affect and moves
them to the positions affected by α. Applying α then affects these new pieces, and β then moves
everything back. This will only affect the pieces moved by β
−1
into mov(α), and they are permuted
with the same structure of α. This description may seem a little confusing, but once you’ve played
around with conjugates you will see their actions are very intuitive. We’ll look at many examples
for the various puzzles over the next few sections.
14.2.1 Rubik’s Cube
Looking back at the commutators we constructed in Lecture 13 you will notice that many of the
x moves were made up of conjugates. We saw that the commutator [LD2L
−1
,U] permuted three
corner cubies as shown in Figure 14.1a.
We will modify this move so it permutes the three corner cubies as show in Figure 14.1b. To do
this, first apply the set-up move B
−1 which takes the ubr corner piece to the rbd position. Then
applying commutator [LD2L
−1
,U] cycles the 3 corner cubies as shown in Figure 14.1a, though the
piece in the rbd position is really the piece that started in the ubr position. Undoing the set-up move
results in a move sequence B
−1
[LD2L
−1
,U]B which moves the cubes as shown in Figure 14.1b.
As another example, the commutator [x, y] where
x = LD2L
−1F
−1D
2F, and y = U
produced a twist of 2 corners as shown in Figure 14.2a. If we use the set-up move R
−1
, before
apply the corner twist commutator, then undo the set-up move by taking R, then we produce a new178 Chapter 14. Conjugates
(a) 3-cycle of corner cubies by commu￾tator LD2L
−1ULD2L
−1U
−1
(b) conjugation of commutator by B
Figure 14.1: cycling 3 corner cubies
move which twists diagonally opposite corner cubies (see Figure 14.2b). This new move is the
conjugate R
−1
[LD2L
−1F
−1D
2F,U]R.
(a) corner twist commutator xyx−1
y
−1
(b) conjugation of commutator by R
Figure 14.2: twisting 2 corner cubies
14.2.2 Hungarian Rings
Using commutators we found some very useful moves on the Hungarian Rings puzzle:
[L
5
,R
5
] = (1 25)(6 11), [L
−5
,R
−5
] = (1 16)(6 30),
[L
5
,R
−5
] = (1 6)(11 30), [L
−5
,R
5
] = (1 6)(16 25).
(a) Hungarian Rings with numbers (b) Hungarian Rings with colours
Figure 14.3: Hungarian Rings puzzle
Suppose we wanted to swap the contents of boxes 8 and 27, then we could move 8 to position
11, 27 to position 30. Call the move that does this γ. For example γ = L
−3R
−3 would achieve this.14.2 Modifying Puzzle moves with Conjugates 179
Then apply the commutator [L
5
,R
−5
], which swaps disks 8 and 27, along with the disks in positions
1 and 6. Now undo the set-up move γ. The move sequence performed is γ[L
5
,R
−5
]γ
−1
. Since the
cycle structure is the same as [L
5
,R
−5
] it swapped two pairs of disks, one pair being 8 and 27, and
the other one was 32,36.
In the coloured version of the Hungarian Rings puzzle, shown in Figure 14.3b, if two balls of
the same colour are in the intersection positions (1 and 6) then applying one of the commutators,
say [L
5
,R
−5
] = (1 6)(11 30), would swap balls in positions 11 and 30, but the 1, 6-swap would go
unnoticed since the balls were identical. This gives us a way to swap any two balls on the puzzle,
and as we know from the theory of permutations, this is enough to construct any permutation of the
coloured balls.
In the numbered version of the puzzle, where every ball is distinct (Figure 14.3a) this is still not
enough to solve every permutation. We will actually need to find a genuine 2-cycle. We’ll pick
up this topic in Section 16.2.4 of Lecture 16. Though, armed with the tools of commutators and
conjugates perhaps you can discover such a move for yourself! Next we’ll use commutators to
construct a 3-cycle.
Compound Commutator - Getting a 3-cycle.
We have seen that by using commutators we can produce a product of two disjoint 2-cycles.
For example [L
5
,R
5
] = (1 25)(6 11). We now show that we are able to produce a move sequence
which gives a 3-cycle by using compound commutators, that is, something of the form:
[[α,β], γ] = (αβα−1
β
−1
)γ(βαβ −1α
−1
)γ
−1
.
Since one of the transpositions in [L
5
,R
5
] involves the lower point of intersection (position 1)
and the right ring, while the other involves the upper point of intersection (position 6) and the left
ring, we should be able to tweak one of the intersection points while leaving the other unchanged.
We would like a move γ that has little overlap with [L
5
,R
5
], where mov([L
5
,R
5
]) = {1,6,11,25}.
Since each ring has 3 disks which are moved by [L
5
,R
5
] we would like a move that temporarily
moves the disks out of the intersection points, then moves the left ring (for example), and then moves
disks back onto the intersection points. It would then follow that mov([L
5
,R
5
])∩mov(γ) = {11}.
Consider the move γ = R
−1LR. This leaves the disks in positions 1, 6 and 25 unchanged, but it
moves the disk in position 11 to position 10. See Figures 14.4a and 14.4b. The circled positions in
the figure are just to draw you attention to these positions. The pieces affected by the commutator
[[L
5
,R
5
], γ] are at most
mov([[L
5
,R
5
], γ]) ⊂ mov([L
5
,R
5
], γ)∪[L
5
,R
5
]
−1mov([L
5
,R
5
], γ)∪γ
−1mov([L
5
,R
5
], γ)
= {11} ∪[L
5
,R
5
]
−1
{11} ∪γ
−1
{11}
= {11,6,12}
In fact, [[L
5
,R
5
], γ] is the 3-cycle (6 11 12).180 Chapter 14. Conjugates
(a) Commutator L
5R
5L
−1R
−5
(b) γ = R
−1LR tweaks disks around 11
(c) Undoing L
5R
5L
−1R
−5
restores 1 and
25
(d) Undoing γ undoes some changes made
by γ
Figure 14.4: A compound commutator that uses the commutator [L
5
,R
5
] to construct a 3-cycle
(6 11 12)
14.2.3 Oval Track Puzzle
Conjugation is a very natural process on the Oval Track puzzle. If you have spent some time playing
with the puzzle you undoubtedly use conjugation on almost every move. The reason for this is the
turntable is located on one part of the puzzle, pieces will need to be moved into the turntable say by
a move R
j
, then they are rotated in the turntable T, and finally the pieces are moved back R
−j
. The
move sequence R
jT R−j
is conjugation.
1 2 3 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
Figure 14.5: Oval Track puzzle.
Using commutators we found the 3-cycle γ = [R
−3
,T]
2 = (1 7 4). Any conjugate of this would
also be a 3-cycle, so let’s try to construct the 3-cycle (1 2 3). To do this we would need to find
a move sequence β that takes {1,2,3} to {1,7,4}. The order doesn’t matter much, for example
we could find a move sequence that takes 1 7→ 1, 2 7→ 4, and 3 7→ 7. What is important though is
once we get 1,2,3 into positions 1,4,7 then we must cycle them appropriately: either γ or γ
−1
. So
before we do anything we make a mental note that to produce the 3-cycle (1 2 3) we want “1 to
chase 2". By this we mean, once we get disks 1,2,3 into positions 1,4,7 we then cycle them in the
direction so the 1 goes to the current position of 2. The rest of the disks will follow accordingly.
Since 1 is already in position 1 we leave it there. The move β just needs to take 2 7→ 4 and14.2 Modifying Puzzle moves with Conjugates 181
3 7→ 7. We begin by pushing disk 3 away from the rest of the pack. To do this, move it to position 1
and apply T. It still needs to move one more unit to the right in order to be 6 units away from disk
1, so move it to position 2 and apply T. This move sequence R
−2T R−2T has now pushed disk 3 far
enough away from 1 so that if 1 rotates to its home position disk 3 will be in position 7. See the
following figure.
Now, using the space between disks 1 and 3 we push 2 two units to the right. This is done by
putting it in position 1 applying T, then putting it again in position 3 and applying T. The move
sequence to do this is R
3T R−1T. The complete move sequence is β = R
−2T R−2T R3T R−1T R2
,
and the puzzle now looks like this:
1 8 7 2 6
5
3
4
9
15 14 13 12 11 10 16
17
18
19 20
We now apply the 3-cycle γ = [R
−3
,T]
2 = (1 7 4), but we have to recall we wanted 1 to chase 2.
Since 2 is in position 4 we want to apply the 3-cycle (1 4 7) which is actually γ
−1
. After applying
γ
−1
the puzzle now looks like this:
3 8 7 1 6
5
2
4
9
15 14 13 12 11 10 16
17
18
19 20
Finally, undoing β returns all pieces back to their original positions, except the pieces circled
in red. These pieces have been moved since β was applied. β
−1 will take the piece in position 1
back to 1, the piece in position 4 back to 2, and the piece in position 7 back to 3.182 Chapter 14. Conjugates
3 1 2 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
Therefore the move sequence β γβ −1 produces the 3-cycle (1 2 3).
14.2.4 15-Puzzle
Here we revisit our results about the 15-puzzle using our new tool: conjugation. The proof of the
solvability criteria, Theorem 9.1.1, which states that
A configuration of the tiles, in which the empty space is in box 16, is solvable if and
only if it is an even permutation.
relied on the ability to construct 3-cycles. The essence of the proof was based on conjugation.
Recall we can produce the 3-cycle σ = (11 12 15) by focussing on the bottom right corner of
the puzzle:
From this one 3-cycle σ, we can conjugate it to construct any other 3-cycle we want. To do this
we just need a way to move any 3 tiles down to the bottom right-hand corner, along with the empty
space. Hiding any tiles you have already brought down in boxes 12 and 16, we can bring any other
tile down using one of the two tours in Figure 14.6. Let β be the move sequence which brings all
three tiles down.
(a) (b)
Figure 14.6: Tours for producing 3-cycles.
Applying σ cycles the tiles around (or if you want to cycle them in the other direction apply
σ
−1
). Then β
−1
takes all the tiles back to where they started, but with the main three tiles now
cycled. In other words β σβ −1
is precisely the move that cycles the three tiles.
This was a purely theoretical argument. In practice solving the puzzle in this way is completely
inefficient. However, if one wants to produce a particular 3-cycle it is not necessary to push the 3
tiles down to the bottom right-hand corner, apply (11 12 15), then reverse the moves. Instead, if
we can apply a sequence of moves β which take the 3 tiles, along with the empty space, into any14.3 Exercises 183
2-by-2 array then we can perform a 3-cycle there, call it σ, then apply β
−1
. The resulting move
sequence β σβ −1 will be a 3-cycle on the selected tiles.
14.3 Exercises
1. For each of the pairs of permutations α,β ∈ Sn calculate the conjugate α
−1βα. Note that it
has the same cycle structure as β, and notice the each entry in the cycle is the image under α
of the corresponding entry in the cycle of β.
(a) α = (1 2 3 4 5 6 7)(8 9 10), β = (1 5 8)(2 6)(3 7 4)
(b) α = (1 5 8)(2 6)(3 7 4), β = (1 2 3 4 5 6 7)(8 9 10)
(c) α = (1 7 5 9 3 10 12)(4 6)(8 11), β = (1 6)(2 8)(4 7)
2. For α = (1 2 3 4)(5 6) and β = (1 6)(2 5 3) do the following.
(a) Calculate β
−1αβ.
(b) Calculate the values of β(1), β(2), β(3), β(4), β(5), β(6), then write down the product
of cycles, (β(1),β(2),β(3),β(4))(β(5),β(6)).
(c) Observe that the product of cycles in part (b) is the same as the answer to part (a). This
is the essence of Lemma 14.1.1.
3. For each of the following pairs of permutations state whether they are conjugate in S10. That
is, determine whether there exists a γ ∈ S10 so that α = γ
−1β γ.
(a) α = (1 2 3 4 5 6 7)(8 9 10), β = (1 5 8)(2 6 3 7 4 10 9)
(b) α = (1 5 8)(2 6)(3 7 4), β = (1 2)(7 3)(8 9 10)
(c) α = (1 7 5 9 3), β = (1 6 2 8 4)
4. Let G be a group. Prove that every conjugate of a commutator is a commutator by showing
that g[a,b]g
−1 = [gag−1
,gbg−1
] for all a,b,g ∈ G.
5. Show that for g1,g2,h,h1,h2 ∈ G the following hold.
(a) (g1g2)
h = g
h
1
g
h
2
(b) g
h1h2 = (g
h1 )
h2
6. Show that g and g
h have the same order.
7. For permutations α,β ∈ Sn, show that α and α
β have the same parity.
8. Show that the notion of conjugate defines an equivalence relation. That is, show that
(a) any element of g ∈ G is conjugate to itself (reflexive)
(b) if g is conjugate to h, then h is conjugate to g (symmetry)
(c) if g is conjugate to h, and h is conjugate to k, then g is conjugate to k (transitivity)
9. Show that the conjugacy classes form a partition of G. That is, show that G can be expressed
as a disjoint union of distinct conjugacy classes.
10. Is the building of commutators associative? (a) Explore the equation [[α,β], γ] = [α,[β, γ]]
by trying out these compound commutators on one of the puzzles. Show that this equation is
not true for all permutations α,β, and γ. This shows the operation of commutator building
is not an associative operation. (b) Show that for any permutations α,β, and γ such that β
commutes with both α and γ, this associativity equation is trivially true.
11. The expressions [(αβ), γ] and [α,(β γ)] are commutators of products. Prove the following
formulas which show a commutator of products is a product of commutators.
(a) [α,(β γ)] = [α,β](β[α, γ]β
−1
) = [α,β][βαβ −1
,β γβ −1
]
(b) [αβ, γ] = (α[β, γ]α
−1
)[α, γ] = [αβα−1
,αγα−1
][α, γ]
15-Puzzle:
12. Starting with the 15-puzzle in the solved state write down a sequence of moves which will
produce each of the following 3-cycles.184 Chapter 14. Conjugates
(a) (2 12 7) (b) (3 8 12) (c) (3 9 13).
Either write the moves using transpositions, or use the words “up", “down", “left", “right", to
indicate the direction the tile adjacent to the empty space is moved. Rather than bringing the
three tiles together in the lower right-hand corner, bring them together with the empty space
into any 2-by-2 array that is convenient. (It may help to use a physical or virtual version of
the puzzle, see the “software" section of [Mul17] for some links.)
Rubik’s Cube:
13. Set-up Moves. The move β
−1
in the conjugate β
−1αβ is called a set-up move. This is
because it is the move that brings the desired pieces into the positions that are affected by α,
once α is applied, the pieces are then restored by applying β. The important thing to keep in
mind with these set-up moves is that it doesn’t matter how the other pieces are moved around,
this will eventually be undone. All that matters is how a small subset of pieces are moved,
this is where we are to focus our attention. To get some practice in creating set-up moves,
find a sequence of moves which accomplishes each of the following. In each case your move
sequence should move the pieces as described, and we don’t really care if it moves the other
cubies that aren’t mentioned. (See comment below for an explanation of the notation used.)
(a) Moves the piece in the ur f corner to the f rd position.
(b) Moves the piece in the rd f corner to the f ur corner.
(c) Moves the piece in the ur edge to the ul edge position, and the piece in the ul edge to
the ur edge position.
(d) Moves the piece in the ur edge to the ul edge position, and the piece in the ul edge to
the ru edge position.
(e) Moves the piece in the u f edge to the f u edge position (i.e. it flips the u f edge piece).
(f) Moves the piece in the u f r corner to the f ru corner position (i.e. it rotates the u f r
corner piece counterclockwise).
(g) Moves the piece in the u f r corner to the ulb corner, and the piece in the ulb corner to
the u f r corner.
Notation: Here order of how the positions are listed matters. For example ur f 7→ rd f means
the corner which is part of the up, right, and front faces is moved to the corner which is part
of the right, down, and front faces, and moreover the facet in the up face moves to the right
face, the facet in the right face moves to the down face, and the facet in the front face moves
to the front face.
14. More Set-up moves. Find a sequence of moves which accomplishes the following:
u f r 7→ bur, bur 7→ l f u, l f u 7→ u f r.
Do this so that all other cubies in the up layer remain in their home positions, but all other
cubies in the middle and down layer may move around.
15. Suppose we know a move α which flips two opposite edges in the top layer, as shown in
Figure 14.7a. Find a move β so the β
−1αβ flips two adjacent edges in the top layer, as
shown in Figure 14.7b.
16. The commutator [L
−1D
2L,U] permutes corner cubies as follows (ulb,u f l, f rd). (Here we
are using our cycle notation as a compact way to represent the movement of pieces.) What
pieces does the conjugate R
−1
[L
−1D
2L,U]R permute?
17. Building a corner 3-cycle. In this exercise we build a 3-cycle of corners in the up layer that
preserves orientation (that is, the up facets remain in the up layer for each of the corners
cubies being moved). The desired movement is shown in the figure, where black facets are
moved to black facets.14.3 Exercises 185
(a) Known move α flips opposite edges. (b) Determine how to achieve this move
from α.
Figure 14.7: Exercise 15
(a) Verify the conjugate ULU−1 brings one new corner cubie into the right face.
(b) Since ULU−1 brings one new corner cubie into the right face this makes a good
candidate to form a commutator with R
−1
. Verify the commutator [ULU−1
,R
−1
] moves
the corner cubies as indicated in the diagram. The movement of pieces is also given
notationally as follows
ul f 7→ ru f, ru f 7→ rbu, rbu 7→ ul f.
(c) Unfortunately, the commutator [ULU−1
,R
−1
] twists the corners in addition to permuting
them. We’d like to tweak this commutator a little bit so the it doesn’t twist the corners.
Find a set-up move γ which twists some of the corners in place, so that when the
commutator [ULU−1
,R
−1
] is applied, followed by γ
−1
, the corner cubies that were
permuted still have their up facets in the up layer.
(Hint: a move which twists u f l counterclockwise, and urb clockwise, and leaves u f r
alone (and possibly moving other pieces) should work.)
(d) Verify that γ[ULU−1
,R
−1
]γ
−1 produces the desired 3-cycle of corners (as shown in the
first figure above).
Oval Track:
18. By conjugating the 3-cycle (1 4 7) produce three other 3-cycles, say (1 2 4), (2 8 14), and
(5 10 15).186 Chapter 14. Conjugates
19. (a) Verify that T R−1
is the product of a 17-cycle and a 2-cycle.
(b) By raising T R−1
to the power of 17 the 17-cycle can be killed-off, leaving just a 2-cycle.
Verify that (T R−1
)
17 = (1 3).
(c) Find a move sequence β so that β(T R−1
)
17β
−1 = (1 2).
(d) Using conjugation produce two other 2-cycles on this puzzle, say (5 15) and (9 12).
(e) Convince yourself that you can produce any 2-cycle as a conjugate of (T R−1
)
17. Since
every permutation is a product of 2-cycles you have proven that every permutation is
obtainable in this puzzle.15. The Oval Track Puzzle
We now have enough theory developed to give a thorough analysis of the Oval Track puzzle.
15.1 Oval Track with T = (1 4)(2 3)
In this section we focus on the standard Oval Track puzzle as shown in Figure 15.1. This version is
also known as TopSpin and was once manufactured by Binary Arts (now ThinkFun).
1 2 3 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
Figure 15.1: Oval Track puzzle.
The two basic moves of the Oval Track puzzle are R, and T, where R denotes a clockwise
rotation of numbers around the track, where each number moves one space, and T denotes a rotation
of the turntable:
R = (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
T = (1 4)(2 3)
and the Oval Track puzzle group is OT = hR,Ti.
We’ve already used SageMath to verify OT is S20, so |OT| = 20!. Therefore, all permutations
of the puzzle pieces are possible.188 Chapter 15. The Oval Track Puzzle
In [1]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20)")
T=S20(" (1 ,4)(2 ,3) ")
OT= S20. subgroup ([R,T])
OT == SymmetricGroup (20)
Out[1]: True
Theorem 15.1.1 — Solvability Criteria for Oval Track puzzle. For the Oval Track puzzle with
20 disks and T = (1 4)(2 3), every permutation α ∈ S20 is solvable. In other words, OT = S20.
Knowing that all permutation in S20 are obtainable is a start, but we would actually like to
know how to solve the puzzle from any arrangement of the disks. Moreover, it would be nice to see
exactly why SageMath is correct in stating OT = S20; the algorithms implemented in SageMath to
do these calculations are beyond the scope of this text.
The theory we have developed provides us with the answer as to why OT = S20. In Lecture 13
we found a square commutator that produces a 3-cycle:
σ3 = [R
−3
,T]
2 = (1 7 4).
We’ll call this the fundamental 3-cycle and denote it by σ3. The puzzle provides us enough
flexibility, or “wiggle room", to bring any 3 disks into positions 1,7,4. See Exercise 3 for some
practice in doing this. Therefore we may perform any 3-cycle by conjugation. See Section 15.1.2
for an example. This means we can produce any even permutation of the 20 disks, so A20 < OT.
Also, OT contains an odd permutation: the 20-cycle R. This is enough to conclude that OT = S20
(exercise 6).
This gives a theoretical answer as to why every permutation of the disks is possible, but it
doesn’t provide us with a method, or strategy, to solve any given configuration. We still have some
work to do to find out how to solve the puzzle.
We begin by looking for a 2-cycle, which we know must exist. Given one 2-cycle we should be
able to conjugate it to get all other 2-cycles, given that there seems to be enough “wiggle room".
15.1.1 2-cycles
The most basic combination of moves is T R−1
. This is the product of a 2-cycle and a 17-cycle, so
(T R−1
)
17 is a 2-cycle. Let σ2 denote this fundamental 2-cycle:
σ2 = (T R−1
)
17 = (1 3).
In [2]: (1 ,3)(4 ,20 ,19 ,18 ,17 ,16 ,15 ,14 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,5)
(T*R ^( -1))^(17)
Out[2]: (1 ,3)
Producing σ2 = (1 3) is a good first step. But it uses quite a few moves: 34 in total. Is it
possible to perform a transposition using less moves? Notice that this move sequence sends every
disk through the turntable, in some sense this sequence of moves is considered “global". Maybe we
could find a “local" move sequence, like the 3-cycle commutator: [R
−3
,T]
2 = (1 7 4), which only
puts disks 1 through 7 in the turntable, all other disks are just rocked back-and-forth. Are we able
to find a “local" move to produce a 2-cycle?15.1 Oval Track with T = (1 4)(2 3) 189
Our theory tells us no! If we think about a local move sequence, it would only use disks 1
through m, all other disks (m + 1 through 20) would just rock back-and-forth. This means, the
same move sequence would produce a 2-cycle on the puzzle with 21 disks for example. Yes, we
are changing the puzzle, but this doesn’t affect the 2-cycle, as long as it is “local". But T is an
even permutation, and R would be a 21-cycle, which is even too. Therefore hT,Ri would only
produce even permutations, hence no 2-cycle. Therefore, if we are able to get a 2-cycle in OT it
must use a sequence of moves that puts every disk through the turntable at least once. Our move
σ2 = (T R−1
)
17 does this: it sends all disks through the turntable once. This seems to be the best we
can do. This is an illustration of the power of the theory we have developed so far. We can answer
questions about what we can, and cannot, do with the pieces of the puzzle.
Now that we have one 2-cycle we can conjugate it to get others.
For example, let’s build (1 4) as a conjugate of σ2 = (1 3). To do this, we will find a sequence
of moves that takes 4 to position 3, while at the same time leaving 1 in position 1. The required
movement is to push disk 4 one spot to the left (i.e. one spot closer to disk 1). If we rotate the track
until 4 is in spot 3, then apply T, we have now moved 4 one spot closer to 1 on the right. Then
rotate the track so 1 is back in position 1. You may have noticed we just applied a conjugate to do
this: R
−1T R. See the following diagram.
We now swap 1 and 4 using the transposition σ2 = (1 3), which puts the puzzle in following
position.
4 5 1 3 2
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
Then undo the set-up moves above to produce (1 4). To summarize, we performed the conjugate
(R
−1T R)σ2(R
−1T R)
−1 = (1 4).190 Chapter 15. The Oval Track Puzzle
4 2 3 1 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
There was nothing special about 1 and 4 in this example. For any two disks a and b we can use
turntable moves to bring them closer together, until there is only one disk between them, then we
can rotate the track until they are in positions 1 and 3. This results in the set-up move β. Now apply
σ2, then undo the set-up move: β
−1
. The result is β σ2β
−1 = (a b). This proves the following.
Theorem 15.1.2 — 2-cycles on Oval Track. For the Oval Track puzzle with 20 disks and
T = (1 4)(2 3), every 2-cycle can be obtained as a conjugate of (T R−1
)
17 = (1 3).
Notice, Theorem 15.1.1 now follows from this theorem. This provides another proof that
OT = S20.
15.1.2 3-cycles
While investigating commutators in Lecture 13 we found a square commutator that produces a
3-cycle:
σ3 = [R
−3
,T]
2 = (1 7 4).
Having one 3-cycle is valuable since we can conjugate it to get other 3-cycles. Note, we can’t
simply assume we can generate all 3-cycles as conjugates since we need to be able to perform a
set-up move which takes any 3 disks to spots 1,7,4. From the example below we’ll see that the
puzzle provides enough flexibility so that this is always possible.
For example suppose we are solving the puzzle and have brought it to an end-game position
(1 2 3). See Figure 15.2a. To solve the puzzle we need to apply the inverse 3-cycle (1 3 2). To
accomplish this we will use our fundamental 3-cycle (1 7 4) by first performing a sequence of
moves that puts disks 3, 2 and 1 into spots 1, 4 and 7. We will record the sequence of moves as
β
−1
.
Before we start, we look at the current arrangement and make a mental note that “1 chases 3".
By this we mean that disk 1 is to go to the spot where disk 3 is right now. This description will help
us decide whether we should perform (1 7 4) or (1 4 7) at a later time.
It doesn’t matter how you go about getting these three disks into positions 1, 4, and 7. We’ll
keep 3 in position 1, move 2 to position 4, and move 1 to position 7. This means we need to space
the disks out by adding two spaces between the pairs of disks.
To add spaces we proceed as follows. Move disk 3 to the left, just off the turntable (position
20), and apply T to get some space between it and disks 1 and 2. Now there are two disks between
3 and 2 and disk 1 is just to the right of disk 2. To add space between disk 1 and 2 we move disk
2 to position 20, apply T, which now puts three spaces between 2 and 1, so we close this gap by
bringing 1 into position 3 and apply T. Now the three disks are spaced out, and so we just move
disk 3 to position 1, and it follows that 2 is now in position 4, and 1 is in position 7. See Figure
15.2b. The move sequence we used to do this was β
−1 = R
−1T R−3T R−1T R−5
.
Now we are ready to apply our fundamental 3-cycle: (1 7 4), but we need to know whether we
are to apply it or its inverse. This is where our mental note comes in: “1 chases 3". We need to15.1 Oval Track with T = (1 4)(2 3) 191
3 1 2 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(a) End-game position (1 2 3). The cycle
(1 3 2) is needed to solve.
3 5 4 2 8
9
1
6
7
15 14 13 12 11 10 16
17
18
19 20
(b) Set-up by putting disks 3,2,1 into spots
1,4,7.
1 5 4 3 8
9
2
6
7
15 14 13 12 11 10 16
17
18
19 20
(c) Perform the 3-cycle (1 4 7).
Figure 15.2: The steps for performing the 3-cycle (1,3,2) as a conjugate of the 3-cycle (1 4 7).
send disk 1 to where disk 3 is now, this means we should apply (1 4 7). The puzzle is now in the
position shown in Figure 15.2c.
Finally we undo the set-up move by applying β, and the puzzle is solved.
This example provides the general technique for producing 3-cycles.
Guide for producing a 3-cycle:
Step 1. Pick the three disks you wish to cycle: (a b c). Make a mental note that “a chases b".
Step 2. Move the disks to positions 1,4,7, in any way whatsoever. Call this move β
−1
.
Step 3. Apply the fundamental 3-cycle (1 4 7) or its inverse (1 7 4), depending on locations
of a and b.
Step 4. Undo the set-up move by applying β. The result is the 3-cycle (a b c).
15.1.3 Strategy for Solution
We are now ready to describe a strategy for solving the Oval Track puzzle. Since we can perform any
2-cycle we already have a method at hand. However, the fundamental 2-cycle, (T R−1
)
17 = (1 3),
is 34 moves long, and any other 2-cycle obtained by conjugation will use more moves, so solving
the puzzle by swapping two pieces at a time is very inefficient.
Similarly, we can create any 3-cycle by conjugating the fundamental 3-cycle [R
−3
,T]
2 = (1 7 4).
But again this will result in fairly long move sequences.
Instead, we will just approach the puzzle by first setting pieces 20 through 5 in order, which is
fairly straightforward since there is enough “wiggle room" to move things around. This brings the
puzzle to its end-game position, that is, a position where only disks 1,2,3,4 are permuted. This is
the point where 2-cycles and 3-cycles will be useful. Moreover, we will try to use 3-cycles since
the move sequence is significantly shorter, but if forced we may need to use a 2-cycle, which we
have ready and waiting.
Will we ever be forced to use a 2-cycle? In the end game all permutations in S4 are possible.192 Chapter 15. The Oval Track Puzzle
Therefore it is possible that an end-game configuration is an odd permutation, so it can’t be solved
it using 3-cycles alone. In this case we will be forced to use at least one 2-cycle.
Guide to solve the puzzle:
(a) Starting with disk 20 put disks 20 through 5 in numerical order.
(b) The permutation of the final 4 disks is either even or odd. This is the end-game phase.
(a) If the permutation is even, express it as either a 3-cycle or a product of two 2-cycles.
3-cycle: Use a conjugate of the fundamental 3-cycle [R
−3
,T]
2 = (1 7 4) to solve it.
two 2-cycles: Check whether it is (1 4)(2 3), if it is apply T and you’re done. Otherwise,
express it as the product of 3-cycles (recall (a b)(c d) = (a b c)(a d c)), and use
conjugates of the fundamental 3-cycle [R
−3
,T]
2 = (1 7 4) to solve it.
(b) If the permutation is odd, it is either a 2-cycle or a 4-cycle.
2-cycle: Use a conjugate of the fundamental 2-cycle (T R−1
)
17 = (1 3) to solve it.
4-cycle: First check whether apply T reduces the 4-cycle to a 2-cycle. Otherwise, there
is a 3-cycle that does. Once you have reduced it to a 2-cycle use a conjugate of the
fundamental 2-cycle (T R−1
)
17 = (1 3) to solve it.
Let’s now practice a few end-game configuations.
Example 15.1 Solve the end-game configuration (1 3)(2 4).
3 4 1 2 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
To solve the puzzle we need to produce the inverse permutation (1 3)(2 4). Since (1 3)(2 4)
is an even permutation we can write it as a product of 3-cycles: (1 2 4)(1 2 3). We focus on
constructing each 3-cycle as a conjugate of the fundamental 3-cycle.
(1 2 4): This 3-cycle involves disks 3,4,2 and results in putting 4 in its home position. See
Figure 15.3a.
The direction we want to cycle these disks is summarized by “4 chases 2". Apply the strategy
of spacing out the disks by making sure there are two disks between the middle and each outer
disk. A move sequence that does this is
β = R
−3T R2T R−1T R2
.
The puzzle will be as shown in Figure 15.3b.
Recalling that 4 chases 2, the fundamental 3-cycle we should apply is σ
−1
3 = [R
−3
,T]
−2 =
(1 4 7). Then applying β
−1
to undo the set-up, we end up with the puzzle in the configuration
shown in Figure 15.3c.15.1 Oval Track with T = (1 4)(2 3) 193
3 4 1 2 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(a) Initial configuration (1 3)(2 4).
The cycle (1 2 4) is to be produced.
3 6 5 4 1
7
2
8
9
15 14 13 12 11 10 16
17
18
19 20
(b) Set-up by putting disks 3,4,2
into spots 1,4,7.
2 3 1 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(c) Perform the 3-cycle (1 4 7), then
undo the set-up move.
Figure 15.3: The steps for performing the 3-cycle (1 2 4)
as a conjugate of the 3-cycle (1 4 7).
(1 2 3): This 3-cycle involves disks 2,3,1 and the direction we want to cycle these disks is
summarized by “2 chases 3". See Figure 15.4a.
We can space out the disks, making sure there are two disks between the middle and each
outer disk, by using the move sequence
δ = R
−2T R−2T R3T R−1T R2
.
The resulting position is shown in Figure 15.4b.
Since 2 chases 3, the fundamental 3-cycle we should apply is σ
−1
3 = [R
−3
,T]
−2 = (1 4 7).
See Figure 15.4c. Applying δ
−1
to undo the set-up move solves the puzzle.
2 3 1 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(a) Initial configuration (1 3 2). The
cycle (1,2,3) is to be produced.
2 8 7 3 6
5
1
4
9
15 14 13 12 11 10 16
17
18
19 20
(b) Set-up by putting disks 2,3,1
into spots 1,4,7.
1 8 7 2 6
5
3
4
9
15 14 13 12 11 10 16
17
18
19 20
(c) Perform the 3-cycle (1 4 7).
Figure 15.4: The steps for performing the 3-cycle (1 2 3)
as a conjugate of the 3-cycle (1 4 7).

In the next example we consider the case when the end-game permutation is a 2-cycle.
Example 15.2 Solve the end-game configuration (1,2). See Figure 15.5a.194 Chapter 15. The Oval Track Puzzle
2 1 3 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(a) Initial configuration (1 2). The
cycle (1,2) is to be produced.
2 3 1 6 5
4
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(b) Set-up by putting disks 2,1 into
spots 1,3.
1 3 2 6 5
4
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(c) Perform the 2-cycle (1 3). Once
here undo the set-up move to solve
the puzzle.
Figure 15.5: The steps for performing the 2-cycle (1 2) as a conjugate of the 2-cycle (1 3).
To solve the puzzle we need to produce the inverse permutation, which is just itself, (1 2).
Since (1 2) is a 2-cycle we construct it as a conjugate of the fundamental 2-cycle (T R−1
)
17 =
(1 3). Apply a set-up move which leaves 2 in spot 1, and moves 1 to spot 3. One such move
sequence is β
−1 = R
−1T R−1T RT R. Recall that to do this you just want to insert two disks
between disks 2 and 1. The puzzle should now look like Figure 15.5b. Apply the fundamental
2-cycle (T R−1
)
17 = (1 3), which results in swapping disks 2 and 1. This is shown in Figure
15.5c. Undoing the set-up move by applying β solves the puzzle.

The end-game permutation could be a 4-cycle, which is an odd permutation. If we are lucky a
move T will take it to a transposition as the next example illustrates.
Example 15.3 Solve the end-game configuration (1 3 2 4). See Figure 15.6a.
4 3 1 2 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(a) Initial configuration (1 3 2 4). The cycle
(1 4 2 3) is to be produced.
2 1 3 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(b) Start by performing T to put as many
disks in their home positions as possible.
Figure 15.6: The 4-cycle (1 3 2 4) is only one move T away from the 2-cycle (1 2).
Every disk is out of place, but disk 4 can be moved to spot 4 by move T. This also brings
disk 3 home as well. The permutation of the puzzle pieces is now (1 2) (see Figure 15.6b) which
we already solved in the last example.

Contrary to the last example, it may happen the an end-game 4-cycle cannot be immediately
converted into a 2-cycle by performing move T. In this case there will always be a 3-cycle that
does. Just use a 3-cycle to send any piece home, it follows that some other piece must also be sent
home as well. The reason for this is the product of an odd permutation and an even permutation is
odd, and the only odd permutations on 3 objects are transpositions. See Exercise 5 for one such15.1 Oval Track with T = (1 4)(2 3) 195
end-game.
15.1.4 Changing the number of disks
What happens if we change the number of disks in the puzzle. For example, suppose we used only
19 disks instead of 20. Would we expect our results to be the same? For example, does Theorem
15.1.1 remain true for 19 disks? Let’s ask SageMath .
In [3]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,19)")
T=S20(" (1 ,4)(2 ,3) ")
OT19 = S20. subgroup ([R,T])
OT19 . order == factorial (19)
Out[3]: False
Let OT19 be the Oval Track group on 19 disks. Then we determined that |OT19| 6= 19!, so OT19
does not contain every permutation of the 19 disks. This shouldn’t come as a surprise though, since
the rotation move R is a 19-cycle, which is even, and the turntable move T is also even. Therefore
we can only generate even permutations, so at best we could get the group of all even permutations
A19. Let’s see if we get all of A19.
In [4]: OT19 == AlternatingGroup (19)
Out[4]: True
We do! This means that for the Oval Track puzzle on 19 disks the solvable permutations are
precisely the even permutations.
What happened to our fundamental 2-cycle (T R−1
)
17? It was built from T R−1
so let’s see what
T R−1
is now.
In [5]: T*R^( -1)
Out[5]: (1 ,3)(4 ,19 ,18 ,17 ,16 ,15 ,14 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,5)
It is now a product of a 2-cycle and a 16-cycle. Unlike the 20 disk case, there is no way to
take a power of this to kill-off the 16-cycle and leave the 2-cycle alone. However, we still have our
fundamental 3-cycle: [R
−3
,T]
2 = (1 7 4) so we can use conjugates of this to solve the end-game of
this puzzle.
What about changing the number of disks even further? Let n be the number of disks, and let
OTn be the Oval Track group on n disks. Notice the move R, which is an n-cycle, will be even if
and only if n is odd. Therefore OTn will contain only even permutations: OTn ≤ An. On the other
hand, if n is even then R is an odd permutation, so OTn will contain some odd permutations. The
questions are then: (i) for n odd is OTn = An, and (ii) for n-even is OTn = Sn?
We can use SageMath to help us answer these questions. Here we consider the number of disks
4 ≤ n ≤ 20.
In [6]: for n in (4..20):
Rn= S20 ([ tuple ( range (1 ,n +1))]) # creates n- cycle (1 ,2 ,3 ,... ,n)
OTn =S20. subgroup ([Rn ,T]) # create OTn
if is_even (n):
print n, OTn == SymmetricGroup (n) #is OTn symmetric group ?
else :
print n, OTn == AlternatingGroup (n) #is OTn alternating group ?196 Chapter 15. The Oval Track Puzzle
Out[6]: 4 False
5 False
6 True
7 True
8 True
9 True
10 True
11 True
12 True
13 True
14 True
15 True
16 True
17 True
18 True
19 True
20 True
Therefore, for n ≥ 6 the answers to our questions are: yes. However, for small values of n the
answer is: no. It seems like there just isn’t enough “wiggle room" to get all the permutations when
there is a small number of disks.
Let’s investigate this further.
If n ≥ 6, the product T R−1
consists of a 2-cycle and an (n−3)-cycle: disk 2 remains fixed,
disks 1 and 3 are swapped, and the remaining n−3 disks are cycled to the left around the track.
If n is even, then n − 3 is odd so (T R−1
)
n−3
is a 2-cycle (1 3). Having this 2-cycle, and using
conjugation, indicates why OTn = Sn when n is even.
If n ≥ 7 we still have the fundamental 3-cycle [R
−3
,T]
2 = (1 7 4), so we can conjugate it to get
other 3-cycles. This indicates why OTn = An when n is odd.
The remaining cases are n = 4,5.
n = 4: We can view this puzzle as in the diagram, where only the labeled disks are in play and
they are free to move around the track by the rotation R = (1 2 3 4).
We use SageMath to work out the order of OT4.
In [7]: S4= SymmetricGroup (4)
R=S4("(1 ,2 ,3 ,4)")
T=S4(" (1 ,4)(2 ,3) ")
OT4 =S4. subgroup ([R,T])
OT4 . order ()
Out[7]: 8
In [8]: OT4 . list ()
Out[8]: [() , (2 ,4) , (1 ,2)(3 ,4) , (1 ,2 ,3 ,4) , (1 ,3) , (1 ,3)(2 ,4) , (1 ,4 ,3 ,2) , (1 ,4)(2 ,3)]15.1 Oval Track with T = (1 4)(2 3) 197
It is a group of order 8, and these elements look very familiar. They remind us of another group
of order 8 we know, the dihedral group D4, which is the group of symmetries of a square. If we
label the vertices of the square by 1,2,3,4, then the group of symmetries D4 can be viewed as a
subgroup of S4.
SageMath
sage: D4=DihedralGroup(4)
sage: D4.list()
[(), (2,4), (1,2)(3,4), (1,2,3,4), (1,3), (1,3)(2,4), (1,4,3,2),(1,4)(2,3)]
In [9]: D4= DihedralGroup (4)
D4. list ()
Out[9]: [() , (2 ,4) , (1 ,2)(3 ,4) , (1 ,2 ,3 ,4) , (1 ,3) , (1 ,3)(2 ,4) , (1 ,4 ,3 ,2) ,(1 ,4)(2 ,3)]
A rotation R of the pieces along the track, corresponds to a rotation of the square. A turntable
move correspond to a reflection about the horizontal axis.
Since OT4 and D4 are essentially the same group, it is just the context that is different, we say
these groups are isomorphic and write
OT4 ≈ D4.
n = 5: We can view this puzzle as in the diagram, where only the labeled disks are in play and
they are free to move around the track by rotation the R = (1 2 3 4 5).
In [10]: S5= SymmetricGroup (5)
R=S5("(1 ,2 ,3 ,4 ,5)")
T=S5(" (1 ,4)(2 ,3) ")
OT5 =S5. subgroup ([R,T])
OT5 . order ()
Out[10]: 10
Based on our experience with n = 4, and the fact that the dihedral group of a regular pentagon
has order 10, we may suspect that OT5 ≈ D5. Checking with SageMath we see this is indeed the
case.198 Chapter 15. The Oval Track Puzzle
In [11]: OT5 == DihedralGroup (5)
Out[11]: True
Since spot 5 is not on the turntable, move T is analogous to reflection f1 of the pentagon in
the digram below. This analogy indicates that the symmetries of the pentagon are generated by a
clockwise rotation and the reflection f1.
We summarize our results in the following theorem.
Theorem 15.1.3 On the Oval Track puzzle with T = (1 4)(2 3) , any scrambling can be solved
if the number of disks n is even and n ≥ 6. If n ≥ 7 and odd then every even scrambling can
be solved. Under these latter conditions, odd permutations can be brought down to a single
transposition, but cannot be completely solved. In particular, if OTn denotes the group of
permutations achievable by the Oval Track puzzle with n disks then:
OT4 ≈ D4,
OT5 ≈ D5,
OTn ≈ Sn if n ≥ 6 and even,
OTn ≈ An if n ≥ 6 and odd,
15.2 Variations of the Oval Track T move
Variations of the Oval Track puzzle can be created by changing the turntable move T. Figure 15.7
shows two different variations.
(a) T = (1 4 3 2) (b) T = (1 6)(2 5)(3 4)
Figure 15.7: Some variation of the turntable move T for the Oval Track puzzle.
We can use SageMath to investigate the groups associated with these variations.15.3 Exercises 199
In [12]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20)")
T=S20("(1 ,4 ,2 ,3)")
OTv1 = S20. subgroup ([R,T])
OTv1 == SymmetricGroup (20)
Out[12]: True
In [13]: S20 = SymmetricGroup (20)
R=S20("(1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20)")
sT= S20(" (1 ,6)(2 ,5)(3 ,4) ")
OTv2 = S20. subgroup ([R,T])
OTv2 == SymmetricGroup (20)
Out[13]: True
Therefore, on both these puzzles, all permutations of the pieces are possible.
Coming up with a strategy to solve these puzzles is similar to how we approached the original
Oval Track puzzle. Use commutators to create moves, and conjugates to modify them. Try to find a
fundamental 3-cycle or 2-cycle.
For the first variation, where T = (1 4 3 2), we have commutators [R
−1
,T] = (1 2 5), and
[T
−1
,R
−1
] = (1 5 4). The product of these two is
[R
−1
,T][T
−1
,R
−1
] = (1 2 4).
What is interesting about this is that combining this with T gives a 2-cycle:
[R
−1
,T][T
−1
,R
−1
]T = (2 3).
We know how important having a 2-cycle is for solvability.
15.3 Exercises
1. Getting to the end-game position. Go to Jaaps Puzzle page [Sch11] and play with the
javascript “Top Spin" puzzle. Mix up the disks and try to restore disks 20 through 5. That is,
reduce the puzzle down to the end-game position. Do this a number of times until you are
confident that getting to the end-game position is fairly straightforward. Don’t worry about
solving the end-game just yet.
2. 2-cycles on OT with T = (1 4)(2 3). For each of the following 2 cycles, find a conjugate
of σ2 = (1 3) which produces the 2-cycle. That is, find a sequence of moves β
−1
so the
β
−1σ2β produces the desired 2-cycle.
(a) (1 9) (b) (1 2) (c) (3 14) (d) (2 11)
3. 3-cycles on OT with T = (1 4)(2 3). For each of the following 3 cycles, find a conjugate of
the fundamental 3 cycle σ = (1 4 7), or its inverse σ
−1 which produces the 3-cycle. That is,
find a sequence of moves β
−1
so the β
−1σβ produces the desired 3-cycle.200 Chapter 15. The Oval Track Puzzle
(a) (1 4 3) (b) (1 3 4) (c) (2 3 4)
4. There are six end-game configurations shown below. (a) Write out each one in cycle notation.
(b) Plan a strategy for solving the end-game. (c) Implement your strategy and solve each of
the puzzles. You may find it useful to use the virtual puzzles on Jaaps Puzzle page [Sch11] to
try out your move sequences.
4 2 1 3 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20 4 2 3 1 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20 4 3 1 2 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(a) (b) (c)
3 1 2 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20 3 2 1 4 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20 3 4 1 2 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
(e) (f) (g)
5. Solve the end-game configuration (1 3 4 2), which is shown in the diagram.
2 4 1 3 5
6
7
8
9
15 14 13 12 11 10 16
17
18
19 20
6. Getting all permutations from one odd, and An. Let G < Sn be a group of permutation
which contains all even permutations (i.e. An < G). and has at least one odd permutation
β ∈ G. Show that G = Sn.
(Hint: We already know the set of odd permutation On is the same size as the set of even
permutations An (see Theorem 8.2.1). It suffices to show we can get all the elements of On
from An and β. Show On = βAn := {βα | α ∈ An}. Compare with Exercise 8.12.)
7. Consider the variation T = (1 3 2) of the turntable move on the Oval Track puzzle with 20
disks. Are all permutations of the puzzle pieces possible?
8. Consider the variation T = (1 3)(2 4) of the turntable move on the Oval Track puzzle with
20 disks. Are all permutations of the puzzle pieces possible?15.3 Exercises 20116. The Hungarian Rings Puzzle
In this lecture we give a thorough analysis of the Hungarian Rings puzzle, both the coloured and
the numbered versions.
16.1 Hungarian Rings - Numbered version
It seems reasonable that the numbered version (Figure 16.1) is more difficult to solve than the
coloured version. This is because in the coloured version has only 4 distinct disks, but the numbered
version has 38 distinct disks. Even though it is more difficult we will start with the numbered
version. In Section 16.4 we will apply our new-found knowledge to the coloured version and
describe a simple and elegant solution.
1
2
3
4
5
6
7
9 8
10
11
12
13
14
15
16
17 18 19 20 21 22 23 24
25
26
27
28
29
30
31 33 32 34
35
36
37
38
Figure 16.1: Hungarian Rings puzzle - numbered version.
The two basic moves of the Hungarian Rings puzzle are L, and R, where L denotes a clockwise
rotation of disks around left ring, where each disk moves one space, and R denotes a clockwise
rotation of numbers around the right ring.204 Chapter 16. The Hungarian Rings Puzzle
The permutation corresponding to the legal moves R and L are as follows:
L = (1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2)
R = (1 38 37 36 35 6 34 33 32 31 30 29 28 27 26 25 24 23 22 21)
and the Hungarian Rings puzzle group is HR = hL,Ri.
Theorem 16.1.1 — Solvability Criteria for Hungarian Rings puzzle. For the Hungarian Rings
puzzle every permutation of the 38 pieces is possible. In other words, HR = S38.
This theorem is verified by the following computation in SageMath.
In [1]: S38 = SymmetricGroup (38)
L=S38("(1 ,20 ,19 ,18 ,17 ,16 ,15 ,14 ,13 ,12 ,11 ,10 ,9 ,8 ,7 ,6 ,5 ,4 ,3 ,2)")
R=S38("(1 ,38 ,37 ,36 ,35 ,6 ,34 ,33 ,32 ,31 ,30 ,29 ,28 ,27 ,26 ,25 ,24 ,23 ,22 ,21)")
HR= S38. subgroup ([L,R])
HR == SymmetricGroup (38)
Out[1]: True
Much like the Oval Track puzzle we can see theoretically why HR = S38. In Lecture 14 we saw
that we could produce a 3-cycle as a compound conjugate:
[[L
5
,R
5
],R
−1LR] = (6 11 12).
There is enough “wiggle room" on the puzzle to bring any three disks into spots 6,11,12, so we
can perform any 3-cycle by conjugating this one. Therefore, we can perform any even permutation
of the puzzle pieces. The move L is a 20-cycle, which is odd. This means HR contains A38 and at
least one odd permutation. Therefore it must contain all of S38 (Lecture 8, exercise 12). This is
similar to the argument used to show OT = Sn when the number of disks n ≥ 6 is even.
Knowing that all permutations in S38 are obtainable is a start, but we actually would like to
know how to solve the puzzle from any arrangement of the disks. As with the Oval Track puzzle,
moving the first few disks home is straightforward, it is the end-game where we need theory-based
strategies.
16.1.1 Start-game: Solve the first 20 disks
There is enough flexibility in the puzzle to solve disks 7 through 16 on the left ring, and disks 21
through 30 on the right ring.
X
X
X
X
X
X
7
9 8
10
11
12
13
14
15
16
X X X
X 21 22 23 24
25
26
27
28
29
30
X
X X X
X
X
X
X
Figure 16.2: Start-game: begin by putting disks 7 – 16 and 21 – 30 in place.
You may be able to get a couple more disks in place, such as 17 and 31. Once you are at the
point where you think general play cannot take you any further you are at the end-game. You will
probably have 20 to 23 disks in their proper position. This leaves 15 to 18 disks we still need to
solve.16.2 Building Small Cycles: Tools for Our End-Game Toolbox 205
16.1.2 End-game: A strategy
This puzzle has a rather large end-game, as compared to the Oval Track puzzle. Once we have
made it to this point we express the remaining permutation in disjoint cycle form. It will possibly
involve 2-cycles, 3-cycles, 4-cycles, 5-cycles, and perhaps longer cycles.
If we know some fundamental cycles of these lengths then we have a strategy to solve: just
solve one cycle at a time. In the next section we go about building fundamental cycles.
Before doing this. let’s recall the fundamental commutators (see Figure 16.3):
[L
5
,R
−5
] = (1 6)(11 30), and [L
−5
,R
5
] = (1 6)(16 25).
These will come in handy in the following sections. We’ll come back to the end game strategy in
Section 16.3.
(a) L
5R
−5L
−5R
5 = (1 6)(11 30) (b) L
−5R
5L
5R
−5 = (1 6)(16 25)
Figure 16.3: Basic commutators on the Hungarian Rings puzzle
16.2 Building Small Cycles: Tools for Our End-Game Toolbox
16.2.1 5-cycles
Starting with the intersection spots 1 and 6, there is a collection of 6 spots that are nicely spaced
around the puzzle: each one five away from the next one. The locations of these spots are
1,6,11,16,24,30. With this observation, there is a nice 8-move sequence to creates a 5-cycle:
σ5 = (L
5R
5
)
4 = (1 25 30 11 16).
Figure 16.4: Fundamental 5-cycle: σ5 = (L
5R
5
)
4 = (1 25 30 11 16).
Conjugation of this 5-cycle will come in useful when we need to deal with long cycles in the
end-game.206 Chapter 16. The Hungarian Rings Puzzle
16.2.2 4-cycles
Think back to the Oval Track puzzle and how we produced a 2-cycle. We had to send every disk
through the turntable. It was theoretically impossible to produce a 2-cycle without doing this. The
reason, as we discussed in Lecture 14, was that if one or more disks never passed through the
turntable then it would be possible to do the same thing on the puzzle with 21 disks. But this puzzle
doesn’t have a 2-cycle since the basic moves are even. A similar argument would show that every
odd permutation on the Oval Track puzzle must come from a sequence of moves that push every
piece through the turntable.
There is a similar theoretical result for the Hungarian Rings puzzle.
Theorem 16.2.1 On the Hungarian Rings puzzle, suppose there is a sequence of moves that
produces an odd permutation β, which returns at least one disk on each ring to its home position.
Then during the process, each piece r on the right ring where β(r) = r must have been temporarily
moved to the left ring, or each piece ` on the left ring where β(`) = ` must have been temporarily
moved to the right ring. In other words, every piece on one of the rings that β keeps at home
would have been temporarily sent to the other ring.
Proof: To see why this is true, suppose β is an odd permutation that keeps a disk r on the right ring
at home and keeps a disk ` on the left ring at home (i.e. β(r) = r and β(`) = `), and suppose during
the entire process it keeps r on the right ring, and ` on the left ring. Without loss of generality, we
can assume β = L
m1R
k1L
m2R
k2
···L
m`R
k`
, for integers mi and kj
, in which some could be 0.
Since r is never moved to the left ring, the only moves that affect it are the moves R
ki
, so the
overall effect of β on r is the same as that of R
k1R
k2
···R
k` = R
k1+k2+···+k`
, which turns the right
ring k1 +k2 +...+k` positions. Since r is returned home then k1 +k2 +···+k` must be divisible
by 20, and hence the right ring moves contribute an even permutation to the process.
Similarly, by considering piece ` on the left ring, m1 +m2 +···m`
is divisible by 20, and so
the left ring moves contribute an even permutation to the process. Therefore β must be even. A
contradiction. 
Theorem 16.2.1 provides insight as to how to construct a 4-cycle, or any odd permutation
for that matter: for every disk on one ring that is to remain fixed by the permutation, we need to
temporarily move it to the other ring. Let’s try to do this with the disks on the left ring. The reason
we use the left ring is purely aesthetic: the left ring consists of the numbers are 1 through 20 which
are easy to remember.
First let’s draw our attention to disks 35 and 21 in the solved state of the puzzle. See Figure
16.6a. We’d like to consider a move which only affects these disks in the right ring. Recall that our
goal is to temporarily move every disk in the left ring to the right ring, as this is necessary if we
wish to construct an odd permutation. To simplify what could potentially be a complicated set of
moves, we would like to minimize the number of pieces that are moved on the right ring. We will
only try to use move-sequences that affect positions 35 and 21 of the right ring, and these will be
the positions where the left ring pieces temporarily visit.
The conjugate RLR−1
is a move that only affects positions 35 and 21 in the right ring, so let’s
begin with that move. It temporarily moves 1 and 6 off the left ring via move R, puts them in the
holding spots (positions 38 and 34, respectively), after move L is applied then R
−1 moves them
back on the left ring to where they started. It also moves disks 2 and 7 off the left ring, and leaves
them in our holding spots (positions 21 and 35, respectively) on the right ring. See Figure 16.5a. If
we do this move again, it will put 2 back on the left ring, but it will be on the opposite side of 1. It
also moves 1 and 6 off and on again. Repeated applications would keep moving 1 and 6 off and
on the right ring, while at the same time moving another two disks off, then eventually back on.16.2 Building Small Cycles: Tools for Our End-Game Toolbox 207
Figure 16.5b shows the result of repeated application of RLR−1
.
(a) The affect of applying RLR−1 once. (b) Each application of RLR−1 moves the disks
marked X one unit along the path.
Figure 16.5: The result of applying move RLR−1 once, and repeatedly.
This would be a very slow process, to move every tile off the left ring then back on again, not
to mention at some point we would need to do something to control which odd permutation we
construct. Instead, it would be nice to move as many numbers off and on the left ring as possible, in
a minimum number of moves, while at the same time keeping as many disks as we can in numerical
order. To achieve this, we consider RLR−1
as the first move, then we advance the numbers on the
left ring, before applying RLR−1
again, this would put two new numbers in positions 1 and 6 which
would then be ready to be moved off and back on the left ring with the next application of RLR−1
.
In other words, let’s consider the move sequence RLR−1L. The result of this move is shown in
Figure 16.6b (in the figure we’ve drawn our attention to positions and disks 21 and 35).
There are a few things that we should note about the move RLR−1L:
• All disks on the right ring were unaffected, except for disk 35 and 21.
• The disks in positions 7 and 2 were moved to storage on the right ring. And disks in positions
35 and 21 moved to take their place on the left ring.
• The disks in positions 1 and 6 were temporarily moved to positions 38 and 34 on the right
ring, and then move back to the left ring, ending up on positions 20 and 5, respectively. That
is, they moved only position clockwise around the ring.
• All other disks on the left ring advanced two positions clockwise around the ring.
Repeated application of RLR−1L is shown in Figure 16.6. A summary of which disks are moved
off the left ring, then back on again, by repeated application of RLR−1L is given in Table 16.1. It is
important to notice the change that was made by (RLR−1L)
3
, so compare Figure 16.6a to 16.6d.
Disks that started in positions 1 to 10, are now back in their natural order after having been moved
temporarily to the right ring. Disks that started in positions 12 through 20 are still in their natural
order (they weren’t moved to the right ring).
If we continue to repeat the process then we would disturb the natural order of disk 1 to 10.
Instead, we first rotate the left ring so that disks 1 through 10 are out of the way (apply L
5
), then
we apply the procedure RLR−1L three more times to move the other 10 disks off the left ring. The
result is shown in Figure 16.7a. Disks 9 through 10 were far enough away that they weren’t affect,
but disk 1 was sent to position 35. Notice most disks on the left ring are back in their proper order,
so rotating them back to their home position by L
4
results in the 4-cycle:
σ4 = (RLR−1L)
3L
5
(RLR−1L)
3L
4 = (1 35 11 21).
We have just shown how to get a 4-cycle (see Figure 16.7b) and Theorem 16.2.1 tells us that
this is probably the best we could do.208 Chapter 16. The Hungarian Rings Puzzle
(a) Puzzle in solved state, but focus your atten￾tion on disks 35 and 21, and also the disks that
move to these positions.
(b) RLR−1L
(c) (RLR−1L)
2
(d) (RLR−1L)
3
Figure 16.6: The set-up moves for creating the 4-cycle (1 35 11 21).
prior to n
th move RLR−1L: during n
th move (RLR−1L)
n
: after n
th move (RLR−1L)
n
:
n all disks that have moved of￾f/on the left ring
disks that currently moved
on and stayed on the left ring
disks that currently moved of￾f/on the left ring
disks that are currently off
the left ring
1 /0 35 (35) 21 (21) 6 (34) 1 (38) 7 (35) 2 (21)
2 1,6 7 (35) 2 (21) 8 (34) 3 (38) 9 (35) 4 (21)
3 1,2,3,6,7,8 9 (35) 4 (21) 10 (34) 5 (38) 11 (35) 35 (21)
4 1,2,3,4,5,6,7,8,9,10
Table 16.1: Summary of disks that moved off then back onto the left ring, and the positions affected, with
first 3 application of RLR−1L. The number in brackets next to the disk number represents the position the
disk visited in the right ring.
16.2.3 3-cycles
The fundamental 3-cycle, which we call σ3, was built using compound commutators:
σ3 = [[L
5
,R
5
],R
−1LR] = (6 11 12).
See Lecture 14 for the discussion.
16.2.4 2-cycles
Theorem 16.2.1 tells us that producing a 2-cycle is just as challenging as producing a 4-cycle since
they are both odd. Luckily we already found a way to construct a 4-cycle:
σ4 = (RLR−1L)
3L
5
(RLR−1L)
3L
4 = (1 35 11 21),
as shown in Figure 16.7b.16.2 Building Small Cycles: Tools for Our End-Game Toolbox 209
(a) (RLR−1L)
2L
5
(RLR−1L)
3
(b) The fundamental 4-cycle: σ4 =
(RLR−1L)
3L
5
(RLR−1L)
3L
4 = (1,35,11,21)
Figure 16.7: The set-up moves for creating the 4-cycle (1 35 11 21), continued.
Figure 16.8: Fundamental 3-cycle: σ3 = [[L
5
,R
5
],R
−1LR] = (6 11 12).
Using σ4 we can construct the 2-cycle (1 11). Begin by applying σ4. Now, if we can find a
move sequence to swap disks 1 and 35, and swap disks 11 and 21 then we can produce the 2-cycle
(1,11). To do this we can conjugate the pair of transpositions:
[L
5
,R
5
] = (1 25)(6 11)
by the four-step move sequence β = RL−1R
−6L which moves disks 1, 35, 11 and 21 to spots 6, 11,
1 and 25, respectively. Therefore,
σ2 = σ4β[L
5
,R
5
]β
−1
= ((RLR−1L)
3L
5
(RLR−1L)
3L
4
)(RL−1R
−6L)(L
5R
5L
−5R
−5
)(L
−1R
6LR−1
)
= (1 11).
Figure 16.9: Fundamental 2-cycle: σ2 = (1 11).210 Chapter 16. The Hungarian Rings Puzzle
16.3 Solving the end-game
Theoretically, knowing how to perform 2-cycles is enough to solve the puzzle for any configuration.
However, this would be very slow to perform manually. We now summarize a strategy for solving
the puzzle.
(a) Starting with a scrambled puzzle put disks 7 through 16 on the left ring, and disks 21 through
30 on the right ring in proper numerical order.
(b) Still using general heuristics get a few more disks in their proper places if possible.
(c) Write down the remaining permutation in cycle form.
(d) Work on cycles that at length 5 or longer using conjugates of the fundamental 5-cycle
σ5 = (1 11 35 11 16). If the cycle length is more than 5, you will be able to get 4 disks at a
time into their right places. If the cycle is length 5 then you can solve all disks in the cycle
this way.
(e) At this point all remaining cycles will be of length 5 or less. Using conjugates of the
fundamental cycles: σ5, σ4, σ3, σ2 solve all disks in each cycle one cycle at a time.
16.4 Hungarian Rings - Coloured version
We now present a simple, and elegant strategy for solving the colour version of the puzzle shown in
Figure 16.10.
Figure 16.10: Hungarian Rings puzzle - coloured version.
There are 10 black disks and 10 red disks, but there are only 9 of each in blue and yellow. Solve
the black and red disks first. There is enough room in the puzzle to do this using general heuristics.
Once these are in their proper locations try to put as many blue and yellow disks in their home
locations using general heuristics. To place the final remaining pieces (blue and yellow) you can
swap two at a time, but if you’re sneaky about how you do this then you actually don’t need to use
a 2-cycle. By placing the same coloured disks in spots 1 and 6, and the disks you want to swap
in spots 11 and 30 (or 16 and 25), the commutators in Figure 16.3 can be used to swap pairs of
disks. Since the intersection disks have the same colour this will go unnoticed, and this process
will essentially allow you to swap any two blue and yellow disks. When using this method try to
put either red or black disks in the intersection spots 1 and 6.
16.5 Exercises
1. Play with one of the virtual puzzles from the course website. Try to solve each scrambling
using the techniques developed in this section.
2. Show that for any cycle α = (a1 a2 a3 a4 a5 ... ak) of length k > 5, there is a 5-cycle β so
that αβ has length k −4. (This fact was used in the strategy for solving the end-game.)17. Partitions & Equivalence Relations
The cubies of Rubik’s cube come in three types: corner cubies, edge cubies, and center cubies. In
some sense we can think of any two edge cubies as equivalent since, using cube moves, we can
take any edge cubie to the location of any other edge cubie (at the cost of possibly moving other
pieces around). Similarly any two corner cubies are equivalent. Grouping similar elements together
when trying to understand a large complicated set is a very powerful idea.
In this lecture we recall the concept of a partition of a set, and discuss its connection with the
concept of an equivalence relation on a set.
17.1 Partitions of a Set
Consider the set of integers Z. There are two well known subsets: the set of odd integers and the
set of even integers. Every integer is a member of one of these subsets, and no integer is a member
of both, so this gives a partition of Z:
Z = {...−5,−3,−1,1,3,5,...} ∪ {...−4,−2,0,2,4,...}.
Definition 17.1.1 A partition of a set A is a finite collection of non-empty subsets A1,A2,...,An
satisfying the following properties.
(a) A is the union of all the Ai’s: A = A1 ∪A2 ∪··· ∪An,
(b) the Ai’s are disjoint: Ai ∩Aj = /0 for all i 6= j, 1 ≤ i, j ≤ n.
Example 17.1 Let E be the set of edge cubies of Rubik’s cube, let V be the set of corner cubies,
and let C be the set of centre cubies. E, V and C are disjoint sets, and their union is the set of all
cubies. Therefore E, V, C is a partition of the set of all cubies. 212 Chapter 17. Partitions & Equivalence Relations
Example 17.2 (a) The three sets
A0 = {...−9,−6,−3,0,3,6,9,...} = {3k | k ∈ Z},
A1 = {...−8,−5,−2,1,4,7,10...} = {3k +1 | k ∈ Z},
A2 = {...−7,−4,−1,2,5,8,11...} = {3k +2 | k ∈ Z},
form a partition of the integers Z. A0 is all the integers which are divisible by 3, A1 are
those integers whose remainder is 1 when divided by 3, and A2 are those whose remainder
is 2 when divided by 3. These exhaust all the possibilities of the remainder, and so
A0 ∪A1 ∪A3 = Z. Moreover, for any particular integer, the remainder (upon division by
3) is unique so these sets are disjoint.
(b) A partition of the positive integers Z
+ into two sets is P∪P where P is the set of prime
numbers, and P = Z
+ −P is the set of non-prime positive integers.
(c) The sets {0,1,2} and {2,3,4} do not form a partition of Z5 = {0,1,2,3,4} since they are
not disjoint. They have the element 2 in common.

We partitioned Z in three different ways: (i) into odd and even sets, (ii) into sets where the
remainder upon division by 3 were the same, and (iii) into the set of primes, and non-primes. This
illustrates there is more than one way to partition a set. As for which one to use, this depends on
the problem you are trying to solve.
Partitioning a set gives us a nice way to group together elements with similarities. This allows
us to focus our attention on subsets rather than the whole set, and this comes in handy when dealing
with permutation puzzles. Partitions are closely related to another concept known as an equivalence
relation, which we now introduce.
17.2 Relations
We are familiar with many types of relations: “parent”, “brother", “sister", “sibling", “spouse", < ,
=, >, ⊂. In essence what we are doing is comparing two objects from the same set.
Definition 17.2.1 Let A be a set. A subset R ⊂ A×A is called a relation on A. If (x, y) ∈ R
then we say x is related to y (and we sometimes write xRy for simplicity).
Notice this definition is quite basic. It just says that by a “relation" we just mean a subset of
A×A.
Example 17.3 Let A = {1,2,3,4,5}, then each of the following is a relation on A.
(a) R1 = {(1,4),(3,2)}
(b) R2 = {(1,1),(2,2),(3,3),(4,4),(5,5)} = {(a,b) ∈ A×A | a = b}
(c) R3 = {(1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5),(3,4),(3,5),(4,5)} = {(x, y) ∈ A ×
A | x < y}
In relation R1 we say: 1 is related to 4 and 3 is related to 2. But 1 is not related to 2. Also, 4
is not related to 1 in this case since (4,1) 6∈ R1. Read this carefully, 1 IS related to 4, but 4 IS
NOT related to 1. Order matters in a relation. For example, John is the father of Jack, but Jack
is not the father of John. This subtlety won’t bother us too much (we are more interested in
equivalence relations, which are symmetric, as discussed in the next section).
Since, by definition, a relation is a subset of A×A, and |A×A| = 5
2 = 25 then there are 2
25
possible relations on A (each element of |A×A| can either be included in the relation, or not,17.3 Equivalence Relation 213
hence there are two choices for each element). Some relations, of course, are more interesting
than others. 
Example 17.4 Let A = {/0,{1},{2},{1,2}} (that is, A is the set of all subset of {1,2}). Con￾sider the relation
R = {(/0, /0), (/0,{1}), (/0,{2}), (/0,{1,2}), ({1},{1}), ({1},{1,2}),
({2},{2}), ({2},{1,2}), ({1,2},{1,2})}.
This is an example of the subset relation, since (X,Y) ∈ R precisely when X ⊂ Y. 
Example 17.5 Let C be the set of all the different configurations of Rubik’s cube. Let’s say
two configurations X and Y are related if there is a quarter turn of one of the 6 faces which takes
configuration X to configuration Y:
(X,Y) ∈ R if Y can be obtained from X by a quarter turn of one face.
This defines a relation on C . The cubes in Figures 17.1a and 17.1b are related (by a quarter
turn of the r face), and the cubes in 17.1b and 17.1c are related (by a quarter turn of the u face).
However, the cubes in 17.1a and 17.1c are not related, since it takes two face turns to get from
one configuration to the other.
Note that if (X,Y) ∈ R then (Y,X) ∈ R, since each quarter turn has an inverse. In this case
we would say R is a symmetric relation.
(a) (b) R
−1
(c) R
−1U
Figure 17.1: Three different configurations of Rubik’s cube.

17.3 Equivalence Relation
For a given set, some relations are more useful than others. We saw in Example 17.3 that there are
2
25 different relations on A = {1,2,3,4,5}, but relations (b) and (c) seem much more meaningful
than relation (a). Perhaps this is because we are so familiar with the relations “=’" and “<". In this
section we focus our attention on a special type of relation that is very useful in mathematics.
First a digression into relationships amongst people. For this let’s just consider the set of all
people who are currently alive, call this set P. There are a number of relations we can consider on
P, for example if we are interested in who is whose child then the relation we would consider is:
xRy if x is a child of y. Or maybe we want to consider the relationship of being a brother: xRy if x
is a brother of y. Perhaps we just want to know who is married, and to whom: xRy if x is a spouse
of y. If your interest is in relationships on a more global scale then you can consider a proximity
relation: xRy if x lives in the same city as y.214 Chapter 17. Partitions & Equivalence Relations
There are some differences in the behaviour of these relations. Consider the “brother of"
relation. Tim could be a brother of Alice, but (assuming Alice is female) Alice is not a brother of
Tim. We say that R is not symmetric in this case. However, the “spouse of" relation is symmetric: if
X is the spouse of Y then Y is the spouse of X.
For the “proximity" relation, if X lives in the same city as Y and Y lives in the same city as Z,
then it should follow that X lives in the same city as Z. We refer to this property as transitivity.
Notice the “child relation" is not transitive, since if Emma is a child of Karen, and Karen is a child
of Henry, then Emma is not a child of Henry (at least we hope not).
Another property that some relations may possess is the ability for an element to be related
to itself. For example, X lives in the same city as X is certainly true. But, X is a child of X is
impossible (though this would make a disturbing plot for a science fiction movie). A relation where
all elements are related to themselves is known as reflexive.
An important, and very useful, class of relations are the relations that are reflexive, symmetric
and transitive.
Definition 17.3.1 Let R be a relation on a set A. We call R an equivalence relation on A if it
satisfies the following properties:
(a) Each element is related to itself: (a,a) ∈ R for all a ∈ A (reflexive property)
(b) If a is related to b then b is related to a: (a,b) ∈ R implies (b,a) ∈ R (symmetric
property)
(c) If a is related to b, and b is related to c then a is related to c: (a,b) ∈ R and (b, c) ∈ R
implies (a, c) ∈ R (transitive property).
Notation: If R is an equivalence relation on A then we often write x ≡ y, or x ∼ y in place of
(x, y) ∈ R for simplicity.
The “child of", “brother of", and “spouse of" relations are not equivalence relations. To see
why we just need to observe that one of the three properties doesn’t hold. In each case the reflexive
property fails to hold. However, the “proximity" relation is an equivalence relation.
In Example 17.3 the relations R1 and R3 are not equivalence relations. For instance, neither
one is symmetric. However, R2 is an equivalence relation.
The “proximity" relation ∼ on P is an equivalence relation. Pick some person, say person X
from Vancouver. What does the set of all people related to X represent: {Y ∈ P | Y ∼ X}? Well,
this would consist of all the people who live in Vancouver. Think about why? Sets of this type will
be important for us, so we give them a special name.
Definition 17.3.2 Let ∼ be an equivalence relation on a set A. For each a ∈ A the set
[a] = {x ∈ A | x ∼ a}
is called the equivalence class of A containing a. We call a a representative of the equivalence
class [a].
The equivalence class of a is sometimes denoted by [a]R or [a]∼.
Lemma 17.3.1 If ∼ is an equivalence relation on a set A and x, y ∈ A, then
(a) x ∈ [x] (an equivalence class contains its representative)
(b) x ∼ y if and only if [x] = [y] (if two elements are related then their equivalence classes
are equal)
(c) [x] = [y] or [x]∩[y] = /0 (equivalence classes are either equal or disjoint).17.3 Equivalence Relation 215
Proof: (a) Since ∼ is reflexive x ∼ x, therefore x ∈ [x].
(b) Suppose x ∼ y. We want to show that this implies [x] = [y]. To do this, let z ∈ [x], then z ∼ x
and since x ∼ y it follows that x ∼ y, by the transitive property, and so z ∈ [y]. Therefore [x] ⊂ [y].
Moreover, y ∼ x by symmetry and a similar argument shows [y] ⊂ [x]. Therefore [x] = [y].
Conversely, suppose [x] = [y]. By part (a), x ∈ [x] = [y], and so x ∼ y.
(c) If [x]∩[y] 6= /0 then let z ∈ [x]∩[y]. It follows that z ∼ x and z ∼ y, and so x ∼ y by transitivity.
Now applying part (b) we have [x] = [y]. 
Partitions and equivalence relations are related as the next result suggests.
Theorem 17.3.2 (a) If A is a set and R is an equivalence relation on A then the set of
equivalence classes form a partition of A.
(b) If A1,...,An is a partition of a set A then the relation R defined by
aRb if a,b ∈ Ai for some i,
is an equivalence relation on A. This relation can written as
R =
[n
i=1
Ai ×Ai
.
The sets Ai are the equivalence classes of relation R.
Proof: (a) This is a direct consequence of Lemma 17.3.1.
(b) By definition of R =
Sn
i=1 Ai ×Ai symmetric. Reflexivity follows from the fact that A is the
union of the Ai’s, and transitivity follows from the fact that the Ai’s are disjoint. 
Definition 17.3.3 If ∼ is an equivalence relation on a set A, then a set of class representatives
is a subset of A which contains exactly one element from each equivalence class. We denote the
set of class representative by A/ ∼.
If ∼ is an equivalence relation on a set A , and x ∼ y then we say x and y are equivalent, rather
than simply saying they are related.
Let’s look at some examples to get a little more comfortable with these ideas.
Example 17.6 — Congruence relation on Z. Let n be a positive integer. Define an equiva￾lence relation ≡ on Z by
a ≡ b if a−b is divisible by n.
We say a is congruent to b modulo n and write a ≡ b (mod n). In Exercise 2 you are asked to
verify that this is indeed and equivalence relation.
For example, 26 ≡ 4 (mod 11) since 26−4 = 22 is divisible by 11. We say 26 is equivalent
to 4 modulo 11. On the other hand, 7 6≡ 3 (mod 5) since 5 does not divide 7−3 = 4.
The equivalence class of x modulo n is often called the congruence class of x modulo n.
The equivalence relation ≡ (mod 2) on Z has two equivalence (congruence) classes:
[0] = {0,±2,±4,...} and [1] = {±1,±3,±5,...}216 Chapter 17. Partitions & Equivalence Relations
A set of equivalence class representatives is {0,1}.
The equivalence relation ≡ (mod 3) on Z has three equivalence (congruence) classes:
[0] = {...,−6,−3,0,3,6,...} = {3k | k in Z},
[1] = {...,−5,−2,1,4,7,...} = {1+3k | k in Z},
[2] = {...,−4,−1,2,5,8,...} = {2+3k | k in Z},
and a set of equivalence class representatives is {0,1,2}.
In general, for n ∈ Z
+ and a ∈ Z, the class of a is
[a] = {a+kn | k ∈ Z}.
The set of equivalence class representatives (also called congruence class representatives modulo
n) is
(Z/ ≡) = {0,1,2,...,n−1}.

Example 17.7 Let C be the set of all the different configurations of Rubik’s cube. The relation
on C given in Example 17.5 is not transitive as we saw in that example.
Instead, let’s consider another relation on C defined by X ≡Y if there is a sequence of moves
involving only U and R that takes configuration X to configuration Y. This is an equivalence
relation. Check for yourself that the three properties hold.
The 3 configurations shown in Figure 17.1 are equivalent, and are elements of the same
equivalence class. A representative for this class is the solved cube 17.1a. How many other con￾figurations are equivalent to the solved cube? It turns out that there are a whopping 73,483,200
configurations all equivalent to the solved cube. This means that by only twisting the R and U
faces of the cube, you can generate over 73 million different configurations of the cube.
In [1]: S48 = SymmetricGroup (48)
R=S48(" (25 ,27 ,32 ,30)(26 ,29 ,31 ,28)(3 ,38 ,43 ,19)(5 ,36 ,45 ,21)(8 ,33 ,48 ,24) ")
L=S48(" (9 ,11 ,16 ,14)(10 ,13 ,15 ,12)(1 ,17 ,41 ,40)(4 ,20 ,44 ,37)(6 ,22 ,46 ,35) ")
U=S48(" (1 ,3 ,8 ,6)(2 ,5 ,7 ,4)(9 ,33 ,25 ,17)(10 ,34 ,26 ,18)(11 ,35 ,27 ,19) ")
D=S48(" (41 ,43 ,48 ,46)(42 ,45 ,47 ,44)(14 ,22 ,30 ,38)(15 ,23 ,31 ,39)(16 ,24 ,32 ,40) ")
F=S48(" (17 ,19 ,24 ,22)(18 ,21 ,23 ,20)(6 ,25 ,43 ,16)(7 ,28 ,42 ,13)(8 ,30 ,41 ,11) ")
B=S48(" (33 ,35 ,40 ,38)(34 ,37 ,39 ,36)(3 ,9 ,46 ,32)(2 ,12 ,47 ,29)(1 ,14 ,48 ,27) ")
H=S48. subgroup ([R,U])
H. order ()
Out[1]: 73483200

Example 17.8 Let A denote the set of all possible ways to reassemble Rubik’s cube. That is,
first remove all edge and corner cubies (see Figure 1.15), then put it back together. Define a
relation ∼ on A as follows:
X ∼ Y if through a sequence of legal moves (i.e. twists of the 6 faces), X can be taken to Y.
This means is we consider two cubes equivalent if one can be twisted into the other.
What is the equivalence class of the solved cube?
This is really asking which configurations are equivalent to the solved state configuration?17.4 Exercises 217
In other words, what are all the possible configurations one can achieve from the solved cube
by twisting faces. In this context, where we are considering all assembled cubes A , this is an
interesting question, since if the equivalence class is not all of A it means there are ways to
reassemble the cube which are not solvable. Therefore you could play the role of a mischievous
trickster and create an unsolvable cube.
Using the notation introduced in this section, and letting X0 denote the cube in the solved
state, then what we want to know is [X0]. Moreover, if there is more than one equivalence
class then it would be interesting to know how many there are and a set of equivalence class
representative, i.e. A / ∼.
We will investigate this question in Lecture 20. But for now we’ll note that |A / ∼ | ≥ 5
since Figure 17.2 shows five assemblies of Rubik’s cube which are not equivalent under legal
cube moves.
(a) solved (b) edge flip (c) edge swap (d) clockwise corner
twist
(e) counterclock￾wise corner twist
Figure 17.2: Five different equivalence class representatives of A . How many more are there?
We also know that a corner swap is not equivalent to X0. However, it is equivalent to the
“edge swap", see Figure 17.3,
Figure 17.3: A corner swap is equivalent to an edge swap, but not equivalent to the solved state.
We’ll determine a complete set of class representatives when we study the Fundamental
Theorem of Cubology in Lecture 20. If you want a sneak peak see Figure 20.6 which lists all
twelve representatives in A / ∼.

17.4 Exercises
1. Consider the "cousin of" relation:
xRy if x is a cousin of y.
Is R symmetric? Is it transitive?
2. In Example 17.6 it was stated that ≡ (mod n) is an equivalence relation on Z. Prove this
statement. That is, show it is reflexive, symmetric and transitive.218 Chapter 17. Partitions & Equivalence Relations
3. For each the following relations defined on the set X determine whether or not the relation is
reflexive, symmetric, or transitive.
(a) X = Z, aRb if a | b (i.e. a divides b)
(b) X = Z, aRb if a+b = 10
(c) X = Z, aRb if a−b > 0
(d) X = Z, aRb if a+b is even
(e) X = Z, aRb if a−b is even
(f) X = Z, aRb if 3 | a+b
(g) X = Z, aRb if gcd(a,b) = 1
(h) X = Z×(Z− {0}), (a,b)R(c,d) if ad = bc
(i) X = R×R, (a,b)R(c,d) if p
(a−c)
2 + (b−d)
2 ≤ 1
(j) X = R×R, (a,b)R(c,d) if ac+bd = 0
4. Define the relation R on R×R by
(a,b)R(c,d) if b−a = d −c.
Show that R is an equivalence relation and describe the set R geometrically.
5. Define the relation R on R×R by
(a,b)R(c,d) if a
2 +b
2 = c
2 +d
2
.
Show that R is an equivalence relation and describe the set R geometrically.
6. Define the relation R on X = {1,2,3,...,20} by
aRb if 3 | a−b.
Show that R is an equivalence relation. Describe the equivalence classes of the corresponding
partition of X.
7. Define the relation R on X = {1,2,3,...,20} by
aRb if a and b have the same prime divisors.
Show that R is an equivalence relation. Describe the equivalence classes of the corresponding
partition of X.
8. For each of the following statements about relations on a set A, where |A| = n, determine
whether the statement is true or false. If it is false, give a counterexample.
(a) If R is a reflexive relation on A, then |R| ≥ n.
(b) If R is a relation on A and |R| ≥ n, then R is reflexive.
(c) If R1, R2 are relations on A and R1 ⊂ R2, then R1 reflexive (symmetric, transitive)
⇒ R2 reflexive (symmetric, transitive).
(d) If R1,R2 are relations on A and R1 ⊂ R2, then R2 reflexive (symmetric, transitive) ⇒
R1 reflexive (symmetric, transitive).
(e) If R is and equivalence relation on A, then n ≤ |R| ≤ n
2
.
9. If A = {a,b, c,d}, determine the number of relations on A that are (i) reflexive, (ii) symmetric,
(iii) reflexive and symmetric, (iv) reflexive and contains (a,b), (v) symmetric and contains
(a,b).
10. If A = {1,2,3,4}, give an example of a relation R on A that is
(a) reflexive and symmetric, but not transitive.
(b) reflexive and transitive, but not symmetric.
(c) symmetric and transitive, but not reflexive
11. Describe a partition of the set of all prime numbers into four classes.17.4 Exercises 219
12. What is wrong with the following argument?
Let A be a set and R a relation on A. If R is symmetric and transitive, then R is reflexive.
Proof: Let (x, y) ∈ R. By the symmetric property (y, x) ∈ R. Then with (x, y),(y, x) ∈ R, it
follows by the transitive property that (x, x) ∈ R. Consequently R is reflexive. 
13. Let A be a set with |A| = n, and let R be an equivalence relation on A with |R| = r. Why is
r −n always even?
14. Conjugation is an equivalence relation. Let G be a group, show that the relation
gRh ⇐⇒ g is a conjugate of h,
is an equivalence relation.
15. Let G be a group and H a subgroup of G. Define a relation R on G by
aRb if b
−1
a ∈ H.
(a) Show R is an equivalence relation.
(b) Show that each equivalence class [a] has the form aH = {ah | h ∈ H} for some a. The
is called the left coset of H in G containing a.
(c) Show that each equivalence class has the same cardinality. That is, show |aH| = |bH|,
for any a,b ∈ H.
(d) Conclude from Theorem 17.3.2 that |H| divides |G|. This proves Lagrange’s Theorem:
the order of a subgroup divides the order of a group. (We’ll discuss Lagrange’s Theorem
further in Section 18.2.)
16. Consider the set of all 2×2 matrices with real entries:
M2,2(R) =  a b
c d 
| a,b, c,d ∈ R

.
Define a relation R on M2,2(R) by
ARB if A is row equivalent to B.
(By row equivalent we mean A can be converted to B through elementary row operations:
(i) multiply a row by a scalar, (ii) swap two rows, (iii) add a multiple of another row to an
existing row.)
Show R is an equivalence relation. How many equivalence classes are there? Determine a
set of class representatives.
17. Define a relation R on M2,2(R) by
ARB if there exists and invertible matrix C such that B = CA.
Show R is an equivalence relation. How does this relation compare to the one in Exercise
16.18. Cosets & Lagrange’s Theorem
In this lecture we introduce a powerful tool for analyzing a group: a coset. We’ll then use cosets to
prove Lagrange’s Theorem which states the size of a subgroup divides the size of the group.
18.1 Cosets
Let H be a subgroup of a group G. Define a relation ∼H on G as follows:
a ∼H b ⇐⇒ a
−1
b ∈ H. (18.1)
Equivalently, a ∼H b if and only if a
−1b = h for some h ∈ H. Or another way to say this is
a ∼H b if and only if b = ah for some h ∈ H.
Lemma 18.1.1 If H < G, then ∼H is an equivalence relation on G. Moreover, if [a] denotes the
equivalence class of a ∈ G, then
[a] = {ah | h ∈ H}.
Proof: We need to show ∼H is reflexive, symmetric and transitive. For all a,b, c ∈ G:
Reflexive: Since H is a subgroup it contains the identity, so a
−1a = e ∈ H, Therefore, a ∼H a.
Symmetric: If a ∼H b then a
−1b ∈ H. Since H is a subgroup it is closed under taking inverses,
so (a
−1b)
−1 = b
−1a ∈ H. Therefore b ∼H a.
Transitive: If a ∼H b and b ∼H c then a
−1b,b
−1
c ∈ H. Since H is a subgroup it is closed under
products, so (a
−1b)(b
−1
c) = a
−1
c ∈ H. Therefore a ∼H c.
It follows that ∼H is an equivalence relation on G.
Since a ∼H b if and only if b = ah for some h ∈ H, then
[a] = {b | a ∼H b}
= {ah | h ∈ H}222 Chapter 18. Cosets & Lagrange’s Theorem

The following definition gives a name to the particular type of equivalence class that appeared
in the lemma.
Definition 18.1.1 — Coset of H in G. Let G be a group and H a subgroup of G. For any a ∈ G,
the set
aH = {ah | h ∈ H}
is called the left coset of H in G containing a. Analogously,
Ha = {ha | h ∈ H}
is called the right coset of H in G containing a. The element a is called the coset representative
of aH or Ha.
The right coset is the equivalence class that comes from the equivalence relation a ∼ b if and
only if ab−1 ∈ H.
Since left cosets of H are the equivalence classes under the relation ∼H they form a partition of
the group G. In particular, for any two left cosets aH and bH we either have
aH = bH or aH ∩bH = /0.
Let’s see what these cosets look like in a few specific examples.
Example 18.1 Let S3 = {ε,(1 2),(1 3),(2 3),(1 2 3),(1 3 2)}, and consider the subgroup
H = h(1 2)i = {ε,(1 2)}. The left cosets of H are:
εH = H = {ε,(1 2)}
(1,3)H = {(1 3),(1 3)(1 2)} = {(1 3),(1 3 2)}
(2,3)H = {(2 3),(2 3)(1 2)} = {(2 3),(1 2 3)}
The left coset representatives of H in G are therefore ε,(1 3), and (2 3).
Notice that
(1 2)H = H, (1 3 2)H = (1 3)H, (1 2 3)H = (2 3)H.
In other words, it doesn’t matter which element of the coset you use to describe it. For instance,
{(1 2),(1 3 2),(1 2 3)} is another set of left coset representatives of H in G.
The right cosets of H are:
Hε = H = {ε,(1 2)}
H(1,3) = {(1 3),(1 2)(1 3)} = {(1 3),(1 2 3)}
H(2,3) = {(2 3),(1 2)(2 3)} = {(2 3),(1 3 2)}
Notice that the left and right cosets are not necessarily the same. For example (1 3)H 6= H(1 3).18.1 Cosets 223
For the subgroup K = h(1 2 3)i = {ε,(1 2 3),(1 3 2)} there are only two distinct left cosets:
K = {ε,(1 2 3),(1 3 2)}
(1,2)K = {(1 2),(1 2)(1 2 3),(1 2)(1 3 2)} = {(1 2),(1 3),(2 3)}.
Notice that K = (1 2 3)K = (1 3 2)K and (1 2)K = (1 3)K = (2 3)K. 
Example 18.2 Consider Z12, the group of integers modulo 12, and the subgroup H = h3i =
{0,3,6,9}. The cosets of H are:
0+12 H = H = {0,3,6,9}
1+12 H = {1,4,7,10}
2+12 H = {2,5,8,11}
Note that the left and right cosets are the same in this case since Z12 is abelian. Also,
1+12 H = 4+12 H = 7+12 H = 10+12 H.

In each of the examples above notice that the only coset of H which is a subgroup of G is H
itself. Here are some basic properties of cosets.
Lemma 18.1.2 — Properties of Cosets. Let H be a subgroup of G and a ∈ G.
(a) a ∈ aH
(b) aH = H ⇐⇒ a ∈ H
(c) For a,b ∈ G, either aH = bH or aH ∩bH = /0.
(d) aH = bH ⇐⇒ a
−1b ∈ H ⇐⇒ b
−1a ∈ H
(e) If H is finite then |aH| = |H|
(f) aH = Ha ⇐⇒ a
−1Ha = H.
(Note that by a
−1Ha we mean the set {a
−1ha | h ∈ H}.)
Proof: First observe that since aH is the equivalence class [a] then (a), (c), and (d) are just the
results of Lemma 17.3.1 which we have already proven.
(b) If aH = H then a ∈ aH = H. Conversely, suppose a ∈ H. Then aH ⊂ H, while on the other
hand, if b ∈ H then a
−1b ∈ H so b ∈ aH. Therefore aH = H.
Another way to prove this is to just observe that it is a special case of (d) where b = e. Therefore
it follows as a direct consequence of Lemma 17.3.1.
(e) The map ψ : H → aH defined by
ψ(h) = ah,
is a bijection.
Injective: ψ(h1) = ψ(h2) implies ah1 = ah2, and by cancellation, h1 = h2.
Surjective: For b ∈ aH, there is an h ∈ H such that b = ah. Therefore, a
−1b ∈ H and ψ(a
−1b) = b.
Since ψ is a bijection then H and aH must have the same size: |H| = |aH|.
(f) (=⇒) If aH = Ha then for any h ∈ H there is an x ∈ H such that ax = ha, so a
−1ha ∈ H.
Therefore a
−1Ha ⊂ H. On the other hand, for any h ∈ H there is a y ∈ H such that ah = ya, so
h = a
−1
ya ∈ a
−1Ha. Therefore H ⊂ a
−1Ha. It follows that H = a
−1Ha.224 Chapter 18. Cosets & Lagrange’s Theorem
(⇐=) If a
−1Ha = H then for any h ∈ H there is an x ∈ H such that a
−1
xa = h, so ah = xa ∈ Ha.
Therefore aH ⊂ Ha. A similar argument shows Ha ⊂ Ha. Therefore aH = Ha. 
18.2 Lagrange’s Theorem
We now have the tools available to prove Lagrange’s Theorem, which we first introduced in Section
11.4.
Theorem 18.2.1 — Lagrange’s Theorem. If G is a finite group and H is a subgroup of G, then
|H| divides |G|.
Proof: Let ∼H be the equivalence relation on G defined in (18.1). The equivalence classes are the
left cosets [a] = aH. Let
a1H,a2H,...,akH
denote the distinct left cosets of H in G. By Lemma 18.1.2(e) all equivalence classes have the same
size: |[ai
]| = |aiH| = |H|. Since these classes partition G then
G = a1H ∪a2H ∪··· ∪akH, (disjoint union)
and so
|G| = |a1H|+|a2H|+···+|akH| = k|H|, (18.2)
(by Theorem 2.3.1). Therefore |H| divides |G|. 
From Equation (18.2) we have a formula for the number of left cosets of H in G:
number of left cosets = number of ∼H equivalence classes =
|G|
|H|
.
Similarly, working with right cosets rather than left cosets in our previous arguments, we have
that the number of right cosets is also |G|/|H|.
In particular, the number of left and right cosets of a given subgroup are the same. This is an
important number in calculations involving groups and is called the index of H in G, which is
denoted by [G/H]:
[G/H] = the index of H in G =
|G|
|H|
. (18.3)
However, even though the number of left and right cosets of a subgroup H in G is the same, the
actual left and right cosets themselves can be different. See Example 18.1.
In Lecture 11 we noted a few consequences of Lagrange’s Theorem. We’ll list them here again
for convenience.
Corollary 18.2.2 — ord(a) divides |G|. Let G be a finite group and a ∈ G. Then
(a) ord(a) divides |G|.
(b) a
|G| = e.18.2 Lagrange’s Theorem 225
Example 18.3 — Number of different cubes up to U, R moves. In Example 17.7 we con￾sidered the set C of all the different configurations of Rubik’s cube and the equivalence relation
≡ on C defined by
X ≡ Y ⇐⇒ if there is a sequence of moves involving only U and R
that takes configuration X to configuration Y.
If we identify each configuration in C with its corresponding permutation in RC3, then the
equivalence relation ≡ can be described as
X ≡ Y ⇐⇒ X
−1Y ∈ H = hU,Ri
In other words, it is just the relation ∼H, and so the equivalence classes are the cosets of
H = hU,Ri.
If X0 denotes the cube in the solved state, then [X0] = H, and as we found in Example 17.1,
has size 73,483,200. The number of distinct equivalence classes is given by (18.3), and we can
use SageMath to compute it.
In [1]: S48 = SymmetricGroup (48)
R=S48(" (25 ,27 ,32 ,30)(26 ,29 ,31 ,28)(3 ,38 ,43 ,19)(5 ,36 ,45 ,21)(8 ,33 ,48 ,24) ")
L=S48(" (9 ,11 ,16 ,14)(10 ,13 ,15 ,12)(1 ,17 ,41 ,40)(4 ,20 ,44 ,37)(6 ,22 ,46 ,35) ")
U=S48(" (1 ,3 ,8 ,6)(2 ,5 ,7 ,4)(9 ,33 ,25 ,17)(10 ,34 ,26 ,18)(11 ,35 ,27 ,19) ")
D=S48(" (41 ,43 ,48 ,46)(42 ,45 ,47 ,44)(14 ,22 ,30 ,38)(15 ,23 ,31 ,39)(16 ,24 ,32 ,40) ")
F=S48(" (17 ,19 ,24 ,22)(18 ,21 ,23 ,20)(6 ,25 ,43 ,16)(7 ,28 ,42 ,13)(8 ,30 ,41 ,11) ")
B=S48(" (33 ,35 ,40 ,38)(34 ,37 ,39 ,36)(3 ,9 ,46 ,32)(2 ,12 ,47 ,29)(1 ,14 ,48 ,27) ")
RC3 =S48. subgroup ([R,L,U,D,F,B])
H=S48. subgroup ([R,U])
RC3 . order ()/H. order ()
Out[1]: 588597166080
What does this mean? It means that if we think of any two configurations, in which one
can be obtained from the other by twisting only the R and U faces, as equivalent, then we’ve
partitioned C into 588,597,166,080 sets, each of size 73,483,200, where within each set of the
partition any two configurations are equivalent under U, R moves. But for any two configurations
coming from different sets in the partition, there is no way to obtain one from the other using U,
R moves. In this sense there are 588,597,166,080 different configurations up to R, U moves. 
An Application to Number Theory:
We briefly look at how our previous results can be used to establish two very famous theorems
in number theory.
Corollary 18.2.3 — Fermat’s Little Theorem. For every integer a and every prime p,
a
p ≡ a (mod p).
That is, p divides a
p −a.
Proof: Let r be the remainder of a upon division by p. Since a ≡ r (mod p) and a
p ≡ r
p
(mod p)
then it suffices to prove the corollary for 0 ≤ a ≤ p−1. The result for a = 0 is trivial. So assume
1 ≤ a ≤ p−1. Then we can assume a ∈ U(p), the group of integers {1,2,..., p−1} under multi￾plication modulo p. (See Lecture 10 for further discussion of U(n).) Since |U(p)| = p−1 then by
Corollary 18.2.2(b) a
p−1 ≡ 1 (mod p), therefore a
p ≡ a (mod p). 226 Chapter 18. Cosets & Lagrange’s Theorem
For example, without doing any calculation we know that 201113 −2011 is divisible by 13.
Corollary 18.2.4 — Euler’s Theorem. Let a ∈ Z, n ∈ Z+ and gcd(a,n) = 1. Then
a
φ(n) ≡ 1 (mod n).
Proof: It suffices to prove the result for 0 < a < n, since a
k ≡ r
k
(mod n) for any k ∈ N, where
r is the remainder of a when divided by r. Since gcd(a,n) = 1 then a ∈ U(n), the multiplicative
group of units modulo n. Since |U(n)| = φ(n) (Euler’s φ-function) then by Corollary 18.2.2(b) it
follows that
a
φ(n) = a
|U(n)| ≡ 1 (mod n).

18.3 Exercises
1. Consider the group Z12 and the subgroup H = h4i = {0,4,8}.
(a) Are the following pairs of elements related under ∼H?
(i) 3,7 (ii) 5,11 (iii) 6,9
(b) Find all (left) cosets of H in G.
2. In S7, are the following pairs of elements related under ∼H where H = A7?
(a) (1 2)(3 4)(5 6), (1 7)(2 6)(3 5)(4 7)
(b) (2 3)(4 6), (1 3 5 7 4)
(c) (1 3 7 2), (2 4 3 6 5)
3. Let H = {ε,(1 3)} in S3.
(a) Find all the left cosets of H.
(b) Find all the right cosets of H.
4. Find all of the left cosets of H = {1,11} in U(30).
5. Let H and K be subgroups of a group G such that gcd(|H|,|K|) = 1. Show that |H ∩K| = 1.
6. Suppose that a has order 15. Find all of the left cosets of ha
5
i in hai.
7. Let ord(a) = 30. How many left cosets of ha
4
i in hai are there? List them.
8. Show that the order of U(n) is even when n > 2.
9. Let G be a group such that |G| = 35.
(a) Show that G has at most 5 subgroups of order 7.
(b) Show that G has at most 7 subgroups of order 5.
(c) Deduce that G has at least one element of order 5 and at least one element of order 7.
10. Let H be a subgroup of a group G with |H| =
1
2
|G|.
(a) Show that a 6∈ H implies G = H ∪aH.
(b) Show that a 6∈ H implies a
nH 6= a
n+1H.
(c) Deduce that every element in G which has odd order is contained in H.
11. (a) How many 3-cycles are there in A5?
(b) How many 5-cycles are there in A5?
(c) Use Exercise 10 to show that A5 has no subgroup of order 30.18.3 Exercises 227
12. Repeat the argument of Exercise 11 (modifying it where appropriate) to show that A4 has no
subgroup of order 6.
13. Compute 515 (mod 7) and 713 (mod 11).IV
19 Rubik’s Cube: Beginnings . . . . . . . . . . . 231
19.1 Rubik’s Cube terminology and notation
19.2 Impossible Moves
19.3 A Catalog of Basic Move Sequences
19.4 Strategy for Solution
19.5 Exercises
20 Rubik’s Cube: The Fundamental Theorem
243
20.1 Rubik’s Cube - A Model
20.2 The Fundamental Theorem of Cubology
20.3 When are two assembled cubes equivalent?
20.4 Exercises
21 Rubik’s Cube: Subgroups of the Cube
Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
21.1 Building Big Groups from Smaller Ones
21.2 Some Subgroups of RC3
21.3 Structure of the Cube Group RC3
21.4 Exercises
Part Four: Rubiks’ Cube19. Rubik’s Cube: Beginnings
In this lecture we summarize terminology and notation that we have used so far, and introduce
Singmaster notation for each piece and position of the cube. There is no “one size fits all" notation
when modelling Rubik’s cube, we’ll see that each notation has its benefits depending on what you
are trying to achieve.
19.1 Rubik’s Cube terminology and notation
The notation we use was first introduced by David Singmaster in the early 1980’s, and is the most
popular notation in use today.
19.1.1 Move Notation
Fix an orientation of the cube in space. We may label the 6 sides as f, b, r, l, u, d for front, back,
right, left, up, and down. See Figure 1.14 on page 19.
Face moves:
A quarter twist of a face by 90 degrees in the clockwise direction (looking at the face straight on)
is denoted by the uppercase letter corresponding to the name of the face. For example, F denotes
the move which rotates the front face by 90 degrees clockwise. See Table 19.1 for a complete
description of cube moves and notation.
Slice moves:
Slice moves are moves in which one of the three middle slices is rotated. For example, if the slice
between the l and r face is rotated upwards, that is, in the clockwise direction when viewed from
the right face, then we denote this move by MR. We could also view this move from the left side as
a counterclockwise rotation, so we could denote it by M−1
L
. Similarly, we have slice moves for the
slice parallel to the u and d face, and for the slice parallel to the f and b face. These moves are
denoted by:
MR = M−1
L
, MU = M−1
D
, MF = M−1
B
.
See Figure 19.1. MR is the most commonly used slice move so sometimes we’ll abbreviate it as M.232 Chapter 19. Rubik’s Cube: Beginnings
(a) Slice move MR. (b) Slice move MU . (c) Slice move MF .
Figure 19.1: Three basic slice moves of Rubik’s cube.
Whole cube moves:
The whole cube, as a single object, can be rotated in space. If the rotation is in the clockwise
direction as viewed from the right face then we denote the move by R. This could also be viewed
as a counterclockwise rotation from the left face perspective, so we could also denote it by L −1
.
See Figure 19.2.
Figure 19.2: Whole cube rotation R. Also denoted by L −1
.
19.1.2 Position and Piece Notation
The 26 pieces of the cube, called cubies, split up into three distinct types: centre cubies (having
only one coloured sticker), edge cubies (having two coloured stickers), corner cubies (having
three coloured stickers).
Figure 19.3: Cubie UF is in
its home location, but not in
its home orientation since it is
flipped. Similarly for cubie UB.
We call the space which a cubie can occupy a cubicle, and we
call the space a sticker can occupy a facet. We can also describe
a facet as the face of a cubicle. As the pieces move around, the
cubies move from cubicle to cubicle, and the stickers move from
facet to facet. In the 15-puzzle, Oval Track, and Hungarian Rings
puzzles, we called the location a piece could occupy a position or
spot, the terms cubicle and facet are customary to use when talking
about the Rubik’s cube.
To solve the puzzle each cubie must get restored to its original
cubicle, we call this the cubies home location, and each sticker
must get returned to its original facet (i.e. the facets must also be
correctly positioned), we call this the cubies home orientation.
1
See Figure 19.3 for an example of this distinction. Once all cubies
are in their home locations and orientations the puzzle will be
solved.
We will describe a labeling of facets and cubicles below. It is
important to keep in mind that facets and cubicles don’t move, only the pieces (cubies and stickers)
move. So when describing a labeling of the cubicles and facets it is best to think of this label as
1This can also be called its home position.19.1 Rubik’s Cube terminology and notation 233
notation pictorial description of basic move
(Singmaster) (clockwise/counterclockwise refers to viewing the face straight-on)
F , F
−1 F = quarter turn of front face in the clockwise direction.
F
−1 = quarter turn of front face in the counterclockwise direction.
B , B
−1 B = quarter turn of back face in the clockwise direction.
B
−1 = quarter turn of back face in the counterclockwise direction.
R , R
−1 R = quarter turn of right face in the clockwise direction.
R
−1 = quarter turn of right face in the counterclockwise direction.
L , L
−1 L = quarter turn of left face in the clockwise direction.
L
−1 = quarter turn of left face in the counterclockwise direction.
U , U
−1 U = quarter turn of up face in the clockwise direction.
U
−1 = quarter turn of up face in the counterclockwise direction.
D , D
−1 D = quarter turn of down face in the clockwise direction.
D
−1 = quarter turn of down face in the counterclockwise direc￾tion.
MR , M−1
R MR = quarter turn of vertical slice in the clockwise direction.
M−1
R
= quarter turn of vertical slice in the counterclockwise di￾rection.
F
2
,B
2
,R
2
,L
2
,U
2
,D
2 denote the corresponding half-turn of the face.
Since a clockwise half-turn is equivalent to a counterclockwise half-turn then
F
2 = F
−2
, B = B
−2
, R
2 = R
−2
, L
2 = L
−2
, U
2 = U
−2
, D = D
−2
F,B,R,L ,U ,D denote clockwise rotations of the whole cube
behind the indicated face.
Table 19.1: Summary of cube move notation
appearing on a fictitious layer of skin surrounding the puzzle. The pieces can move around under
the skin but the skin remains in place.
Cubicle notation:
A cubicle can be identified by the faces it touches. For example, the cubicle that touches the up,
right and front faces can be denoted by ur f . There was nothing special in how we chose to list
these letters, we could denote this cubicle by any one of the 6 symbols: f ur, ur f , r f u, f ru, r f u, or
u f r since each gives enough information to describe the up-right-front corner cubical. However,
the general convention is to use one of the first three symbols f ur, ur f , or r f u since these list the
faces this cubical touches in clockwise order.
Since a corner cubicle has three facets we denote it by three letters. Similarly, edge cubicles are234 Chapter 19. Rubik’s Cube: Beginnings
denoted by two letters. Figures 19.4 and 19.5 shows a labeling of all the cubicles (use any one of
the facet labelings to denote the cubicle to which the facet belongs).
Facet Notation
Figures 19.4 and 19.5 shows a labeling of the facets of the cube. This labeling is due to mathemati￾cian, and puzzle enthusiast, David Singmaster. Our typical labeling uses numbers (see Figure 1.16
in Lecture 1), but this labeling uses strings of symbols. That advantage to this labeling is that it
allows us to easily determine where a facet position is located. For example, thinking back to our
numerical labeling, if asked where facet 41 is, you likely don’t know without looking at a diagram.
However, with this new labeling, facet 41 is facet dl f , which you know is on the dl f cubicle. As
for which of the three sides it is, this is denoted by the first letter in the name: d for down. So facet
dl f is the down side of the dl f cubicle.
If you are wondering how the order of the other two letters were chosen (i.e. why didn’t we call
it d f l?), the answer is simple: we wrote them in the order the faces appear when moving around
the corner in the clockwise direction. You can check all the labelings in Figure 19.4 to verify this is
the convention.
There is a benefit to labeling cubicles and facets in a similar fashion. For the moment we focus
our attention on cubies rather than cubicles/facets. For example consider the move R
−1
. The cubie
in cubicle ur f moves to cubicle d f r. However, there are three different ways a corner cubie can be
placed in a cubicle, so just stating that ur f moves to d f r doesn’t indicate how it is oriented once it
gets to d f r. Notice that the up face of the cubie is placed in the front face when it moves to the
new cubicle. Similarly, the right face stays on the right face. It would be more descriptive to say
that R
−1
takes the cubie in position ur f to position f rd. We can write
u f r R
−1
−−→ f dr.
This indicates that cubie in cubicle u f r moves to cubicle f dr, and the stickers moved as follows:
the sticker in the u-facet moves to f-facet, f-facet moves to d-facet, and r-facet moves to r-facet.
Figure 19.4: Facet labeling on the 3×3×3 Rubik’s cube.19.2 Impossible Moves 235
(a) View of front (red), right
(yellow) and up (blue) faces.
(b) View of back (orange),
left (white) and down
(green) faces.
Figure 19.5: Rubik’s cube with classic colouring scheme: blue opposite green, red opposite orange, white
opposite yellow. Each cubicle is labeled using Singmaster’s notation.
Cubie notation:
A cubie is identified by its home cubicle. We use capital letters to denote cubies, and lower case
to denote cubicles. For example, URD denotes the cubie whose home location is the urd cubicle.
It may seem that using the same notation to denote cubies as cube moves is a bad idea, however,
we’ll see that this doesn’t cause any trouble at all. We just need to be aware as to whether we are
talking about cube moves, or cube pieces.
Table 1.2 in Lecture 1 summarizes the terminology.
With all this notation now in our tool box, we are ready to begin a thorough investigation of
Rubik’s cube.
19.2 Impossible Moves
Through previous investigations we’ve found that there are some moves that are impossible to do
on the cube. Figure 19.6 shows five moves that are impossible. This will be helpful when coming
up with a strategy to solve the cube since knowing what is impossible to do, will prevent us from
going on a search we would never come back from.
(a) single edge flip (b) edge swap (c) single corner
twist
(d) double corner
twist in same direc￾tion
(e) corner swap
Figure 19.6: Five different configurations that are impossible to achieve.
Exercise 14 of Lecture 7 uses permutation-parity arguments to show why it is impossible to
(i) flip an edge, (ii) swap two edges, and (iii) swap two corners. The impossibility of the corner
twist configurations were investigated using SageMath in Exercises 1, 2 and 4 of Lecture 12. In
Lecture 20 we will come back to these configurations and give mathematical proofs that they are
indeed impossible, thereby confirming the computations done by SageMath. Since we were relying236 Chapter 19. Rubik’s Cube: Beginnings
on group theoretic algorithms in SageMath that are beyond the scope of this book, providing an
independent proof will provide us with some closure on this topic.
19.3 A Catalog of Basic Move Sequences
Over the previous few lectures we have built some useful moves using commutators. These were
move sequences that affected only a few pieces, while returning everything other piece to the
position it started. Using conjugation we are able to modify these move sequences to produce other
useful moves of the same form. Below is a list of the moves we’ve created for convenient reference.
Notice that for each type of cubie (corners and edges) we can (i) 3-cycle any three cubies of
the same type, and (b) twist/flip a pair of cubies of the same type. Knowledge of these moves is
enough to solve the cube: first place cubies in their home locations (using 3-cycles), then orient the
cubies in their home orientation (using twist/flip moves).
Reminder: [x, y] = xyx−1
y
−1
is the commutator of x and y and y
−1
xy is the conjugate of x by y.
In the following tables, the move labeled C/E# is created using commutators, and the corresponding
move denoted by C/E#’ is the conjugate of it by the indicated move sequence y.
19.3.1 Corner Moves
name effect move-sequence
C1 [LD2L
−1
,U]
= LD2L
−1ULD2L
−1U
−1
C1’ conjugate C1 by y = B:
B
−1
[LD2L
−1
,U]B
= B
−1LD2L
−1ULD2L
−1U
−1B
C2 [LD2L
−1F
−1D
2F,U]
= LD2L
−1F
−1D
2FUF−1D
2FLD2L
−1U
−1
C2’ conjugate C2 by y = R:
R
−1
[LD2L
−1F
−1D
2F,U]R
= R
−1LD2L
−1F
−1D
2FUF−1D
2FLD2L
−1U
−1R
It is worth noting that we also found the following corner 3-cycle that preserves orientation of
the cubies:19.4 Strategy for Solution 237
The move sequence is [F
−1D
−1FR−1D
2RF−1DF,U].
19.3.2 Edge Moves
name effect move-sequence
E1 [MR,U
2
]
= MRU
2M−1
R U
2
E1’ conjugate E1 by y = DR2
:
R
2D
−1
[MR,U
2
]DR2
E2 [M−1
R DMRD
−1M−1
R D
2MR,U]
E2’ conjugate E2 by by y = RB:
B
−1R
−1
[M−1
R DMRD
−1M−1
R D
2MR,U]RB
19.4 Strategy for Solution
Our primary goal is in understanding the cube. With that goal in mind we should come away with a
strategy for solving the cube. We will not find an optimal strategy, nor will will look for a large
collection of moves to tackle all sorts of configurations. Instead, we will be content with a method
that systematically solves the cube and uses the tools we have developed in this course. Ideally the
method should not involve a lot of memorization, but should rely on a solid understanding of the
mathematics of permutations, i.e. commutators and conjugates.
If you haven’t already tried to use the moves listed in Section 19.3 to find a strategy yourself,
try it now. The fun of discovering a solution on your own may be lost if you read the strategy
described below.
More efficient methods than the ones described here, all of which require memorization, are
left for the reader to find. A simple web search can keep you busy for weeks.238 Chapter 19. Rubik’s Cube: Beginnings
19.4.1 The Layer Method
The method we will use to solve the cube is known as the layer method. We begin by solving the
top layer, followed by the middle layer, and finally the bottom layer. A sketch of the steps involved
in implementing this strategy are shown in Figure 19.7.
You may begin by solving any colour, it is best to choose a colour that stands out from the rest.
This way it is easy to find the pieces on the scrambled cube. In this book we begin by solving the
blue layer, in which case the bottom layer will be green.
(a) Step 1: Solve edges in top
layer.
(b) Step 2: Solve corners in top
layer.
(c) Step 3: Solve edges in mid￾dle layer
(d) Step 4: Flip over, solve re￾maining corners (first permute
then orient).
(e) Step 5: Solve remaining
edges (first permute then orient).
Figure 19.7: The Five-Step strategy for solving Rubik’s cube.
Solving the top and middle layers are pretty straightforward. You should be able to do this with
a little practice and using general heuristics. A theory based strategy won’t be needed until the
end-game, which is when we reach the bottom layer.
19.4.2 Solving the Top Layer
Solving the top layer is a straightforward task. You can send pieces to the bottom layer, then bring
them back to the top layer, to achieve desired twists. That is, make use of conjugation.
Step 1: Solve the edge cubies in the top layer.
Keep in mind that centres remain fixed, so there is only one proper home orientation for an edge
cube. Use the centres as a guide. This is indicated in Figure 19.7a where the centres are shown, and
the stickers of the edge cubies must match the centres.
Step 2: Solve the corner cubies in the top layer.
Let α be any of the moves R, L, F, B. This will bring one corner cubie into the down layer.
Rotating the down layer will then bring a new cubie into the cubicle whose contents are moved
back up to the top layer by α
−1
. In other words, αDα
−1
allows you to change a corner cubie in the
top layer without affecting any other cubies in the top layer. This should help you finish the top
layer completely.
19.4.3 Solving the Middle Layer
Step 3: Solve the edge cubies in the middle layer.19.4 Strategy for Solution 239
If the cubie that is to be placed in the middle layer is currently in the bottom layer then rotate
the bottom layer so one sticker of the edge cubie is directly beneath the centre cubie of the same
colour. For example, see Figure 19.8 where the cubie to be moved in the middle layer has a red
sticker on the side layer, so it is placed directly under the red center cubie. Whatever the colour
of your cubie is, rotate the entire cube so the cubie is now in the f d cubicle, and the colour of the
sticker in the f face matches the centre cubie of the f face right above it.
Figure 19.8: Moving an edge piece into the middle layer. To move right apply [D
−1
,R][D,F], to move left
apply [D,L][D
−1
,F
−1
].
Depending on whether the cubie is to be moved to the right of the left we can apply one of the
two sequences:
right: [D
−1
,R
−1
][D,F] = D
−1R
−1DRDFD−1F
−1
left: [D,L][D
−1
,F
−1
] = DLD−1L
−1D
−1F
−1DF
Notice that in either case the move sequence is a product of Z commutators (see Lecture 13 for a
discussion of these commutators).
If a cubie that you want to place is currently in the wrong position in the middle layer, then use
either of the above sequences to move it to the bottom layer (by replacing it with a random cubie
from the bottom layer). Now proceed with the step as described above,
Another method for placing edge pieces into the middle layer is to conjugate the edge 3-cycle
E1. Using this method you’ll want to turn the puzzle over so the unsolved final layer is now on top.
Find an edge piece to move from the top layer to the middle, and line up the edge piece with the
centre on the front as shown in Figure 19.9.
Figure 19.9: Another method to move an edge piece into the middle layer. To move right apply
(R
−1D
−1
)E1(DR), to move left apply (LD)E1(D
−1L
−1
).
Depending on whether the cubie is to be moved to the right of the left we can apply one of the
two sequences:
right: (R
−1D
−1
)E1(DR)
left: (LD)E1(D
−1L
−1
)
Using either of these two methods we can finish off the middle layer.240 Chapter 19. Rubik’s Cube: Beginnings
19.4.4 Solving the Bottom Layer
We now have one layer left to solve. This is the end-game of Rubik’s cube since it is here where
things get a bit more difficult. Trying to place the remaining few pieces while leaving previously
placed pieces alone requires a collection of strategic moves: ones that move only a few pieces at a
time. Luckily, the theory of commutators and conjugates has provided such moves (see Section
19.3).
Flip the cube over, so the unsolved layer is the top layer. This will give us clear visibility of all
the pieces in the last layer that need to be solved.
Step 4: Solve the remaining corner cubies.
We’ll do this in two steps:
Step 4a: Place the remaining corner cubies in their home locations. Don’t worry about twisting
them into their home orientations just yet.
Look at the stickers on each of the remaining corner cubies. The colours that appear will tell
you exactly where its home location is. For example, the corner cubie with green, white and red
stickers belongs to the cubicle which is the intersection of the green, white and red faces. Recall
the colour of a face is given by the colour of the centre cubie.
Now that we know where each corner cubie must be moved, see if a simple rotation of the up
face will restore all corners to their proper locations. If not, then we are in one of the following
cases:
Case 1: It is possible to put exactly one corner cubie in its correct location, and have the other 3
out of position. Use the 3-cycle move sequence C1’ in Section 19.3, or its inverse, to move the
remaining 3 corner cubies into their correct positions.
For example, if we need to swap two corner cubies as in the following diagram
then we can first rotate the face so 1 is home, and 2, 3, 4 are out of position, then we just need to
perform a 3-cycle (2 4 3).
Case 2: Up to a physical rotation of the whole cube, we are in either one of the two following
situations:
The first case can be taken to the second case by rotating the face counterclockwise 90◦
. So
assume we are in the second case, which is an even permutation and can be solved with 3-cycles.
Apply C1’ to produce the 3-cycle (1 4 2), which produces the following position.19.5 Exercises 241
Now use C1’ to produce a 3-cycle (1 3 2).
Therefore, to restore the corner cubies to their correct locations at most two 3-cycles need to be
applied.
Step 4b: Orient (twist) the remaining corner cubies into their home orientations.
Repeated applications of C2 will be enough to orient the corners. (Note, we already used
SageMath to discover it is impossible to have exactly one corner twisted, or exactly two corners
twisted in the same direction. We’ll also prove this in the next lecture, see Corollary 20.2.2.)
Here are a couple of possible scenarios that we could be faced with:
In the first case, applying C2’ will solve the corners. In the second case, we can apply C2−1
on
corners 1 and 4 to solve corner 4, and twist corner 1 so that it is now out of home position by a
clockwise twist. Then applying C2 to corners 1 and 2 will solve the remaining two corners. Other
scenarios are possible and can be dealt with similarly.
Step 5: Solve the remaining edge cubies.
We’ll do this in two steps:
Step 5a: Place the remaining edge cubies in their home locations. Don’t worry about flipping them
into their home positions just yet.
Much like the corners, we can use 3-cycles E1’ to restore all the edge cubies.
Step 5b: Orient (flip) the remaining edge cubies into their home orientations.
Using E2 and E2’ we can flip any pair of edges to restore to their home orientation.
Note, it is impossible to have a single edge flipped as we’ve already discovered. Therefore,
flipped edges occur in pairs and so E2, E2’ are the only moves we will need.
Congratulations! Not only have we solved the cube, we built our moves from scratch! This
illustrates the power of permutation theory.
19.5 Exercises
1. Practice solving the first two layers of your cube. Repeatedly scramble and solve until you
are confident you can easily solve the first two layers.
2. Practice with Step 5: solving edges in final layer. In each part below, write down a strategy
to solve the puzzle.242 Chapter 19. Rubik’s Cube: Beginnings
(a) (b) (c) (d)
3. Practice with Step 4: solving corners in final layer. In each part below, write down a
strategy to solve the puzzle.
(a) (b) (c)
4. Impossible Configurations. In each part below, a configuration of the last layer is shown.
Show that each configuration is impossible.
(Hint: Try showing the configuration is equivalent to one shown in Section 19.2.)
(a) (b) (c) (d)
5. Practice with Steps 4 and 5: solving corners and edges in final layer. In each part below,
a configuration of the last layer is shown. Write down a strategy to solve the puzzle.
(a) (b)20. Rubik’s Cube: The Fundamental Theorem
In this lecture, we present the Fundamental Theorem of Cubology. This is the theorem which gives
us a complete understanding of what permutations of the cubies are possible, a solvability criteria,
and much more.
20.1 Rubik’s Cube - A Model
We now describe a mathematical model of Rubik’s cube which is superior to our previous models
in a few ways. The difficulty in modeling Rubik’s cube comes from the fact that each cubie has a
home location and orientation. Sometimes we would like to focus on how the cubies have been
permuted (without focusing on the orientation of the stickers), and other times we would like to
focus on how the cubies are oriented in the cubicle they occupy. Our model will consist of a 4-tuple
(ρ,σ, v,w), where ρ (respectively σ) describes how the corner cubies (respectively edge cubies)
are permuted, and v (and w) describe how the corner cubies (and edges) are oriented.
We begin by fixing an orientation of the cube in space, that is, we choose an up face and a front
face. This can be done in any way whatsoever (in fact, there are 24 different ways to do this), but
once an orientation is chosen this will remain fixed for the rest of the discussion. In these notes the
orientation we will choose is: blue face up, red face in front. We call this the standard orientation
of the cube. We also assume the classic colouring scheme: blue opposite green, red opposite orange,
and yellow opposite white. See Figure 20.1.
We recall some notation:
• V denotes the set of corner cubies. |V| = 8.
• E denotes the set of edge cubies. |E| = 12.
• RC3 denotes the Rubik’s cube group.
• SV = S8 is the symmetric group on the corner cubies.
(Fix a numbering of the corner cubies - see Figure 20.2a.)
• SE = S12 is the symmetric group on the edge cubies.
(Fix a numbering of the edge cubies - see Figure 20.2b.)244 Chapter 20. Rubik’s Cube: The Fundamental Theorem
Figure 20.1: The standard orientation for the cube: blue face up, red face front.
As with our other puzzles, we imagine that both the cubies (pieces), and the cubicles (locations),
are numbered. When a cubie is in its home location the cubie number will match the cubicle number.
Imagine a fictitious layer of skin around the outside of the cube which stays in place under cube
moves, the cubicle numbers are printed on this layer of skin. Any configuration of the cube will
give two permutations (ignoring orientation of the cubies): ρ ∈ S8 which corresponds to how the
corner cubies are permuted, and σ ∈ S12 which corresponds to how the edge cubies are permuted.
See Figure 20.2.
(a) corners (b) edges
Figure 20.2: Labeling of the corner and edge cubies.
In order to describe the orientation of the corner and edge cubies, we mark exactly one facet
of each cubicle with a “+" sign. Again, imagine this marking is on the fictitious layer of skin
surrounding the cube. Figure 20.3a shows how the facets will be marked. The key thing to observe
is that every cubicle has exactly one facet marked. We call this marked facet the primary facet of
the cubicle.
Next we mark the stickers on each cubie based on their relative position to the primary facet.
For this marking, think of the cube in the solved state. For an edge cubie, mark the sticker in the
primary facet with a 0 (i.e. the sticker beneath the “+" mark on the skin layer), and mark the other
sticker on the same cubie with a 1. For a corner cubie, mark the sticker in the primary facet with a
0, and mark the other two stickers with 1 and 2 as you move in the clockwise direction around the
cubie. See Figure 20.3b.
For an arbitrary configuration of the cube, the orientation of the edge pieces can be charcterised
by a 12-tuple w = (w1,w2,...,w12) ∈ Z
12
2 = {0,1}
12, where wi
is the number on the sticker of the
i
th edge cubie that is in the primary facet of the cubicle it occupies.1 Read this last statement again
carefully so you know how wi
is defined. Similarly, the orientation of the corner pieces can be
characterized by an 8-tuple v = (v1, v2,..., v8) ∈ Z
8
3 = {0,1,2}
8
, where vi
is the number on the
sticker of the i
th corner cubie that is in the primary facet of the cubicle it occupies.
We now have a way to describe the position of all the pieces in any configuration of the cube.
1For a set A, A
n denotes the cartesian product of A with itself n times: A×A··· ×A.20.1 Rubik’s Cube - A Model 245
(a) Marking the primary facets of a
cubicle.
(b) Numbering the stickers of a cu￾bie.
Figure 20.3: Orientation markings.
Definition 20.1.1 — Position vector of a configuration of cube pieces.. If X is any configu￾ration of Rubik’s cube the position vector is a 4-tuple (ρ,σ, v,w) where ρ ∈ S8, σ ∈ S12 encode
the permutations of the cubies, and v ∈ Z
8
3
and w ∈ Z
12
2
encode the orientations of the cubies.
ρ ∈ S8 : ρ(i) = j if corner cubie i is in cubicle j.
σ ∈ S12 : σ(i) = j if edge cubie i is in cubicle j.
v = (v1, v2,..., v8) ∈ Z
8
3 = {0,1,2}
8
: vi
is the number on the i
th corner cubie beneath
the “+" mark of the cubicle ρ(i) it occupies.
w = (w1,w2,...,w12) ∈ Z
12
2 = {0,1}
12 : wi
is the number on the i
th edge cubie beneath
the “+" marking of the cubicle σ(i) it occupies.
For simplicity we will use 0 to denote the 8-tuple and 12-tuple (0,0,...,0).
Let’s look at a few examples where we take a configuration and write it as a 4-tuple.
Example 20.1 Write the position vector for each of the following configurations.
(a) The solved state
cube
(b) Move R
−1
(c) Move U (d) Corner 3-cycle C1’
Figure 20.4: Configurations for Example 20.1.246 Chapter 20. Rubik’s Cube: The Fundamental Theorem
(a) The solved state cube shown in Figure 20.4a corresponds to the 4-tuple (ε, ε,0,0), since
cubies have not been permuted, nor twisted.
(b) Consider the cube corresponding to the move R
−1
as shown in Figure 20.4b. The corner
cubies have been 4-cycled: ρ = (2 3 7 6), and the edge cubies have been 4-cycled:
σ = (2 7 10 6). To determine the orientation vectors v and w, we look at where each cubie
was moved to, one by one. Let’s start with the corner cubies. Only 4-corner cubies were
moved, namely 2, 3, 7 and 6, therefore we only need to figure out what v2, v3, v7 and v6
are. All others are 0. Cubie 2 (the blue-yellow-orange cubie) has its orange side in the
primary facet now, since the orange side is labeled 1 (see bru facet in Figure 20.3) this
means v2 = 1. Similarly, cubie 3 (the URF cubie) is now in cubicle f rd and the sticker
from facet f ur (marked with number 2) is now in primary facet d f r. Therefore, v3 = 2.
The reader should verify the rest of the components in the orientation vectors:
v = (0,1,2,0,0,2,1,0), w = (0,1,0,0,0,1,1,0,0,1,0,0).
Together with permutations ρ = (2 3 7 6), and σ = (2 7 10 6), we have found the 4-tuple
position vector.
(c) Consider the cube corresponding to the move U as shown in Figure 20.4c. Since all “+"
markings are on the up-face each cubie still has the sticker labeled 0 in the primary facet.
Therefore,
v = 0, w = 0.
The permutations of the cubies are:
ρ = (1 2 3 4), σ = (1 2 3 4).
(d) Finally, consider the cube corresponding to the move C1’ as shown in Figure 20.4d. Edge
cubies remained fixed so σ = ε and w = 0. The corner cubies are permuted as a 3-cycle
ρ = (2 4 3) and the orientation vector is:
v = (0,1,2,0,0,0,0,0).

Not every 4-tuple (ρ,σ, v,w) corresponds to a legal configuration of Rubik’s cube (i.e. one that
is achievable using basic cube moves). For example, the 4-tuple (ε, ε,0,(1,0,0,...,0)) represents
a single edge flip (where the edge cubie in the ub position was flipped). This is not possible to
do through legal cube moves as we have already seen (see Lecture 7 Exercise 14, see also the
SageMath calculation on page 152). Therefore, the set
S8 ×S12 ×Z
8
3 ×Z
12
2 = {(ρ,σ, v,w) | ρ ∈ S8,σ ∈ S12, v ∈ Z
8
3
,w ∈ Z
12
3 } (20.1)
is much larger than the set of legal cube configurations RC3. In fact, this set is precisely the set
of ways there are to reassemble the cube (assuming you don’t take apart the mechanism holding
the centres in place, but only disassemble and reassemble edge and corner pieces). We denote
set (20.1) by RC∗
3
and call it the illegal cube group (as opposed to RC3 which is the (legal) cube
group). Previously we used the notation A to denote this set, but from now on we will use RC∗
3
as
a reminder of how it is related to RC3.
Since RC3 ⊂ RC∗
3 we’d like to characterize exactly which 4-tuples correspond to legal configu￾rations of the cube. This characterization is known as the Fundamental Theorem of Cubology and
is our focus in the next section.20.2 The Fundamental Theorem of Cubology 247
20.2 The Fundamental Theorem of Cubology
Not all position vectors (ρ,σ, v,w) ∈ S8 ×S12 ×Z
8
3 ×Z
12
2
correspond to legal configurations of the
cube. The next theorem tells us exactly which configurations are possible.
Theorem 20.2.1 — Fundamental Theorem of Cubology. A position vector (ρ,σ, v,w) ∈
S8 × S12 × Z
8
3 × Z
12
2
corresponds to a legal configuration of Rubik’s cube if and only if the
following three conditions are satisfied.
(a) sign(ρ) = sign(σ)
(b) v1 +v2 +···+v8 = 0 (mod 3)
(c) w1 +w2 +···+w12 = 0 (mod 2)
In plain language this theorem says that a configuration is legal if and only if the following
conditions are satisfied:
(a) Permutation of edge cubies and permutation of corner cubies have the same parity.
(b) The number clockwise corner twists equals the number of counterclockwise corner twists
modulo 3 (meaning corners twisted in the same direction occur in threes).
(c) Flipped edges occur in pairs.
Verify for yourself that these conditions are satisfied in each case of Example 20.1. Moreover,
in the case of a single edge flip in the ub cubicle, the position vector is (ε, ε,0,(1,0,0,...,0)) and
doesn’t satisfy condition (c) of the theorem, hence it isn’t a legal configuration.
Proof: (1) First we show that the three conditions are necessary, i.e. that they hold for every
legal configuration. To do this we just need to show these conditions hold for the solved state
configuration, and they are preserved under the six basic cube moves R,L,U,D,F,B.
The solved state configuration corresponds to the position vector (ε, ε,0,0) and the three
conditions in the theorem are satisfied.
For each of the six moves R,L,U,D,F,B the corresponding position vectors are:
R 7→ ((2 6 7 3),(2 6 10 7),(0,1,2,0,0,2,1,0),(0,1,0,0,0,1,1,0,0,1,0,0))
L 7→ ((1 4 8 5),(4 8 12 5),(2,0,0,1,1,0,0,2),(0,0,0,1,1,0,0,1,0,0,0,1))
U 7→ ((1 2 3 4),(1 2 3 4),(0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0))
D 7→ ((5 8 7 6),(9 12 11 10),(0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0))
F 7→ ((3 7 8 4),(3 7 11 8),(0,0,1,2,0,0,2,1),(0,0,0,0,0,0,0,0,0,0,0,0))
B 7→ ((1 5 6 2),(1 5 9 6),(1,2,0,0,2,1,0,0),(0,0,0,0,0,0,0,0,0,0,0,0))
and the conditions (a)-(c) of the theorem are satisfied. Each pemutation is a 4-cycle which is odd
and has sign −1. The sum of the components of each corner orientation vector is either 0 or 6
which is divisible by 3. The sum of the components of each edge orientation vector is either 0 or 4
which is divisible by 2.
If X is a legal configuration with position vector (ρ,σ, v,w) satisfying (a)-(c) then after applying
one of the six basic moves to X (a)-(c) remain satisfied: (a) is satisfied since every one of these
moves simultaneously causes a 4-cycle of corners cubies and a 4-cycle of edge cubies, which
have the same parity. (b) remains satisfied, because components with U and D don’t change at
all, while with R,L,F,B simultaneously two components are increased by 1 (modulo 3), and two
components are reduced by 1 (modulo 3). (c) remains satisfied, because components with U,D,F,B
don’t change at all, while with R, L simultaneously two components are increased by 1 (modulo 2),
and two components are reduced by 1 (modulo 2).
Since every legal configuration is obtainable from the solved state cube through legal cube
moves then properties (a)-(c) are satisfied by any legal configuration.248 Chapter 20. Rubik’s Cube: The Fundamental Theorem
(2) In order to prove these three conditions are sufficient, we have to show that any position
vector (ρ,σ, v,w) satisfying these three properties can be solved using legal cube moves. Our
strategy for solving the cube, as laid out in Lecture 19, is enough to prove this part. Let’s see why.
Let X be a configuration corresponding to (ρ,σ, v,w).
(i) Without loss of generality we can assume sign(ρ) = sign(σ) = 1. If not, just apply any
single basic quarter-turn of a face, the resulting position vector will now satisfy this parity
condition. This means the permutation of corner cubies is even, and therefore can be restored
to their home locations using 3-cycles. Also, edge cubies can be restored to their home
locations using 3-cycles. Since we can perform any 3-cycle of corner or edge cubies, then
we can restore all cubies to their home locations. Call this new configuration X
0
.
Since the basic cube moves preserve conditions (a)-(c) then the position vector (ρ
0
,σ
0
, v
0
,w
0
)
for X
0
satisfies these conditions, and in this case ρ
0 = ε, σ
0 = ε. All that remains now is to
show we can twist the cubies into their proper orientations.
(ii) Condition (c) says that an even number of edge pieces need to be flipped. Since we have
moves to flip any pair of edges then we can solve all the edge cubies. Condition (b) says that
the number of clockwise corner twists is equal to the number of counterclockwise corner
twists modulo 3. So first twist any cw, ccw pairs into their home orientations. The result will
be that all remaining corner twists will occur in triples: 3 cw or 3 ccw twists. These can be
solved using our corner twisting moves.
Therefore, X is a solvable configuration. This completes the proof of the theorem. 
As a consequence of the Fundamental Theorem of Cubology we can characterize some impos￾sible configurations. Notice we have already seen each of these moves to be impossible (some used
SageMath to investigate these impossibilities). However, now we have given a formal mathematical
proof that these are impossible.
Corollary 20.2.2 — Impossible Configurations. Each of the following configurations cannot
be obtained from the solved state cube through legal cube moves.
(a) Exactly two edge cubies are swapped.
(b) Exactly two corner cubies are swapped.
(c) Exactly one edge cubie is flipped.
(d) Exactly one corner cubie is twisted.
(e) Exactly two corner cubies are twisted in the same direction.
The Fundamental Theorem of Cubology is the solvability criteria for Rubik’s cube. This is
the analogue to the solvability criteria that we developed for all the other puzzles. Moreover, this
theorem allows us to compute the size of the group RC3 simply by counting the number of 4-tuples
that satisfy the three conditions.
Corollary 20.2.3 — The Size of the Cube Group. The number of legal and illegal configura￾tions of Rubik’s cube are:
|RC3| = |C | =
|RC∗
3
|
12
= 2
27
· 3
14
· 5
3
· 7
2
· 11 = 43,252,003,274,489,856,000 ≈ 4.3 · 1019
.
|RC∗
3
| = |A | = 8!· 12!· 3
8
· 2
12
.
Proof: Since RC∗
3 = S8 ×S12 ×Z
8
3 ×Z
12
2
then |RC∗
3
| = |S8|·|S12|·|Z3|
8
·|Z2|
12 = 8!· 12!· 3
8
· 2
12
.
For legal positions this number is reduced by20.3 When are two assembled cubes equivalent? 249
• half by condition (a) in Theorem 20.2.1, since there are as many even permutations as there
are odd ones,
• a third by condition (b), since the orientation of 7 corner cubies can be arbitrarily chosen and
this would determine the orientation of the 8th
,
• half by condition (c), since the orientation of 11 edge cubies can be arbitrarily chosen and
this would determine the orientation of the 12th
.
Therefore |RC3| =
|RC∗
3
|
12 . 
How big is this number |RC3|?
If we put 4.3 · 1019 cubes of 5.6 cm width – each in a different configuration – side by side in
a straight line, the length of the line would be ≈ 2.4 · 1015 kilometres, which is about 255 light
years. By way of comparison the star α1 Centauri is about 4.39 lights years away. Or packed
tightly on the surface of the earth the cubes would blanket the earth to a height of 15 metres (see
Figure 20.5). Allowing a second for each turn, it would take 1364 billion years to go though all
possible configurations (assuming you don’t revisit the same configuration twice). By comparison
the universe is around 13 billion years old.
Figure 20.5: Covering the earth in Rubik’s cubes would create a blanket 15m thick. Calculation on
wolframalpha.com.
Of course it is not the size of the cube group that make Rubik’s cube challenging. After all, if
you were given a shuffled deck of 52 playing cards and asked to put them back in order this would
be a simple task. Yet there are 52! ≈ 8.07 · 1067 ways the cards could be shuffled, and only one is
in the proper order. What makes Rubik’s cube challenging is the way the pieces are linked together,
and the restrictions this imposes on legal moves.
20.3 When are two assembled cubes equivalent?
Consider the equivalence relation ∼RC3
on the illegal cube group RC∗
3
defined by:
X ∼RC3 Y ⇐⇒ X
−1Y ∈ RC3
⇐⇒ X can be taken to Y through a sequence of twists of the 6 faces.250 Chapter 20. Rubik’s Cube: The Fundamental Theorem
All this means is that we consider two assembled cubes equivalent if one can be twisted into the
other using legal cube moves.
This partitions RC∗
3
into equivalence classes: the left cosets of RC3 in RC∗
3
. The class RC3 is
precisely the set of solvable configurations. We’d like to be able to determine (i) all the other left
cosets of RC3, (ii) a set of representatives for RC∗
3
/ ∼RC3
, and (iii) a quick way to determine to
which coset a given cube belongs.
By Corollay 20.2.3 the number of left cosets is [RC∗
3
: RC3] = |RC∗
3
|
|RC3| = 12. The First Fundamental
Theorem 20.2.1 provides a complete characterization of the left cosets. The conditions for a
position vector (ρ,σ, v,w) to be in RC3 are sign(ρ) = sign(σ) and v1 +v2 +···+v8 = 0 (mod 3)
and w1 +w2 +···+w12 = 0 (mod 2). The other cosets are given by the 11 different ways these
conditions can fail.
In what follows we will use the notation X(i, j,k)
, where i ∈ {±1}, j ∈ {0,1,2} and k ∈ {0,1},
to denote a configuration of the cube where sign(ρ)·sign(σ) = i, v1 +v2 +···+v8 = j (mod 3),
and w1 +w2 +···+w12 = k (mod 2).
For example, the following conditions on the position vector (ρ,σ, v,w)
sign(ρ) = sign(σ), v1 +v2 +···+v8 = 0 (mod 3), w1 +w2 +···+w12 = 1 (mod 2)
defines the coset [X(1,0,1)
] = X(1,0,1)RC3 represented by a single edge flip X(1,0,1)
(shown in Figure
20.6c).
sign(ρ) = sign(σ), v1 +v2 +···+v8 = 1 (mod 3), w1 +w2 +···+w12 = 0 (mod 2)
defines the coset [X(1,1,0)
] = X(1,1,0)RC3 represented by a single corner twist in the counterclockwise
direction X(1,1,0)
(shown in Figure 20.6e).
sign(ρ) 6= sign(σ), v1 +v2 +···+v8 = 0 (mod 3), w1 +w2 +···+w12 = 0 (mod 2)
defines the coset [X(−1,0,0)
] = X(−1,0,0)RC3 represented by a swap of two edge cubies X(−1,0,0)
, or
equivalently a swap of two corner cubies (shown in Figure 20.6b).
sign(ρ) 6= sign(σ), v1 +v2 +···+v8 = 2 (mod 3), w1 +w2 +···+w12 = 0 (mod 2)
defines the coset [X(−1,2,0)
] = X(−1,2,0)RC3 represented by a swap of two edge cubies, and a clock￾wise twist of a corner cubie X(−1,2,0)
(shown in Figure 20.6j). And so on.
Figure 20.6 shows a set of twelve representative for the left cosets of RC3 in RC∗
3
. This means
that a randomly assembled cube can be reduced to exactly one of these 12 possibilities.20.3 When are two assembled cubes equivalent? 251
(a) X(1,0,0)
: solved (b) X(−1,0,0)
: edge swap (c) X(1,0,1)
: edge flip
(d) X(−1,0,1)
: edge swap
& edge flip
(e) X(1,1,0)
: counter￾clockwise corner twist
(f) X(−1,1,0)
: ccw corner
twist & edge swap
(g) X(1,1,1)
: ccw corner
twist & edge flip
(h) X(−1,1,1)
: ccw cor￾ner twist & edge swap
& edge flip
(i) X(1,2,0)
: clockwise
corner twist
(j) X(−1,2,0)
: cw corner
twist & edge swap
(k) X(1,2,1)
: cw corner
twist & edge flip
(l) X(−1,2,1)
: cw corner
twist & edge swap &
edge flip
Figure 20.6: Representatives for the 12 different equivalence classes in RC∗
3
Example 20.2 The following diagram shows a (possibly illegal) configuration of the last
layer of Rubik’s cube. We’d like to determine which of the configurations in Figure 20.6 it is
equivalent to. To do this it suffices to determine the position vector.252 Chapter 20. Rubik’s Cube: The Fundamental Theorem
The corners permutation is ρ = (6 7) and the edge permutation is σ = ε. The corner
orientation vector is
v = (0,0,0,0,0,1,0,0)
since corner cubie 6 is now in position 7 and twisted counterclockwise, and the edge orientation
vector is
w = (0,0,0,0,0,0,0,0,0,0,0,1),
since edge cubie 12 is flipped. Therefore
sign(ρ) 6= sign(σ), v1+v2+···+v8 = 1 (mod 3) w1+w2+···+w8 = 1 (mod 2)
so it is equivalent to configuration X(−1,1,1) where: two edges are swapped, one corner is twisted
counterclockwise, and one edge is flipped. This is the configuration in Figure 20.6h. 
20.4 Exercises
1. For each of the following configurations (i) determine the position vector (ρ,σ, v,w) ∈
S8 ×S12 ×Z
8
3 ×Z
12
2
, and (ii) determine whether it is a legal (i.e. solvable) configuration.
(The corner cubicles are labeled in the diagram below, see Figure 20.2 for a labeling of the
edge cubicles.)
(a) (b)
2. Each of the following configurations is solvable. Determine the position vector (ρ,σ, v,w) ∈
S8 ×S12 ×Z
8
3 ×Z
12
2
in each case.
(The corner cubicles are labeled in the diagram below, see Figure 20.2 for a labeling of the
edge cubicles.)20.4 Exercises 253
(a) (b)
3. Verify the following configuration is not solvable, by showing the position vector doesn’t
satisfy the three conditions of Theorem 20.2.1. Determine the quickest way to disassem￾ble/reassemble it so that it becomes solvable. That is, decide if you have to swap two pieces,
or flip a single edge, or twist a corner, or a combination of these, etc.
4. Impossible Configurations. In each part below, a configuration of the last layer is shown.
All non-visible cubies are in their home orientations. Show that each configuration is
impossible by showing its position vector doesn’t satisfy the three conditions of Theorem
20.2.1.
(a) (b) (c) (d)
5. For each of the following move sequences determine the position vector (ρ,σ, v,w) ∈
S8 ×S12 ×Z
8
3 ×Z
12
2
.
(a) RU
(b) R
2U
2
(c) (R
2U
2
)
3
(d) [LD2L
−1
,U] (a corner 3-cycle)
6. For each of the following position vectors (ρ,σ, v,w) ∈ S8 ×S12 ×Z
8
3 ×Z
12
2
draw the corre￾sponding configuration.
(Assume the standard orientation as shown in Figure 20.1.)
(The puzzles templates file on the webpage includes some Rubik’s cube templates.)254 Chapter 20. Rubik’s Cube: The Fundamental Theorem
(a) (ρ,σ, v,w) = ((2 4)(1 3), ε,(1,1,2,2,0,0,0,0),(0,1,1,0,0,0,0,0,0,0,0,0))
(b) (ρ,σ, v,w) = (ε,(2 3)(6 7),(0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0))
(c) (ρ,σ, v,w) = ((2 4)(3 7),(2 7 3),(0,1,2,1,0,0,2,0),(0,0,1,1,0,0,0,0,0,0,0,0))
7. In each part below, a configuration Yi of the last layer for a cube in RC∗
3
is shown. Determine
the representative Xi, j,k (from Figure 20.6) for the coset to which configuration Yi belongs.
That is, determine i ∈ {±1}, j ∈ {0,1,2}, k ∈ {0,1} for which Yi ∈ [Xi, j,k] = Xi, j,kRC3.
(a) Y1 (b) Y2 (c) Y3
(d) Y4 (e) Y5 (f) Y6
8. Are the following two (possibly illegal) configurations equivalent under cube moves?
(a) X (b) Y
9. Explorations of the Pocket Cube: 2×2×2 cube.
The 2×2×2 Rubik’s cube is shown in the figure.20.4 Exercises 255
In this question you are asked to discover an analogous version of the Fundamental Theorem
of Cubology (Theorem 20.2.1) as applied to this cube. You are also asked to determine the
number of inequivalent illegal cubes, and a set of representatives. This requires a thorough
understanding of the material in this lecture since you will have to do a similar analysis for
this smaller cube.
To begin, we have to notice that there are no fixed centres for any of the sides. In fact, every
cubie can be moved on this puzzle. Therefore, specifying a frame of reference requires some
care. Notice that it is sufficient to only use the three moves F, R and D. Since, for example,
an L move results in the same configuration as an R move (up to a rotation of the whole cube).
Restricting our basic moves to just F, R and D means the ulb cubie remains fixed. We will
use this cubie as our frame of reference.
(a) Define a numbering of the cubies and cubicles. (Analogous to Figure 20.2.) Include a
picture of your numbering scheme. (Note, you don’t need to number the cubie in ulb
since it doesn’t get moved by F, R and D. This means you only need to number the
remaining 7 cubies.)
(b) Define what you will mean by the primary facet of each cubicle. (Analogous to Figure
20.3a.) Include a picture of your labeling. (See templates file at [Mul17] for a 2×2×2
template.)
(c) Assign orientation numbers to each sticker. (Analogous to Figure 20.3b.) Include a
picture of your labeling.
(d) Give a definition for a position vector of a configuration. This should contain complete
information about the configuration.
(e) Give some examples of configurations and the corresponding positions vectors.
(f) Define the terms: illegal Pocket Cube groups RC∗
2
and legal Pocket Cube group RC2.
(Analogous to the 3×3×3 description on page 246.)
(g) State a Fundamental Theorem of Pocket Cubology. (Analogous to Theorem 20.2.1)
(h) Prove your Fundamental Theorem of Pocket Cubology. (See what parts of the proof of
Theorem 20.2.1 can still be used/modified.)
(i) Use your theorem to determine the size of the legal pocket cube group RC2. (Analogous
to Corollary 20.2.3)
(j) Determine a condition on the position vector to determine when two assembled pocket
cubes in RC∗
2
are equivalent under cube moves. Find the number of inequivalent ways
there are to assemble a pocket cube, and determine a set of representative for each
equivalence class. In other words, do what was done in Section 20.3 but now for the
pocket cube.
Emphasis here is on explanations. Write in full sentences and provide clear detailed descrip￾tions.21. Rubik’s Cube: Subgroups of the Cube Group
In this lecture, we consider various collections of moves on Rubik’s cube and determine the
subgroups they generate. We also see what the Fundamental Theorem of Cubology tells us about
the structure of the group operation on RC3 and we show the only (nontrivial) move sequence that
commutes with every other move sequence is the superflip.
21.1 Building Big Groups from Smaller Ones
Starting with a collection of groups we can stick them together to form a new, larger group.
Given a finite collection of groups G1,G2,...Gn, the direct product of G1,G2,...Gn is
G1 ⊕G2 ··· ⊕Gn = {(g1,g2,...,gn) | gi ∈ Gi}
which is a group under the operation:
(g1,g2,...,gn)(h1,h2,...,hn) = (g1h1,g2h2,...,gnhn).
It is understood that each product gihi
is performed with the operation of group Gi
.
To see why G1 ⊕G2 ··· ⊕Gn is a group under this operation we observe:
1) It is closed since each Gi
is closed under its operation.
2) The operation is associative since the operations on each of the Gi’s is associative.
3) The identity is (e1, e2,..., en) where each ei
is the identity of Gi
.
4) The inverse of an element (g1,g2,...,gn) is (g
−1
1
,g
−1
2
,...,g
−1
n
).
Example 21.1 The direct product of S3 and Z5 consists of 3!· 5 = 30 elements. For example
((1 3 2),4), and ((1 2),3) are two elements in S3 ⊕Z5. The product of these elements is
((1 3 2),4) ((1 2),3) = ((1 3 2)(1 2),4+3) = ((1 3),2).258 Chapter 21. Rubik’s Cube: Subgroups of the Cube Group

For simplicity let’s just limit our attention to the direct product of two groups: G⊕H. The
subset
G⊕ {eH} := {(g, eH) | g ∈ G}
is a subgroup of G⊕H which essentially a copy of G. Similarly,
{eG} ⊕H := {(eG,h) | h ∈ H}
is a subgroup of G⊕H which essentially a copy of H, In other words, we have used G and H to
build a bigger group G⊕H in which G and H are subgroups.
Example 21.2 The group Z
3
2
:= Z2 ⊕ Z2 ⊕ Z2 is a group of order 8, and every non-identity
element has order 2.
The group Z2 ⊕Z3 is a cyclic group of order 6, since the element (1,1) has order 6 (check
this).
Z2 ⊕Z3 = {(0,0),(0,1),(0,2),(1,0),(1,1),(1,2)}.

For a group G, we denote by G
n
the direct product with itself n-times: G
n = G⊕G··· ⊕G.
21.2 Some Subgroups of RC3
In this section we investigate some of the types of groups that appear as subgroups of the Rubik’s
cube. In Chemistry, one my be interested in what elements make up a compound. As an analogy,
think of the Rubik’s cube group as the “compound", and the “elements" that make it up are the
subgroups. We’d like to see what kinds of groups live inside RC3.
It is particularly interesting to “realize" a finite group A as a subgroup of the cube. This can be
done for all groups of order < 13; the smallest abelian group which is not a subgroup of RC3 is Z13
(since 13 6 | |RC3| by Corollary 20.2.3), and the smallest non-abelian group is D13. In the next few
sections, we’ll see a few examples of some groups that live inside RC3.
21.2.1 Cyclic subgroups and orders of elements in RC3
The easiest type of subgroup to look for are the cyclic subgroups. Since the order of an element is
precisely the size of the cyclic group it generates then we are really just interested in what are the
possible orders of elements in RC3.
An element of order 4 is R. So RC3 contains a cyclic group of order 4 as a subgroup: Z4 = hRi.
The move sequence R
2U
2 has order 6, so RC3 contains as cyclic subgroup of order 6: Z6 =
hR
2U
2
i.
The move sequence RU has order 105 and the move sequence RU−1 has order 63. Therefore,
RC3 contains copies of Z63 and and Z105 as subroups.
In [1]: S48 = SymmetricGroup (48)
R=S48(" (25 ,27 ,32 ,30)(26 ,29 ,31 ,28)(3 ,38 ,43 ,19)(5 ,36 ,45 ,21)(8 ,33 ,48 ,24) ")
sL= S48(" (9 ,11 ,16 ,14)(10 ,13 ,15 ,12)(1 ,17 ,41 ,40)(4 ,20 ,44 ,37)(6 ,22 ,46 ,35) ")
U=S48(" (1 ,3 ,8 ,6)(2 ,5 ,7 ,4)(9 ,33 ,25 ,17)(10 ,34 ,26 ,18)(11 ,35 ,27 ,19) ")
D=S48(" (41 ,43 ,48 ,46)(42 ,45 ,47 ,44)(14 ,22 ,30 ,38)(15 ,23 ,31 ,39)(16 ,24 ,32 ,40) ")
F=S48(" (17 ,19 ,24 ,22)(18 ,21 ,23 ,20)(6 ,25 ,43 ,16)(7 ,28 ,42 ,13)(8 ,30 ,41 ,11) ")
B=S48(" (33 ,35 ,40 ,38)(34 ,37 ,39 ,36)(3 ,9 ,46 ,32)(2 ,12 ,47 ,29)(1 ,14 ,48 ,27) ")
RC3 =S48. subgroup ([R,L,U,D,F,B])
(R*U). order ()21.2 Some Subgroups of RC3 259
Out[1]: 105
In [2]: (R*U ^( -1)). order ()
Out[2]: 63
There exist precisely 73 different orders of elements in RC3 and the maximum order is 1260.
The move sequence RU2D
−1BD−1 has order 1260. (See page 93 of [Joy08], or page 51 of [Ban82].)
21.2.2 Two Squares Group: hR
2
,U
2
i
Let H = hR
2
,U
2
i denote the group generated by the square moves R
2
and U
2
. The group contains
the useful 2-pair edge swap: (R
2U
2
)
3
.
Figure 21.1: The two pair edge swap (R
2U
2
)
3
in H = hR
2
,U
2
i.
We can find all the elements of this group fairly easily:
H ={1,R
2
,R
2U
2
,R
2U
2R
2
,(R
2U
2
)
2
,(R
2U
2
)
2R
2
,(R
2U
2
)
3
,
(R
2U
2
)
3R
2
,(R
2U
2
)
4
,(R
2U
2
)
4R
2
,(R
2U
2
)
5
,(R
2U
2
)
5R
2
},
Therefore, |H| = 12. Note that 1 = (R
2U
2
)
6
, U
2 = (R
2U
2
)
5R
2
, and U
2R
2 = (R
2U
2
)
5
.
We can compute the order of each element one by one and see that the maximum order is 6.
This can also be done quickly in SageMath.
In [3]: H=S48. subgroup ([R^2 ,U ^2])
[g. order () for g in H]
Out[3]: [1 , 2 , 2 , 2 , 2 , 3 , 2 , 6 , 2 , 3 , 2 , 6]
We’ve just discovered that H is a group of order 12, with two elements of order 6, two elements
of order 3, and seven elements of order 2. This seems eerily reminiscent of the dihedral group D6.
Let check to see H is really D6 in disguise.
In [4]: H. is_isomorphic ( DihedralGroup (6))
Out[4]: True
It is! We’ve just discovered that the dihedral group D6 lives inside the Rubik’s cube group. 1
1We say two groups G1 and G2 are isomorphic if they have the same group structure (i.e. same Cayley table), but
the names of the elements could be different. More precisely, we mean there is a map φ : G1 → G2 which is a bijection,
and for any g,h ∈ G1, φ(gh) = φ(g)φ(h). SageMath has built in functionality for checking whether two groups are
really the same (i.e. isomorphic).260 Chapter 21. Rubik’s Cube: Subgroups of the Cube Group
21.2.3 The Slice Squared Group: hM2
R
,M2
U
,M2
F
i
Let H = hM2
R
,M2
U
,M2
F
i denote the group generated by the square slice moves.
Each of the generators M2
R
,M2
U
,M2
F
has order 2, and each of the products
M2
RM2
F
, M2
RM2
U , M2
FM2
U
has order 2 also (play with your cube to see this). This means that H is an abelian group (Why?),
and every element has order 2.
For simplicity of notation let a = M2
R
, b = M2
F
and c = M2
U
then it is straightforward to see that:
H ={1,a,b, c,ab,ac,bc,abc},
is a group of order 8. In fact, H ≈ Z2 ⊕Z2 ⊕Z2 under the correspondence
1 ↔ (0,0,0)
a ↔ (1,0,0)
b ↔ (0,1,0)
c ↔ (0,0,1)
ab ↔ (1,1,0)
ac ↔ (1,0,1)
bc ↔ (0,1,1)
abc ↔ (1,1,1)
See Figure 21.2.
Figure 21.2: Cayley graph of H: The elements in the slice squared group and their representations in terms
of the generators.
21.3 Structure of the Cube Group RC3
Let X and Y be two elements of RC3 with corresponding position vectors(ρ,σ, v,w) and (ρ
∗
,σ
∗
, v
∗
,w
∗
),
respectively.21.3 Structure of the Cube Group RC3 261
Recall, this notation means that corner cubie i moved to cubicle ρ(i) and vi
is the label on the
sticker beneath the primary face labeled “+", and edge cubie i moved to edge cubicle σ(i) with
label wi on the sticker in the primary facet labeled “+". If we compose the moves X and Y then the
position vector of XY can be obtained as follows:
• corner cubie i moves to (ρρ∗
)(i) = ρ
∗
(ρ(i)),
• edge cubie i moves to (σσ∗
)(i) = σ
∗
(σ(i)),
• the label on the i
th corner cubie, in the primary facet of cubicle (ρρ∗
)(i), is vi+v
∗
ρ(i)
(mod 3).
• the label on the i
th edge cubie, in the primary facet of cubicle (σσ∗
)(i), is wi+w
∗
σ(i)
(mod 2).
If we define addition of 8-tuple (and 12-tuple) orientation vectors componentwise: i.e. a+b =
(a1,a2,...,ak)+ (b1,b2,...,bk) = (a1+b1,a2+b2,...,ak +bk) (i.e. think Z
8
3 = Z3⊕Z3⊕···⊕Z3
and Z
12
2 = Z2 ⊕Z2 ⊕··· ⊕Z2) then the group operation on RC3 = S8 ×S12 ×Z
8
3 ×Z
12
2
is:
(ρ,σ, v,w)(ρ
∗
,σ
∗
, v
∗
,w
∗
) = (ρρ∗
,σσ∗
, v+ρ(v
∗
),w+σ(w
∗
)) (21.1)
where ρ(v
∗
) represents the orientation vector obtained from v
∗ by replacing the i
th component vi
with vρ(i)
:
ρ(v
∗
) = ρ((v
∗
1
, v
∗
2
,..., v
∗
8
)) = (v
∗
ρ(1)
, v
∗
ρ(2)
,..., v
∗
ρ(8)
).
and σ(w
∗
) represents:
σ(w
∗
) = σ((w
∗
1
,w
∗
2
,...,w
∗
12)) = (w
∗
σ(1)
,w
∗
σ(2)
,...,w
∗
σ(12)
).
Let
G1 = {g = (ρ,σ, v,w) ∈ RC3 | v = 0,w = 0}
G2 = {g = (ρ,σ, v,w) ∈ RC3 | ρ = ε,σ = ε}.
Then G1 and G2 are subgroups of RC3. G1 is the subgroup of all move sequences which
preserves the orientation of all the pieces. G2 is the subgroup of all move sequences which leaves
every cubie in its own cubicle, but may flip/twist the cubies.
The following theorem describes how the subgroups G1 and G2 are interlinked in order to
form RC3. Some of the terms are not explained as it is a more advanced theorem. I include it here
only for the benefit of those who know about: normal subgroups, isomorphisms, and semidirect
products.
Theorem 21.3.1
(a) G1 is a subgroup, G2 is a normal subgroup of RC3.
a
(b) G1 ≈ {(ρ,σ) ∈ S8 ×S12 | sign(ρ) = sign(σ)}, G2 ≈ Z
7
8 ×Z
11
2
.
(c) RC3 is the semidirect product of G1 with G2.
a A normal subgroup is a subgroup H of a group G with the property that all its left and right cosets are equal:
aH = Ha for all a ∈ G. Such subgroups are extremely important in advanced group theory.
21.3.1 The Centre of the Cube group, Z(RC3), and the Superflip
Recall that for any group G, the centre of G, denoted by Z(G) is the set of all elements that
commute with every element of G:
Z(G) = {a ∈ G | ag = ga for all g ∈ G}.
The centre is a subgroup of G. (See Section 11.3)262 Chapter 21. Rubik’s Cube: Subgroups of the Cube Group
Theorem 21.3.2 The centre of RC3 consists of two elements: the identity ε and the superflip
XSF. The superflip, is the configuration in which every cubie is in its home location but all the
edge cubies are flipped (see Figure 21.3).
Z(RC3) = {ε,XSF}.
Figure 21.3: The superflip configuration of Rubik’s cube: XSF.
Proof: Let g = (ρ,σ, v,w) ∈ Z(RC3). Since the centre of the symmetric group Sn, for n ≥ 3, is
trivial and since every ρ
∗ ∈ S8 appears as a first coordinate of the position vector, it immediately
follows from Equation 21.1 that ρ = ε, and similarly σ = ε. That is, g = (ε, ε, v,w) ∈ G2. Thus,
gg∗ = g
∗g simply becomes v + v
∗ = v
∗ + ρ
∗
(v), i.e. v = ρ
∗
(v) for all ρ
∗ ∈ S8, and w + w
∗ =
w
∗ +σ
∗
(w), i.e. w = σ
∗
(w) for all σ
∗ ∈ S12. This means the v and w are constant (i.e. vi = vj for
all 1 ≤ i, j ≤ 8 and wi = wj for all 1 ≤ i, j ≤ 12). So we have
v = (0,0,0,0,0,0,0,0) = 0 or v = (1,1,1,1,1,1,1,1) = 1 or v = (2,2,2,2,2,2,2,2) = 2
and
w = (0,0,0,0,0,0,0,0,0,0,0,0) = 0 or w = (1,1,1,1,1,1,1,1,1,1,1,1) = 1.
The Fundamental Theorem of Cubology (Theorem 20.2.1) excludes the cases v = 1,2, therefore
v = 0. Both choices for w are possible. This means g is either (ε, ε,0,0) or (ε, ε,0,1). Therefore,
Z(RC3) = {(ε, ε,0,0),(ε, ε,0,1)}.
The configuration (ε, ε,0,1) is the superflip. 
21.4 Exercises
1. Consider the direct product S3 ⊕D4 of the symmetric group and the dihedral group.
(a) How many elements does S3 ⊕D4 have. That is, what is |S3 ⊕D4|.
(b) Find the product of ((1 3),H) and ((1 2 3),R90).
(c) What is the order of the element ((1 3),H)?
(d) What is the order of the element ((1 2 3),R90)?
2. Show that Z3 ⊕Z5 is a cyclic group of order 15.
(Hint: What is the order of the element (1,1)?)
3. Is Z2 ⊕Z6 a cyclic group? Explain.V
22 The Orbit-Stabilizer Theorem . . . . . . . . . 265
22.1 Orbits & Stabilizers
22.2 Permutations Acting on Sets: Application of the
Orbit-Stabilizer Theorem
22.3 Exercises
23 Burnside’s Theorem . . . . . . . . . . . . . . . . . 279
23.1 A Motivating Example
23.2 Burnside’s Theorem
23.3 Applications of Burnside’s Theorem
23.4 Exercises
Part Five: Symmetry &
Counting22. The Orbit-Stabilizer Theorem
In this lecture we discuss how to use group theory to count like a professional. The Orbit-Stabilizer
Theorem gives an application of cosets to determine the size of a permutation group. In particular,
we discover a straightforward way to count the number of symmetries of various geometric objects.
22.1 Orbits & Stabilizers
In this section we will take a look at how permutation groups act on various structures.
It will be helpful to extend the definition of a permutation from finite sets of numbers [n] to
arbitrary sets. Let X be a nonempty set. A permutation α of X is a bijection α : X → X. The set
of all permutations of X is called the symmetric group of X and is denoted by SX :
SX = {α | α : X → X is a bijection}.
If X = [n] = {1,2,...,n} then we simply denoted S[n] by Sn.
Definition 22.1.1 — Stabilizer of a Point. Let G be a subgroup of SX . For each i ∈ X, let
stabG(i) = {α ∈ G | α(i) = i}.
We call stabG(i) the stabilizer of i in G.
We can check that stabG(i) is a subgroup of G by using the Two-Step Subgroup Test (Theorem
11.1.1). Since ε fixes every element in X it is definitely in stabG(i). Let α,β ∈ G, then α(i) = i
and β(i) = i. It then follows that α
−1
(i) = i and (αβ)(i) = β(α(i)) = β(i) = i, hence α
−1
,αβ ∈
stabG(i). Therefore stabG(i) < G.266 Chapter 22. The Orbit-Stabilizer Theorem
Definition 22.1.2 — Orbit of a Point. Let G be a subgroup of SX . For each i ∈ X, let
orbG(i) = {α(i) | α ∈ G}.
We call orbG(i) the orbit of i under G.
Example 22.1 If G = S4, then stabS4
(3) is the set of all permutation in S4 which fixes 3. There
are 4! = 24 permutations in S4 but only the ones that don’t have 3 in their disjoint cycle form fix
3. Therefore,
stabS4
(3) = {ε,(1 2),(1 4),(2 4),(1 2 4),(1 4 2)}
= S{1,2,4}
.
Notice we used the notation S{1,2,4}
to denote the set of all permutations of the set {1,2,4}. 
Example 22.2 Let
G = h(1 2 3)(4 5 6)(7 8)i
= {ε,(1 2 3)(4 5 6)(7 8),(1 3 2)(4 6 5),(7 8),(1 2 3)(4 5 6),(1 3 2)(4 6 5)(7 8)}.
be a group of permutations on X = {1,2,3,4,5,6,7,8}. Then
orbG(1) = {1,2,3} stabG(1) = {ε,(7 8)}
orbG(2) = {2,3,1} stabG(2) = {ε,(7 8)}
orbG(3) = {3,1,2} stabG(3) = {ε,(7 8)}
orbG(4) = {4,5,6} stabG(4) = {ε,(7 8)}
orbG(5) = {5,6,4} stabG(5) = {ε,(7 8)}
orbG(6) = {6,4,5} stabG(6) = {ε,(7 8)}
orbG(7) = {7,8} stabG(7) = {ε,(1 2 3)(4 5 6),(1 3 2)(4 6 5)}
orbG(8) = {8,7} stabG(8) = {ε,(1 2 3)(4 5 6),(1 3 2)(4 6 5)}
In each case notice that stabG(i) is a subgroup of G. Also notice that the orbits are either
disjoint or equal. Moreover, the distinct orbits form a partition of X:
{1,2,3},{4,5,6},{7,8}

Let G be a group of permutations on X, and define a relation on X by:
x ∼G y ⇐⇒ y = α(x) for some α ∈ G. (22.1)
Then ∼G is an equivalence relation (see Exercise 2), and the equivalence class of an element x ∈ X
is its orbit:
[x] = orbG(x).
Since equivalence classes partition the set, this indicates that our observation in Example 22.2 were
not a coincidence. Orbits will always be the same or disjoint, and distinct orbit classes will partition
X.22.1 Orbits & Stabilizers 267
Example 22.3 Recall that D4, the dihedral group of order 8, is the group of all symmetries
of the square (see Figure 22.1a). The elements are the rotations R0,R90,R180,R270, and the
reflections H,V,D,D
0
. We can view D4 as a group of permutations on the vertices of the square.
Here we identify the vertices of the square with the set X = {1,2,3,4}. Since vertex 1 can be
taken to any other vertex by a rotation then the orbit of 1 is all of X: orbD4
(1) = {1,2,3,4}. See
Figure 22.1b.
The stabilizer of 1 is:
stabD4
(1) = {R0,D}.
Similarly, we have stabD4
(2) = stabD4
(3) = {R0,D
0}.
(a) Reflection elements in D4 (b) Orbit of vertex 1
Figure 22.1: The group D4 acting as a permutation group on the set of vertices.

Example 22.4 Building on the previous example, we may view D4 as a group of permutations
of the points X enclosed by the square. Figure 22.2a illustrates the orbit of the point P and
Figure 22.2b illustrates the orbit of the point Q under D4. Notice stabD4
(P) = {R0,D}, and
stabD4
(Q) = {R0}.
(a) Orbit of point P under action
of D4
(b) Orbit of point Q under action
of D4
Figure 22.2: The group D4 acting as a permutation group on the set of points enclosed by the square.
We can also view D4 as a group of permutations on the set of 4 line segments h, v,d,d
0
shown in Figure 22.3. Then
orbD4
(h) = {h, v} stabD4
(h) = {R0,R180,H,V}
orbD4
(v) = {h, v} stabD4
(v) = {R0,R180,H,V}
orbD4
(d) = {d,d
0} stabD4
(d) = {R0,R180,D,D
0}
orbD4
(d
0
) = {d,d
0} stabD4
(d
0
) = {R0,R180,D,D
0}268 Chapter 22. The Orbit-Stabilizer Theorem
Figure 22.3: Orbit classes of the group D4 acting as a permutation group on the set of line segments
h, v,d,d
0
.

Example 22.5 Let RC3 be the Rubik’s cube group, and let X be the set of all cubies of Rubik’s
cube. X can be partitioned into edge cubies E, corner cubies V, and centre cubies C. If x denotes
the u f edge cubie, then since it is possible to move it to the location of any other edge cubie,
then orbRC3
(x) = E. Also, since centre cubies don’t move under cube moves, the orbit of each
centre cubie is just a set of size 1. 
Example 22.6 Again, let RC3 be the Rubik’s cube group, but now let X be the set of all stickers
on Rubik’s cube. Recall |X| = 48. The Rubik’s cube group can be viewed as a group of
permutations of the set X (we have made use of this fact frequently already). Let x be the sticker
on the up layer of the u f cubie. In our numbering system we denoted this facet by x = 7. Since
an edge cubie can be moved to the location of any other edge cubie, and with either orientation,
then the orbit of x is every edge facet. Therefore, |orbRC3
(x)| = 24. The next theorem will tell
us that |stabRC3
(x)| =
|RC3|
24 . 
Looking back at the examples we can observe an obvious relationship between the sizes of
G, orbG(i), and stabG(i): we always get |orbG(i)|·|stabG(i)| equal to the size of G. This is true in
general and is stated in the following theorem.
Theorem 22.1.1 — Orbit-Stabilizer Theorem. Let G be a subgroup of SX . Then for any i in X,
|G| = |orbG(i)|·|stabG(i)|.
Proof: Since stabG(x) is a subgroup of G, we know from Lagrange’s Theorem that
|G|/|stabG(x)| = the number of distinct right cosets of stabG(x) in G.
So we need to show that the number of right cosets equals the number of elements in orbG(x). To
this end define
ψ : {(stabG(x))α | α ∈ G} → orbG(x)
by
ψ(stabG(x) α) = α(x).
Our goal is to show that ψ is a bijection.22.2 Permutations Acting on Sets: Application of the Orbit-Stabilizer Theorem 269
(a) ψ is well defined. We have
stabG(x) α = stabG(x) β =⇒ α = γβ for some γ ∈ stabG(x)
=⇒ α(x) = (γβ)(x) = β(γ(x))
=⇒ α(x) = β(x) since γ ∈ stabG(x).
(b) ψ is injective. Let α,β ∈ G, we have
ψ(stabG(x) α) = ψ(stabG(x) β) =⇒ α(x) = β(x)
=⇒ β
−1
(α(x)) = x
=⇒ (αβ −1
)(x) = x
=⇒ αβ −1 ∈ stabG(x)
=⇒ stabG(x) α = stabG(x) β.
The last implication follows from Lemma 18.1.2 (but expressed in terms of right cosets).
(c) ψ is surjective. Let y ∈ orbG(x). Then for some α ∈ G we have y = α(x). Therefore,
ψ(stabG(x) α) = α(x) = y,
and so ψ is surjective.
Therefore ψ is a bijection, and so it follows that
|orbG(x)| = |{(stabG(x))α | α ∈ G}|
= the number of right cosets of stabG(x) in G
= |G|/|stabG(x)|,
which implies
|G| = |orbG(i)|·|stabG(i)|.

We now consider a few applications of this theorem.
22.2 Permutations Acting on Sets: Application of the Orbit-Stabilizer Theorem
The orbit-stabilizer theorem (Theorem 22.1.1) is a counting theorem. It enables one to determine
the number of elements in a group. We will now see how this theorem will help us determine the
number of rotational symmetries of some familiar 3-dimensional objects.
For a object X we let GX be the group of all rotational symmetries of X. That is, the set of all
ways the object can be picked up, rotated, and placed back on a table in front of you, so that it looks
as though it wasn’t moved. For each of the objects below we will determine |GX |.
22.2.1 Rotation Group of a Tetrahedron
Let GT be the group of all rotational symmetries of a regular tetrahedron.
Let VT be the set of 4 vertices of the tetrahedron, labeled as in Figure 23.4b. Then each
rotation in GT induces a permutation on VT . That is, each element of GT gives a permutation
in SVT = S4. Vertex 1 can be taken to any other vertex by a rotation, so the orbit of vertex
1 is orbGT
(1) = {1,2,3,4}, and therefore |orbGT
(1)| = 4. The rotations in the stabilizer of 1270 Chapter 22. The Orbit-Stabilizer Theorem
(a) (b)
Figure 22.4: regular tetrahedron.
are: the identity, and two rotations corresponding to the permutations (2,3,4) and (2,4,3), so
|stabGT
(1)| = 3. Therefore, by the orbit-stabilizer theorem:
|GT | = |orbGT
(1)|·|stabGT
(1)| = 4 · 3 = 12.
The 12 rotations of GT are shown in Figure 22.5. Each rotation is described by the permutation
it induces on the vertices. It is clear from this description that GT ≈ A4.
22.2.2 Rotation Group of a Cube
Let GC be the group of all rotational symmetries of a cube.
We can view GC as a groups of permutations of the 8 corners, that is, as a subgroup of S8.
Observe that
orbGC
(1) = {1,2,3,4,5,6,7,8} ⇒ |orbGC
(1)| = 8
and that
stabGC
(1) = {ε,(2 4 5)(3 8 6),(2 5 4)(3 6 8)} ⇒ |stabGC
(1)| = 3.
The elements of the stabilizer are the rotations about an axis through vertices 1 and 7.
Therefore, by the orbit stabilizer theorem:
|GC| = |orbGC
(1)|·|stabGC
(1)| = 8 · 3 = 24.
Recall the symmetric group S4 has 24 elements. Perhaps GC is S4 in disguise. To see if it is we
should find 4 things in the cube that GC permutes. There are 4 diagonals as shown in Figure 22.7,
and each rotation of the cube permutes these diagonals. In fact, each rotation of the cube can be
described precisely by how these diagonals are permuted. Therefore GC ≈ S4.
22.2.3 Rotation Group of an Octahedron
Let GO be the group of all rotational symmetries of a regular octahedron.
We can view GO as a groups of permutations of the 6 vertices, that is as a subgroup of S6.
Observe that
orbGO
(1) = {1,2,3,4,5,6} ⇒ |orbGO
(1)| = 6
and that
stabGO
(1) = {ε,(2 3 4 5),(2 4)(3 5),(2 5 4 3)} ⇒ |stabGO
(1)| = 4.
The elements of the stabilizer are the rotations about an axis through vertices 1 and 6.
Therefore, by the orbit stabilizer theorem:
|GC| = |orbGO
(1)|·|stabGO
(1)| = 6 · 4 = 24.
It is no coincidence that this is the same size as the group of symmetries of the cube. Figure
22.9 shows the octahedron sitting inside the cube (join midpoints of every two squares by a line).
This means that GC ≈ GO. The cube and the octahedron are referred to as dual solids.22.2 Permutations Acting on Sets: Application of the Orbit-Stabilizer Theorem 271
(a) ε (b) (1 4)(2 3) (c) (1 3)(2 4)
(d) (1 2)(3 4) (e) (2 3 4) (f) (2 4 3)
(g) (1 4 3) (h) (1 3 4) (i) (1 2 4)
(j) (1 4 2) (k) (1 3 2) (l) (1 2 3)
Figure 22.5: All 12 rotational symmetries of a regular tetrahedron
22.2.4 Rotation Group of an Dodecahedron
Let GD be the group of all rotational symmetries of a regular dodecahedron.
We can view GD as a groups of permutations of the 20 vertices, that is as a subgroup of S20.
Observe that
orbGD
(1) = {1,2,3,...,20} ⇒ |orbGD
(1)| = 20
and that
|stabGD
(1)| = 3.
The elements of the stabilizer are the rotations about an axis through vertices 1 and 18.272 Chapter 22. The Orbit-Stabilizer Theorem
(a) (b)
Figure 22.6: cube.
Figure 22.7: Viewing GC as a group of permutations on the diagonals 1, 2, 3, 4.
(a) (b)
Figure 22.8: regular octahedron.
Figure 22.9: The octahedron is dual to the cube, so GO ≈ GC.
Therefore, by the orbit stabilizer theorem:
|GC| = |orbGD
(1)|·|stabGD
(1)| = 20 · 3 = 60.
22.2.5 Rotation Group of an Icosahedron
Let GI be the group of all rotational symmetries of a regular icosahedron.
We can view GI as a groups of permutations of the 12 vertices, that is as a subgroup of S20.22.2 Permutations Acting on Sets: Application of the Orbit-Stabilizer Theorem 273
(a) (b)
Figure 22.10: regular dodecahedron.
(a) (b)
Figure 22.11: regular icosahedron.
Observe that
orbGI
(1) = {1,2,3,...,12} ⇒ |orbGI
(1)| = 12
and that
|stabGI
(1)| = 5.
The elements of the stabilizer are the rotations about an axis through vertices 1 and 12.
Therefore, by the orbit stabilizer theorem:
|GC| = |orbGI
(1)|·|stabGI
(1)| = 20 · 3 = 60.
It is no coincidence that this is the same size as the group of symmetries of a regular dodecahe￾dron. Figure 22.12 shows both the dodecahedron sitting inside the icosahedron (join midpoints of
every two squares by a line), and the icosahedron sitting inside the dodecahedron. This means that
GI ≈ GD.
22.2.6 Rotation Group of Sports Balls
The balls used in soccer, basketball, volleyball, and baseball have distinct patterns on their surface.
We can use the orbit-stabilizer theorem to determine the rotational groups of symmetries of these
patterns.
For each ball, pick an object on the ball: either a point, or shape. Determine the size of the orbit
and stabilizer of the point/shape and verify the results in Table 22.1.
It will help if you have a physical ball in your hands. For the soccer ball, there are 12 pentagons
(the black faces), and 20 hexagons. See Figure 22.14 for an unfolded view of the soccer ball.274 Chapter 22. The Orbit-Stabilizer Theorem
Figure 22.12: The icosahedron is dual to the dodecahedron, so GI ≈ GD.
(a) soccer ball (b) basketball (c) volleyball (d) baseball
Figure 22.13: Familiar sports balls.
ball size of group of rotations
soccer ball 60
basketball 4
volleyball 12
baseball 4
Table 22.1: The size of the rotational group for various playing balls.
Figure 22.14: A soccer ball unfolded.
In case you are interested, the rotational group of the soccer ball is A5.22.2 Permutations Acting on Sets: Application of the Orbit-Stabilizer Theorem 275
In nature, the helix is the structure that occurs most often. The second most commonly found
structures are polyhedrons made from pentagons and hexagons, such as the dodecahedron and the
truncated icosahedron (soccer ball). Although it is impossible to enclose a space with hexagons
alone, adding 12 pentagons will be sufficient to enclose the space (like the soccer ball). Many
viruses have this kind of structure (Figure 22.15). 1
(a) rhinovirus (common cold) (b) Archaeal virus
Figure 22.15: Viruses.
1
John Galloway, Nature’s Second-Favourite Structure. New Scientist 114 (March 1988); 36-39276 Chapter 22. The Orbit-Stabilizer Theorem
22.3 Exercises
1. Let G be a group of permutations of the set X. For x ∈ X what type of object is orb(X)?
What type of object is stab(x)?
2. Prove the relation defined in (22.1) is an equivalence relation.
3. Let RC3 be the Rubik’s cube group and let H be the subgroup generated by the product
α = UR.
H = hURi.
Let X be the set of all cubies of the Rubik’s cube.
(a) If x denotes the u f r corner cubie, determine orbH(x).
(b) If y denotes the u f edge cubie, determine orbH(y).
(c) How many elements do stabH(x) and stabH(y) have?
4. Instead of considering the set of vertices of the tetrahedron, consider how GT permutes the 6
edges of the tetrahedron. By picking one edge, say the edge 12, the edge between vertices 1
and 2, verify that |orbGT
(12)|·|stabGT
(12)| = 12.
5. Consider how GT permutes the 4 triangular faces of the tetrahedron. That is, consider GT
as a subgroup of S4. By picking one face, say the face f1,2,3 containing vertices 1, 2 and 3,
verify that |orbGT
(f1,2,3)|·|stabGT
(f1,2,3)| = 12.
6. Instead of considering the set of vertices of the dodecadedron, consider how GD permutes the
30 edges of the dodecahedron. That is, consider GD as a subgroup of S30. By picking one edge,
say the edge 12, the edge between vertices 1 and 2, verify that |orbGD
(12)|·|stabGD
(12)| = 60.
7. Consider how GD permutes the 12 pentagonal faces of the dodecahedron. That is, consider
GD as a subgroup of S12. By picking one face, say the face f containing vertices 1,2,3,4,5,
verify that |orbGD
(f)|·|stabGD
(f)| = 60.
8. For each of the following objects, describe each element of the group of rotations as a single
rotation.
(Similar to what was done for the tetrahedron in Figure 22.5.)
(a) cube
(b) octahedron
9. Let G be the group of rotations of a rectangular box of dimensions 1×2×3. Describe each
element of G as a rotation.
10. Let G be the group of rotations of a rectangular box of dimensions 1×1×2. Describe each
element of G as a rotation.
11. The group D4 acts as a group of permutations of the points enclosed by the square shown
below. (The axis of symmetry are drawn for reference purposes.) For each square, locate the
points in the orbit of the indicated point P under the action of D4. In each case, determine
the stabilizer of P.
(a) (b) (c)
12. A soccer ball has 20 faces that are regular hexagons and 12 faces that are regular pentagons
(see Figures 22.13a and 22.14). Use the orbit stabilizer theorem to explain why a soccer22.3 Exercises 277
ball cannot have 60◦
rotational symmetry about a line through the centres of two opposite
hexagonal faces.
13. For each of the solids below, determine the number of rotational symmetries. (In the figures
each solid is also shown as “unfolded".)
(a) cuboctahedron
(b) (small) rhombicuboctahedron
(c) great rhombicuboctahedron or truncated cuboctahedron23. Burnside’s Theorem
In this lecture we continue our discussion of how to use group theory to count like a professional.
We look at an application permutation groups to count the number of different designs there are of
various objects.
23.1 A Motivating Example
Consider the task of colouring the six vertices of a regular hexagon so that there are three black and
three white vertices. Figure 23.1 shows an example of one such colouring.
Figure 23.1: An example of a colouring of the vertices of the hexagon: three white, three black.
Ceramic Tiles:
If such a colouring appears on a ceramic tile, it wouldn’t make sense to consider this different from
the colouring
since this one can be obtained by rotating the one in Figure 23.1 counterclockwise by 60◦
. In this
case, we should consider two colours equivalent if one can be obtained from the other by a rotation
of the hexagon. In other words, a manufacturer would only need to make the tile in Figure 23.1, and
simply by rotating the tile the following six colourings are equivalent under the group of rotations
of a hexagon.280 Chapter 23. Burnside’s Theorem
How many tiles would a manufacturer need to make in order to obtain all possible ways to
colour three vertices black and three white (up to rotational equivalence)?
There are ￾
6
3

= 20 ways to pick three vertices to colour black. As we observed above it would
be nonsensical for a manufacturer to produce each of the 20 designs, since up to rotation, the
colouring in Figure 23.1 is equivalent to six different designs.
Figure 23.2 shows all 20 possible colourings. They are organized into equivalence classes. For
example, all colouring in 23.2a are equivalent under the rotational group of the hexagon. Similarly
for the other three cases. This means, a manufacturer would only need to produce 4 different tiles,
say for example the first one in each collection of Figure 23.2.
(a)
(b)
(c)
(d)
Figure 23.2: All the different ways to colour three vertices of a hexagon black, and the other three white.
Beads on a Necklace:
On the other hand, if we think of these colourings as representing beads on a necklace, then
two colourings would be equivalent if one can be obtained from the other by an element of the
dihedral group of the hexagon. In other words, colourings can also be reflected to obtain equivalent
colourings. In this situation, the colourings in Figure 23.2b and 23.2c are equivalent. This means
there are essentially 3 different ways to make a necklace with three black beads and three white
ones (up to rotational/reflexive symmetries of the hexagon).
In general, we say that two designs (arrangements) A and B are equivalent under a group G of
permutations if there is an element α ∈ G such that α(A) = B. That is, two designs are equivalent
under G if they are in the same orbit of G. The set being permuted by G is the set of designs or
arrangements23.2 Burnside’s Theorem 281
Therefore the number of inequivalent configurations is the number of orbit classes under G.
In the next section we present a celebrated theorem which allows us to count the number of orbit
classes.
In the ceramic tile example, the 20 designs in Figure 23.2 have been split up into 4 orbit classes
((a)-(d)) under the group of rotations Z6 of the hexagon. In the necklace example, there are only 3
orbit classes under the dihedral group D6. Classes (b) and (c) merge to form one equivalence class
in this case.
23.2 Burnside’s Theorem
Let X be a nonempty set, and SX the set of all permutations of X:
SX = {α | α : X → X is a bijection}.
We first recall what we mean by the fixed set of a permutation in SX .
For a permutation α ∈ SX , the fixed set of α is the set of all elements in X that α doesn’t move.
We denote the set by fix(α).
fix(α) = {x ∈ X | α(x) = x}.
Note that
x ∈ fix(α) ⇐⇒ α ∈ stabSX
(x).
Theorem 23.2.1 — Burnside’s Theorem. a
If G is a finite group of permutations on a set X,
then the number of distinct orbits of G on X is
N =
1
|G| ∑
α∈G
|fix(α)|.
aThis theorem is also commonly called the Polya-Burnside Counting Theorem.
Proof: Let the orbits be
O1 = {a1,...,am}
O2 = {b1,...,bn}
.
.
.
ON = ...
Recall, the Oi’s partition X, so each element of X appears in one and only one orbit. For each
x ∈ X we apply the orbit-stabilizer theorem to get |orbG(x)| · |stabG(x)| = |G|, or equivalently
|stabG(x)| =
|G|
|O|
, where O = orbG(x). Therefore,
O1 : |stabG(a1)|+|stabG(a2)|+···+|stabG(am)| =
|G|
m
+···+
|G|
m | {z }
m terms
= |G|
O2 : |stabG(b1)|+|stabG(b2)|+···+|stabG(bn)| =
|G|
n
+···+
|G|
n
| {z }
n terms
= |G|
.
.
.282 Chapter 23. Burnside’s Theorem
Summing all these equations, we obtain
∑
x∈X
|stabG(x)| = |G|·N.
On the other hand,
x ∈ fix(α) ⇐⇒ α ∈ stabG(x),
so
∑
x∈X
|stabG(x)| = |{(α, x) | α ∈ G, x ∈ X,α(x) = x}|
= ∑
α∈G
|fix(α)|.
Therefore,
∑
α∈G
|fix(α)| = |G|·N
so that
N =
1
|G| ∑
α∈G
|fix(α)|.

23.3 Applications of Burnside’s Theorem
Example 23.1 Let’s return to the ceramic tile and necklace problems from Section 23.1 and
see how to apply Burnside’s theorem in this familiar context. It will be convenient to recall that
the dihedral group D6 consists of elements:
D6 = {ε,r,r
2
,r
3
,r
4
,r
5
, f,r f,r
2
f,r
3
f,r
4
f,r
5
f }
where r denotes a clockwise rotation through 60◦
and f is a reflection about a line through
opposite vertices. The group of rotational symmetries is
G = hri = {ε,r,r
2
,r
3
,r
4
,r
5
}.
In the case of counting hexagonal tiles with three black vertices and three white vertices, the
set of objects being permuted is the 20 possible designs, whereas the group of permutations is
G, the group of six rotational symmetries of a hexagon.
The identity fixes all 20 designs in Figure 23.2. Rotations through 60◦
, 180◦
, or 300◦ fix
none of the designs. That is, |fix(r)| = |fix(r
3
)| = |fix(r
5
)| = 0. Rotations through 120◦
and
240◦ fix the two designs in Figure 23.2d, so |fix(r
2
)| = |fix(r
4
)| = 2. We summarize these
results in Table 23.1.23.3 Applications of Burnside’s Theorem 283
element: α Number of arrangements fixed by
this type of element: |fix(α)|
ε 20
r 0
r
2 2
r
3 0
r
4 2
r
5 0
Table 23.1: |fix(α)| for each α ∈ hri < D6.
By Burnside’s Theorem, we have that
number of orbits = N =
1
|G| ∑
α∈G
|fix(α)|
=
1
6
(20+0+2+0+2+0)
=
24
6
= 4.
Now let’s use Burnside’s Theorem to count the number of necklace arrangements. In this
case we want to count the number of orbits under D6. Table 23.2 summarizes the sizes of the
fixed sets for each α ∈ D6.
type of element number of elements of this type Number of arrangements fixed by
this type of element
identity 1 20
rotation of order 2 (180◦
) 1 0
rotation of order 3 (120◦ or 240◦
) 2 2
rotation of order 6 (60◦ or 300◦
) 2 0
reflection across diagonal 3 4
reflection across bisector 3 0
Table 23.2: |fix(α)| for each type of α ∈ D6.
By Burnside’s Theorem, we have that
number of orbits = N =
1
|D6| ∑
α∈D6
|fix(α)|
=
1
12
(20+0+2 · 2+0+3 · 4+0)
=
36
12
= 3.

Example 23.2 Consider the number of ways to colour the faces of a regular tetrahedron with 4
different colours.284 Chapter 23. Burnside’s Theorem
How should we decide when two colourings of the tetrahedron are nonequivalent? Certainly,
if we were to pick up a tetrahedron coloured in a certain manner, rotate it, and put it back down,
we would think of the tetrahedron as being positioned differently rather than being coloured
differently. So our permutation group for this problem is just the group of 12 rotations of the
tetrahedron, which we denoted by GT (see Section 22.2.1). This group consists of the identity;
eight elements of order 3, each which fix one vertex; and three elements of order 2, each which
fix no vertices (but fix exactly two edges).
The total number of colourings, without regard to equivalence, is 4!. Therefore
fix(ε) = 4!
while, for any α ∈ GT , α 6= ε,
fix(α) = 0.
Table 23.3 summarizes the results.
type of element number of elements of this type Number of arrangements fixed by
this type of element
identity 1 4!
rotation of order 2 3 0
rotation of order 3 8 0
Table 23.3: |fix(α)| for various types of α ∈ GT .
By Burnside’s Theorem, we have that
number of orbits = N =
1
|GT | ∑
α∈GT
|fix(α)|
=
1
12
(4!+0+0+···0)
=
4!
12
= 2.
Representatives for the two orbit classes are shown in Figure 23.3.
(a) (b)
Figure 23.3: The two inequivalent colourings of the faces of a tetrahedron (tetrahedron is unfolded to
see all sides).

Example 23.3 Suppose that we have the colours red (R), green (G), and blue (B), and we wish
to colour the edges of a regular tetrahedron. First observe there are 3
6 = 729 colourings without
regard to equivalence. As with the previous example, we consider how the group of rotations of23.3 Applications of Burnside’s Theorem 285
the tetrahedron, GT acts on these colourings. Two colourings are equivalent if they are in the
same GT orbit. Every rotation permutes the 729 colourings, and to apply Burnside’s theorem
we must determine the size of fix(α) for each of the 12 rotations.
(a) (b)
Figure 23.4: regular tetrahedron, with vertices and edges labeled.
The identity fixes all 729 colourings:
|fix(ε)| = 729.
Now consider the rotation (2 3 4) or order 3. (Here we are describing a rotation by the
permutation it induces on the vertices.) Suppose that a specific colouring is fixed by this element
(that is, the tetrahedron appears to be coloured the same before and after this rotation). Since
(2,3,4) takes edge 12 to edge 13, edge 13 to 14, and edge 14 to edge 12, these three edges must
be coloured the same. The same argument shows that edges 23, 24 and 34 must be coloured
the same. Since there are three choices of colour for each of these two sets, there are 3
2 = 9
colourings of the tetrahedron in total that are fixed by the rotation (2 3 4). Table 23.4 lists the 9
different colourings. Therefore,
|fix((2,3,4))| = 9.
For each of the other 7 rotations of order 3 a similar argument shows the fixed set has size 9.
edge colours
colouring 12 13 14 23 24 34
scheme 1 R R R R R R
scheme 2 R R R G G G
scheme 3 R R R B B B
scheme 4 G G G G G G
scheme 5 G G G R R R
scheme 6 G G G B B B
scheme 7 B B B B B B
scheme 8 B B B R R R
scheme 9 B B B G G G
Table 23.4: Nine colourings fixed by (2 3 4).
Now consider the rotation (1 2)(3 4) of order 2. Since edges 12 and 34 are fixed they may
be coloured in any way and will appear the same after the rotation (1 2)(3 4) (since the rotation
fixes these edges). This gives 3 · 3 = 9 choices for these edges. Edges 14 and 23 are swapped286 Chapter 23. Burnside’s Theorem
by the rotation (1 2)(3 4) and so must be coloured the same. Similarly, edges 13 and 24 are
swapped and must be coloured the same. There are 3 choices to colour each of these sets, so
there are 9 ways to colour these two sets altogether. Therefore, there are 9 · 9 = 81 ways to
colour all the edges in such a way that the colouring remains fixed under the rotation (1,2)(3,4).
Table 23.5 lists the 81 different colourings. Therefore,
|fix((1 2)(3 4))| = 81.
For each of the other 2 rotations of order 2 a similar argument shows the fixed set has size
81.
edge colours
colouring 12 13 14 23 24 34
scheme 1 X Y R R R R
scheme 2 X Y R R G G
scheme 3 X Y R R B B
scheme 4 X Y G G G G
scheme 5 X Y G G R R
scheme 6 X Y G G B B
scheme 7 X Y B B B B
scheme 8 X Y B B R R
scheme 9 X Y B B G G
Table 23.5: Eighty-one colourings fixed by (1 2)(3 4). X and Y can be any of R, G, B.
The results are summarized in Table 23.6.
type of element number of elements of this type Number of arrangements fixed by
this type of element
identity 1 729
rotation of order 2 3 81
rotation of order 3 8 9
Table 23.6: |fix(α)| for various types of α ∈ GT .
By Burnside’s Theorem, we have that
number of orbits = N =
1
|GT | ∑
α∈GT
|fix(α)|
=
1
12
(729+3(81) +8(9))
=
1044
12
= 87.
It would be a difficult task to solve this problem without Burnside’s Theorem. 
At this point you may be wondering who besides mathematicians would be interested in
counting problems such as these. Chemists for one, are interested in these types of counting
problems. Though, their interests lie more in counting configurations of molecules. We’ll now look23.3 Applications of Burnside’s Theorem 287
at an example.
Example 23.4 Benzene is a chemical compound, each molecule of which is made up of six
carbon (C) atoms, and six hydrogen (H) atoms. The carbon atoms are arranged in a hexagon
with alternating single and double bonds. Each carbon atom must have four bonds and each
hydrogen atom must have one bond. See Figure 23.5.
Figure 23.5: A benzene molecule.
By replacing three of the hydrogen atoms by CH3 clusters (see Figure 23.6) we can create a
chemical derivative from benzene. Let’s determine the number of such derivatives.
Figure 23.6: An example of how a hydrogen atom is replaced with a CH3 cluster.
Taking into account orientation, the number of possibilities would just be the number of
ways of choosing three hydrogen atoms for replacement from six possibilities, in other words
￾
6
3

= 20. However, those that are related by rotational/reflective symmetry clearly correspond
to the same derivative chemical. So we wish to determine the number of derivatives up to
equivalence under the symmetries of the molecule.
Let r denote the rotation in the clockwise direction through an angle of 120◦
, and let f
be a reflection about the “x−axis". The group of symmetries of the molecule (respecting the
single/double bonds) is:
G = {ε,r,r
2
, f,r f,r
2
f }.
A reflection (f , r f , or r
2
f) swaps pairs of vertices so it would not fix any molecule. An order
3 rotation would fix a molecule if all clusters lie on the same side of a double bond. There are
two such molecules. Table 23.7 summarizes the number of arrangements, where three hydrogen
atoms are replaced by CH4 clusters, which are fixed by each element of G288 Chapter 23. Burnside’s Theorem
type of element number of elements of this type Number of arrangements fixed by
this type of element
identity 1 20
reflection of order 2: f,r f,r
2
f , 3 0
rotation of order 3: r,r
2 2 2
Table 23.7: |fix(α)| for various types of α ∈ G.
By Burnside’s Theorem, we have that
number of orbits = N =
1
|G| ∑
α∈G
|fix(α)|
=
1
6
(20+3(0) +2(2))
=
24
6
= 4.
Therefore, there are 4 such derivatives. You should try listing them. 
Another kind of molecule that chemists consider is visualized as a regular tetrahedron with
a carbon atom at the centre and any of the four radicals HOCH2 (hydroxymethyl), C2H2 (ethyl),
Cl (chlorine) or H (hydrogen) at the four vertices. The number of such molecules can be easily
counted using Burnside’s Theorem.
23.4 Exercises
1. Define the functions fix, mov, stab and orb.
2. Determine the number of different ways there are of arranging 6 keys on a key ring.
3. Determine the number of ways of colouring the vertices of a square so that two are red and
two are green.
4. Determine the number of ways there are to colour the vertices of a pentagon under each of
the following conditions:
(a) using five distinct colours;
(b) using colours black and white, so that two are black and three are white;
(c) using colours black, white and blue, so that two are black, two are white, and one is
blue.
5. Determine the number of ways of colouring a regular n-gon with n different colours.
6. Determine the number of ways of seating n diplomats around a table.
7. Determine the number of (inequivalent) ways to colour the 6 faces of a cube with 6 distinct
colours. Consider two colourings equivalent if one can be obtained from the other by a
rotation of the cube.
8. Determine the number of (inequivalent) ways to colour the 6 faces of the cube so that three
faces are white and three faces are black. Consider two colourings equivalent if one can be
obtained from the other by a rotation of the cube.
9. Determine the number of (inequivalent) ways to colour the 6 faces of the cube so that two
faces are white and four faces are black. Consider two colourings equivalent if one can be
obtained from the other by a rotation of the cube.23.4 Exercises 289
10. How many ways are there of colouring the faces of a cube with colours red and blue? Each
face is to be coloured all red or all blue.
11. Determine the number of (inequivalent) ways to colour the 12 edges of the cube so that six
edges are white and six edges are black. Consider two colourings equivalent if one can be
obtained from the other by a rotation of the cube.
12. Determine the number of (inequivalent) ways to colour the 12 pentagonal faces of a regular
dodecahedron with 12 distinct colours. Consider two colourings equivalent if one can be
obtained from the other by a rotation of the dodecahedron.
13. Determine the number of (inequivalent) ways to colour the 12 pentagonal faces of a regular
dodecahedron so that 6 faces are white and 6 faces are black. Consider two colourings
equivalent if one can be obtained from the other by a rotation of the dodecahedron.
14. Determine the number of (inequivalent) ways to colour the 20 triangular faces of a regular
icosahedron with 20 different colours. Consider two colourings equivalent if one can be
obtained from the other by a rotation of the icosahedron.
15. A benzene molecule can be viewed as six carbon atoms arranged in a regular hexagon. See
Figure 23.7 (ignore double vs. single bonds). At each carbon atom, one of three radicals
(NH2, COOH, or OH) can be attached. How many such compounds are possible?
Figure 23.7: Diagram for Exercise 15.VI
24 Lights Out . . . . . . . . . . . . . . . . . . . . . . . . . . 293
24.1 Lights Out
24.2 Lights Out: A Matrix Model
24.3 Summary of 5×5 lights out puzzle
24.4 Eigenvalues and Eigenvectors
24.5 Other sized game boards
24.6 Light-Chasing Strategy
24.7 Exercises
Part Six: Light’s Out24. Lights Out
In this lecture we apply linear algebra to solve an electronic puzzle called Lights Out. This puzzle
is not a permutation puzzle, and this lecture is unrelated to all other lectures in this book, so you
can read this chapter at any time.
The reason this puzzle is included in this book is because we can view Lights Out through
a mathematical lens (linear algebra) and obtain a full understanding of the puzzle. We therefore
use this chapter as a template for our approach to puzzle solving - model the puzzle using a
mathematical theory, then use the theory to inform us about the puzzle. The reader is assumed to
have taken a course in linear algebra, so we don’t develop this theory here, we just apply it. This is
in contrast to the rest of this book where we assumed the reader had no exposure to group theory
and this book had to serve two purposes: (i) an introduction to group theory, (ii) an illustration of
how to apply group theory to understand permutation puzzles.
24.1 Lights Out
Lights Out consists of a 5-by-5 grid of lights; when the game starts, a set of these lights (random,
or one of a set of stored puzzle patterns) are switched on. Pressing one of the lights will toggle it,
and the four lights adjacent to it, on and off. (Diagonal neighbours are not affected.) The game
provides a puzzle: given some initial configuration where some lights are on and some are off, the
goal is to switch all the lights off, preferably in as few button presses as possible. See Figure 24.1
for sample game play.
Two physical versions of the game are shown in Figure 24.2. The first one is the original game,
each button has two states: on or off. The second one, called Lights Out 2000, has a further option
of allowing 3 states for each button: red, green and off.
Variations of Lights Out:
Lights Out is another puzzle that has been updated for the digital era. Many variations of this puzzle
exist now in software form. Variations include: more states for the lights (i.e. more colours for the294 Chapter 24. Lights Out
Figure 24.1: A demonstration of Lights Out play.
(a) Lights Out (b) Lights Out 2000
Figure 24.2: Lights Out electronic games released by Tiger Toys
lights to cycle through), changing size of game boards, modifying how a button press changes the
state of the lights. For example, we could make it so pressing a button changes the state of all lights
in the same row and column as the button that was pressed.
Software:
You can play the puzzle here: http://www.sfu.ca/∼jtmulhol/math302/puzzles-lo.html.
24.2 Lights Out: A Matrix Model
A complete strategy for the game can be obtained using linear algebra, requiring only knowledge
of Gauss-Jordan elimination and some facts about the column and null space of a matrix.
We will represent the state of each light by an element of F2 = {0,1}; 1 for on, 0 for off. We
can represent a lit button configuration by a 5×5 matrix A with entries from F2, i.e. A ∈ M5×5(F2)
where the (i, j)
th entry is 1 if the button in position (i, j) is on, or 0 if the button is off. See Figure
24.3. We call this matrix the lit button configuration matrix. Here,
M5×5(F2) =








b1,1 b1,2 ... b1,5
b2,1 b2,2 ... b2,5
.
.
.
.
.
. ...
.
.
.
b5,1 b5,2 ... b5,5





| bi, j ∈ F2,1 ≤ i, j ≤ 5



.
If a button is pressed the states of the lights around the button are toggled. For the standard
lights out puzzle it is the button itself, and its vertical and horizontal neighbours that are toggled.
For each button (i, j) we define a toggle matrix Ti, j where the entry is 1 if the button in that location
changes state, or 0 if it doesn’t. For example, see Figure 24.4.
The sample game play shown in Figure 24.1 can be translated into a matrix equation using
configuration and toggle matrices as follows.24.2 Lights Out: A Matrix Model 295
(a) sample lit button
configuration
(b) corresponding
configuration matrix in
M5×5(F2)
Figure 24.3: Matrix corresponding to a lit button configuration
(a) pressing button (1,1) (b) corresponding toggle matrix T1,1
(c) pressing button (3,4) (d) corresponding toggle matrix T3,4
(e) pressing button (5,3) (f) corresponding toggle matrix T5,3
Figure 24.4: Some examples of the toggle matrix corresponding to pressing a button.
Let B be the initial configuration matrix:
B =


0 0 0 0 0
0 0 0 0 0
0 0 0 1 0
0 0 1 1 0
0 0 0 0 1


.
Then the game play corresponds to
B+T4,4 +T5,5 = 0,
where 0 denotes the zero matrix, and addition of matrices is done in the usual way – componentwise –
but here entries are added modulo 2. Recall, modulo 2 arithmetic means 0+0 = 0, 0+1 = 1+0 = 1,
1+1 = 0. Since a matrix in M5×5(F2) added to itself is 0 (Why?) then adding B to both sides of296 Chapter 24. Lights Out
the previous equation gives
T4,4 +T5,5 = B.
In other words, to solve the puzzle we just have to determine how to write B as a linear combination
of the toggle matrices.
Moreover, since for any matrices A,C ∈ M5×5(F2) we have A+C = C +A and A+A = 0 then
we can now easily see why (i) order in which buttons are pressed doesn’t matter, and (ii) no button
needs to be pressed more than once.
In general, given any lit button configuration B = [bi, j
], solving the puzzle is equivalent to
solving the matrix equation:
∑
1 ≤ i ≤ 5
1 ≤ j ≤ 5
xi, jTi, j = B (24.1)
for the 25 coefficients xi, j ∈ {0,1}. The coefficients xi, j
tell use exactly what buttons we need
to press. We call X = [xi, j
] the strategy matrix. We will sometimes write it as a vector x =
(x1,1, x1,2, x1,3,..., x4,5, x5,5) and call it the strategy vector. In general, we can turn any matrix into
a vector by listing the entries in order from left-to-right, then top to bottom.
Matrix equation (24.1) corresponds to a system of 5 · 5 = 25 linear equations (one for each
component of the matrix equation).
For example, the linear equation corresponding to entry (1,1) in matrix equation (24.1) is
x1,1 +x1,2 +x2,1 = b1,1,
since the only toggle matrices with 1 in position (1,1) are T1,1,T1,2, and T2,1. Similarly, the linear
equation corresponding to entry (3,4) in matrix equation (24.1) is
x2,4 +x3,3 +x3,4 +x3,5 +x4,4 = b3,4.
Writing b = (b1,1,b1,2,b1,3,...,b4,5,b5,5) for the vector corresponding to the configuration
matrix B, it is straightforward to check that this big system (Equation (24.1)) can be written as a
matrix product
Ax = b (24.2)
where A is the 25 × 25 matrix whose columns are the toggle vectors ti, j (which are the toggle
matrices Ti, j written as vectors):
A = [t1,1 | t1,2 | ··· | t5,5].
We can write A as
A =


C I5 0 0 0
I5 C I5 0 0
0 I5 C I5 0
0 0 I5 C I5
0 0 0 I5 C


(lights out matrix) (24.3)
where C represents the 5×5 matrix
C =


1 1 0 0 0
1 1 1 0 0
0 1 1 1 0
0 0 1 1 1
0 0 0 1 1


,24.2 Lights Out: A Matrix Model 297
and I5 denotes the 5×5 identity matrix. The matrix A is referred to as the lights out matrix.
Therefore, solving the puzzle for a general configuration b is equivalent to solving the 25×25
linear system 24.2 for a strategy vector x (where all arithmetic is done modulo 2).
We would like to determine the answers to the following questions.
(a) Will the standard algorithm using Gauss-Jordan elimination work to solve this system? Recall,
this method works if entries are real numbers under regular addition/multiplication. But here
we are working over a different number system: F2 = {0,1} under addition/multiplication
modulo 2.
(b) Must there be a solution for every configuration b?
(c) If not, what is the probability a random configuration b is solvable?
(d) When there is a solution for b, is it unique? If not, can we find the smallest solution (i.e.
giving the least number of button presses)?
24.2.1 Imagine you are in a field...
The algorithm learned in linear algebra for solving linear systems of the form Ax = b is known as
Gauss-Jordan elimination (or simply as Gaussian elimination). The steps of the algorithm are as
follows:
(a) Form the augmented matrix [A|b].
(b) Reduce the augmented matrix to reduced row echelon form by using elementary row opera￾tions:
• (swap) Swap any two rows.
• (scalar multiply) Multiply any row by a non-zero number.
• (replacement) Replace any row with a multiple of another row added to the row itself.
(c) Read off the solution (or conclude there isn’t a solution) directly from the reduced row
echelon form.
In linear algebra we only considered the real numbers R under addition/multiplication. If you
were lucky you saw that the same thing could be done with complex numbers C. We’d like to know,
does all the theory developed in linear algebra carry over to more abstract sets of “numbers" under
some sort of “addition" and “multiplication"? In particular what about the situation we are in with
the lights out puzzle. Here our number system is
F2 = {0,1}
and the addition and multiplication tables are defined as follows.
+ 0 1
0 0 1
1 1 0
* 0 1
0 0 0
1 0 1
Does Gauss-Jordan elimination still work?
Let’s consider a set F of objects which is closed under two operations + and ∗. What properties
would (F,+,∗) need to satisfy in order for Gauss-Jordan elimination to still possibly work?
First note the key to having this algorithm work is that the elementary row operations must
be reversible. Clearly a row swap is reversible, just swap the rows back. Multiplying a row by a
nonzero element a is reversible only if the element has a multiplicative inverse in F (a b ∈ F such
that ab = 1). Another key part to the algorithm is that we could use additive inverses to make entries
of the matrix 0. This means we want our set of numbers F to satisfy the following 9 properties,
known as the field axioms.298 Chapter 24. Lights Out
Definition 24.2.1 A set F with two operations + and ∗ satisfying the following properties for
every a,b, c ∈ F is called a field.
(a) Addition is commutative, a+b = b+a.
(b) Addition is associative, a+ (b+c) = (a+b) +c.
(c) There is a unique element 0 (zero) in F such that a+0 = a.
(d) For each a ∈ F there is a unique element −a ∈ F such that a+ (−a) = 0.
(e) Multiplication is commutative, ab = ba.
(f) Multiplication is associative, a(bc) = (ab)c.
(g) There is a unique element 1 (one) in F such that a1 = a
(h) For each non-zero a ∈ F there is a unique element a
−1 ∈ F such that aa−1 = 1.
(i) Multiplication distributes over addition, a(b+c) = ab+ac and (b+c)a = ba+ca.
So Gauss-Jordan elimination still works if our set of numbers F is a field. In our terminology of
Chapter 10 properties (a)-(d) mean that F is an abelian group under +, and properties (e)-(h) mean
that F
∗ = F − {0} is an abelian group under ∗ (see Definition 10.1.1 for the definition of a group).
It turns out these were the only properties of (R,+,∗) we used in linear algebra. Therefore,
everything done in linear algebra holds true for matrices whose entries come from any field F.
Since F2 is a field with two elements then Gauss-Jordan elimination will work to solve the
linear system. Moreover, any result we want to use from linear algebra will carry over to this new
setting where our “numbers" come from F2.
24.2.2 Solving linear systems with SageMath.
In a first course in linear algebra you were typically asked to solve linear systems by-hand. This
was to allow you to understand the details of the Gauss-Jordan elimination algorithm. In practice,
people don’t generally solve systems of equations by hand, these are generally done by computer.
We’ll now see how to use SageMath to solve linear systems.
To solve a linear system Ax = b in SageMath, we must first define the matrix A, for example
matrix(ZZ,[[1,2],[3,4],[5,6])defines the matrix


1 2
3 4
5 6

, over the integers Z. Here
we defined each row. We can give SageMath a list and tell it how many rows, then have it split the
list into a matrix as follows:
matrix(QQ, 2, [1,2,3,4,5,6]) defines the matrix 
1 2 3
4 5 6 
, over the rationals Q,
Here is an example using SageMath to solve the system

1 0 2
3 2 5 
x =

3
0

.
As we can see from the output of SageMath the solution is


3
−9/2
0

.
In [1]: M= matrix (QQ ,[[1 ,0 ,2] ,[3 ,2 ,5]])
b= vector (QQ ,[3 ,0])
M. solve_right (b) # command for solving Mx = b
(i.e. x is right of M)
Out[1]: (3 , -9/2 , 0)24.2 Lights Out: A Matrix Model 299
The command for solving a linear system Ax = b is A.solve_right(b).
1
Coming back to the lights out puzzle, we first need to construct the lights out matrix A defined
in (24.3). We could do it one entry at a time, which would involve entering 25 · 25 = 625 numbers.
This wouldn’t be fun, and if we want to consider larger game boards than 5×5 we would have a
lot more typing to do. Instead, we use two loops to define A, and we do this for a general n×n
board. Keep in mind, we have to tell SageMath we are working over the field of integers modulo 2,
F2. SageMath knows this field by the name GF(2), which stands for Galois Field of size 2.
In [2]: # Definition of the matrix for Lights Out
# input = integer n ( where lights out board is nxn )
# output = lights out matrix A which is nxn
def lights_out (n):
A = identity_matrix (GF (2) ,n*n) # initialize A with ones along diagonal
for i in range (n):
for j in range (n):
m = n*i+j
if i > 0 : A[(m,m-n)] = 1 #I block below diagonal
if i < n -1 : A[(m,m+n)] = 1 #I block above diagonal
if j > 0 : A[(m,m -1)] = 1 #C block below diagonal
if j < n -1 : A[(m,m +1)] = 1 #C block above diagonal
return A
For example the lights out matrix for the 3×3 game board is
In [3]: lights_out (3)
Out[3]: [1 1 0 1 0 0 0 0 0]
[1 1 1 0 1 0 0 0 0]
[0 1 1 0 0 1 0 0 0]
[1 0 0 1 1 0 1 0 0]
[0 1 0 1 1 1 0 1 0]
[0 0 1 0 1 1 0 0 1]
[0 0 0 1 0 0 1 1 0]
[0 0 0 0 1 0 1 1 1]
[0 0 0 0 0 1 0 1 1]
Asking for the lights out matrix for the 5×5 game returns confirmation it is stored in memory,
but SageMath saves us from having to look at it.
In [4]: lights_out (5)
Out[4]: 25 x 25 dense matrix over Finite Field of size 2
Now that A is loaded into SageMath let’s solve some configurations.
Example 24.1 Solve the following configuration:
1 Using the word “left" would be the command to solve xA = b, but in this case x and b would be row vectors, not
column vectors.300 Chapter 24. Lights Out
The configuration matrix is B =


1 1 0 0 1
1 1 1 0 0
1 0 0 0 1
0 0 1 1 1
1 0 0 1 1


which we can express as a vector
b = (1,1,0,0,1, 1,1,1,0,0, 1,0,0,0,1, 0,0,1,1,1, 1,0,0,1,1).
(Spaces are inserted after each group of 5 entries in b so it is easier to read. ) Now we have
SageMath solve Ax = b.
In [5]: # current game configuration (i.e. buttons that are lit )
b= vector (GF (2) ,[1 ,1 ,0 ,0 ,1 , 1 ,1 ,1 ,0 ,0 , 1 ,0 ,0 ,0 ,1 , 0 ,0 ,1 ,1 ,1 , 1 ,0 ,0 ,1 ,1]);
# solving the game
x= lights_out (5). solve_right (b);
#now put the solution x in a nice matrix form so we can see
# what buttons to press
button_press_matrix = matrix (GF (2) ,5 ,5 ,x. list ()) # convert x to matrix
button_press_matrix
Out[5]: [0 0 1 0 0]
[1 0 1 1 1]
[0 1 0 1 0]
[1 1 1 0 1]
[0 0 1 0 0]
Therefore, to solve the puzzle we just need to press the 12 buttons shown in the diagram
below.

Rather than have to type out the previous lines of code every time we want to solve a configura￾tion we could build a solve function as follows:
Lights-Out Solve function: (basic version)
In [6]: # Definition of the solution function for Lights Out
# input = integer n ( where lights out board is nxn ), and b the
# configuration vector
# output = a matrix X indicating which buttons to press for solution
def lights_out_solver (n,b):
x= lights_out (n). solve_right (b);
button_press_matrix = matrix (GF (2) ,n,n,x. list ())
return button_press_matrix
For our previous example we could just type:
In [7]: b= vector (GF (2) ,[1 ,1 ,0 ,0 ,1 , 1 ,1 ,1 ,0 ,0 , 1 ,0 ,0 ,0 ,1 , 0 ,0 ,1 ,1 ,1 , 1 ,0 ,0 ,1 ,1]);
lights_out_solver (5 ,b)24.2 Lights Out: A Matrix Model 301
Out[7]: [0 0 1 0 0]
[1 0 1 1 1]
[0 1 0 1 0]
[1 1 1 0 1]
[0 0 1 0 0]
24.2.3 Solvable Configurations
A lit button configuration b is solvable if the corresponding linear system Ax = b has a solution.
From linear algebra we know
Ax = b is solvable for every b ⇐⇒ A is invertible ⇐⇒ det(A) 6= 0.
The lights out matrix (for 5 × 5 game) has determinant 0. Therefore, there do exist unsolvable
configurations b.
In [8]: lights_out (5). determinant ()
Out[8]: 0
For example, the configuration in Figure 24.5 is unsolvable.
Figure 24.5: An unsolvable configuration of lights.
In [9]: b= vector (GF (2) ,[1 ,0 ,1 ,0 ,1 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0 , 0 ,0 ,0 ,0 ,0]);
lights_out_solver (5 ,b)
Out[9]: Traceback ( click to the left of this block for traceback )
...
ValueError : matrix equation has no solutions
Recall that Ax = b has a solution only when b is in the column space of A, denoted col(A). This
is just a fancy way of saying
∑
1≤i, j≤5
xi, j
ti, j = b
for some xi, j
, where ti, j are the toggle vectors, as we already know. However, phrased in this way
we see that the set of solvable configurations is col(A) = span(t1,1,t1,2,...,t5,5), and the dimension
of col(A) is called the rank of A, denoted rank(A).
In [10]: lights_out (5). rank ()
Out[10]: 23
Therefore only 23 buttons are required to solve any configuration, and if each one can either be
pressed or not, then there are 2
23 solvable configurations, out of a possible 2
25 configurations. This
proves the following theorem.302 Chapter 24. Lights Out
Theorem 24.2.1 For the 5×5 lights out puzzle, the probability that a random configuration is
solvable is 1/4.
Quiet Patterns:
There exist sequences of button presses that will leave the lights unchanged. These are known
as quiet patterns. Such a sequence x is a solution to the homogeneous equation Ax = 0. That
is, x is in the null space of A, denoted by nul(A). The dimension of this space is nullity(A) =
25−rank(A) = 25−23 = 2. If we let d1 and d2 be a basis for nul(A) then
nul(A) = span(d1,d2) = {r1d1 +r2d2 | r1,r2 ∈ F2}
= {0,d1,d2,d1 +d2}.
Therefore, there are only 4 such button sequences (vectors).
We can use SageMath to find these vectors. The command for computing the null space is
.right_kernel().
In [11]: lights_out (5). right_kernel ()
Out[11]: Vector space of degree 25 and dimension 2 over Finite Field of size 2
Basis matrix :
[1 0 1 0 1 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 1 0 1 0 1]
[0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0]
SageMath returns a basis for the null space. The span of these vectors (using coefficients from
F2 = {0,1}) gives us the complete null space. These correspond to the button presses shown in
Figure 24.6.
(a) 0 (b) d1 (c) d2 (d) d1 +d2
Figure 24.6: The 4 Quiet Patterns: These are the button press sequences in the null space of A. Starting
with all the lights out and pressing the buttons indicated in any of these four patterns will result in all the
lights being out again.
24.2.4 Optimal solution to Lights Out
Let b be a (solvable) configuration of the lights. If x is a strategy vector (i.e. a solution to Ax = b)
then the set of all solution strategies is: 2
b+null(A) = {b, b+d1, b+d2, b+d1 +d2}.
The optimal solution will be the one with the fewest number of 1’s as entries.
Let’s go back to Example 24.1 and see if we can find an optimal solution. The one we found
requires 12 button presses, perhaps we can do better.
2For a set A and element x the notation x+A represents the set obtained by adding x to every element of the set A.
That is, x+A = {x+a | a ∈ A}.24.3 Summary of 5×5 lights out puzzle 303
It will be convenient to have SageMath count the number of occurrences of 1 in a strategy
vector. We will define a function called number_of_presses to do this.
In [12]: def number_of_presses (x):
counter =0; # initialize counter , which is our variable to count 1 ’s
for i in range (0 ,25): # recall Python indexes lists from 0 , not 1
if x[i ]==1: counter = counter +1 # increment counter if entry is 1
return counter
Now let’s find all 4 solutions to Example 24.1.
In [13]: b = vector (GF (2) ,[1 ,1 ,0 ,0 ,1 , 1 ,1 ,1 ,0 ,0 , 1 ,0 ,0 ,0 ,1 , 0 ,0 ,1 ,1 ,1 , 1 ,0 ,0 ,1 ,1]);
x = lights_out (5). solve_right (b) # one solution
nulsp = lights_out (5). right_kernel ()
for d in nulsp :
print x+d, number_of_presses (x+d)
(0 ,0 ,1 ,0 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,1 ,0 ,0) 12
(1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1) 8
(0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0) 8
(1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1) 20
There are two optimal solutions, each requiring 8 button presses. Therefore, an optimal solution
to the configuration in Figure 24.7a is the strategy matrix in Figure 24.7b.
(a) Configuration of
lights
(b) optimal strategy matrix (c) optimal solution
Figure 24.7: An optimal solution requiring 8 button presses.
24.3 Summary of 5×5 lights out puzzle
Solving a configuration b of the lights out puzzle is equivalent to solving the linear system Ax = b
for strategy vector x where A is a 25×25 lights out matrix. All arithmetic is done in the finite field
of size 2: F2 = {0,1}.
• The dimension of space of solvable configurations is rank(A) = 23,
the number of solvable configurations is 2rank(A) = 2
23
.
• The probability that a random configuration is solvable is 223/2
25 = 1/4,
• The dimension of space quiet patterns (nul(A)) is nullity(A) = 5
2 −rank(A) = 2,
the number of quiet patterns is |nul(A)| = |F2|
nullity(A) = 2
2 = 4.
• For a given strategy vector x the 4 equivalent vectors are the elements of x+nul(A).
Putting all the previous ideas into one code block, we can write a lights out solver which returns
the optimal solution.304 Chapter 24. Lights Out
Lights-Out Solve function: (optimal version)
In [14]: # Function : number_of_presses
# input = a vector x of dimension 25 with 0 ,1 entries
# output = the number of times 1 appears as an entry
def number_of_presses (x):
counter =0;
for i in range (0 ,25):
if x[i ]==1: counter = counter +1
return counter
# Function : optimal_solution
# input = a strategy vector x
# output = a strategy vector which uses least number of button presses
def optimal_solution (x):
op_button_presses =x # initialize variable to store optimal solution
n= number_of_presses (x) # initial variable to store optimal presses
nul = lights_out (5). right_kernel ()
for d in nul:
if number_of_presses (x+d) <n:
op_button_presses =x+d # update variable
n= number_of_presses (x+d) # update variable
return op_button_presses
# Function : lights_out_solver
# input = b the configuration vector of lights on 5-by -5 game
# output = an optimal strategy matrix which solves the puzzle
def lights_out_solver (b):
x= lights_out (5). solve_right (b); # one solution
x= optimal_solution (x) # exchanges x for an optimal solution
button_press_matrix = matrix (GF (2) ,5 ,5 ,x. list ()) # convert to matrix
return button_press_matrix
As an example, to solve the configuration in Figure 24.8a we proceed as follows.
In [15]: b= vector (GF (2) ,[0 ,1 ,0 ,0 ,0 , 1 ,1 ,0 ,1 ,1 , 1 ,1 ,1 ,1 ,0 , 1 ,1 ,1 ,1 ,1 , 1 ,0 ,1 ,0 ,1])
lights_out_solver (b)
Out[15]: [0 0 0 0 1]
[0 1 0 1 1]
[0 0 0 1 0]
[1 0 0 1 0]
[0 0 0 1 0]
(a) Configuration of
lights
(b) an optimal solution
Figure 24.8: An optimal solution requiring 8 button presses.24.4 Eigenvalues and Eigenvectors 305
24.4 Eigenvalues and Eigenvectors
Here we discuss how the lights out puzzle gives an example of how to visualize eigenvalues and
eigenvectors, which is a topic covered in a first course in linear algebra.
Recall that x is an eigenvector of A if x 6= 0 and
Ax = λx
for some scalar λ. The scalar λ is called the corresponding eigenvalue. In our case we only have
two scalars: 0 and 1, so either (i) Ax = 0 or (ii) Ax = x. We already considered Ax = 0 (which
corresponds to the null space, and what we called the quiet patterns). So let’s consider Ax = x, the
space of eigenvectors corresponding to eigenvalue 1.
A solution to Ax = x would be a pattern such that if, starting with all the lights off, then pressing
the buttons corresponding to the solutions, exactly the pressed lights will end up being on. For an
example see Figure 24.9.
(a) Button presses cor￾responding to an eigen￾value
(b) Light configuration
after pressing buttons in
24.9a
Figure 24.9: An example of an eigenvector for the lights out matrix.
How many of these patterns are there? That is, how many eigenvectors are there which
correspond to the eigenvalue 1? The solutions to Ax = x are precisely the solutions to (A−I)x = 0,
where I is the 25×25 identity matrix. So the answers lies with the null space of A−I. From the
calculation below we see the dimension of the null space of A−I is 5.
In [16]: # 25 x25 identity matrix
I25 = MatrixSpace (GF (2) ,25 ,25). identity_matrix ()
A= lights_out (5)
(A-I25 ). nullity ()
Out[16]: 5
Therefore, there are 5 linearly independent eigenvectors (with λ = 1) which form a basis for
nul(A−I). Any linear combination of these five vectors, with coefficients 0 or 1, is an eigenvector.
This gives 25 possibilities (including 0 which is not a eigenvector but does solve Ax = x).
In Exercise 4 you are asked to find 5 vectors which form a basis for the eigenspace corresponding
to λ = 1.
24.5 Other sized game boards
Lights Out has be modified and generalized in many ways: bigger games boards, different toggle
conditions, more states (colours) for the lights to cycle through.
Here we mention briefly some results about larger games boards. We assume the toggling
condition is the same as for the 5×5 game board. Let An be the lights out matrix for the n×n
game board. The key to understanding solvability lies in knowing the whether the n
2 −rank(An) is306 Chapter 24. Lights Out
0 or not. If it is 0 then An has full rank, and so it’s columns are linearly independent, therefore An is
invertible. This means every configuration is solvable and has a unique solution in which no button
is pressed more than once. If it is non-zero then rank(An) < n
2
so An is not invertible, therefore
there exist configuration which are not solvable. Moreover, the number of different solutions for a
given configuration (if the configuration is solvable) is 2nullity(An) = 2
n
2−rank(An)
.
Table 24.1 lists the values of n
2 −rank(An) for 3 ≤ n ≤ 10.
n rank(An) nullity(An) = n
2 −rank(An)
3 9 0
4 12 4
5 23 2
6 36 0
7 49 0
8 64 0
9 73 8
10 100 0
Table 24.1: nullity(An) and rank(An) for various boards sizes of lights out.
24.6 Light-Chasing Strategy
There is a strategy for solving the 5×5 lights out puzzle which, though not optimal, will allow you
to solve the puzzle without having to solve a linear system. The technique is known as light-chasing.
Begin with the top row and press the button beneath any lit button in the top row. This will turn out
all lights in the top row. Apply this strategy row by row until you reach the bottom row.
The lights in the bottom row will be one of the 7 configurations shown in Table 24.2, press the
corresponding buttons in the top row as indicated in the table. Then apply the light-chasing strategy
again, beginning from the top row. This will solve the puzzle.
Lights on bottom row Press these on top row
Table 24.2: Light-chasing strategy24.7 Exercises 307
24.7 Exercises
Use the applet at http://www.sfu.ca/∼jtmulhol/math302/puzzles-lo.html to help with the these
exercises.
1. Solve each of the following configurations.
(a) (b) (c) (d)
2. Show each of the following configurations are not solvable.
(a) (b) (c)
3. In Table 24.2 there are 7 cases shown for the configuration of lights in the last row of the
puzzle. The case in which all the lights in the last row are out isn’t included in this table
since the puzzle would already be solved in this case. Show that the other 2
5 − 8 = 24
configurations are not solvable. This explains why they are not considered in the table.
4. In Section 24.4 we discussed how to visualize eigenvectors on the lights out puzzle. In this
exercise find five linearly independent vectors which are eigenvectors corresponding to the
eigenvalue 1. Once you found these vectors verify them visually by starting with all the lights
off, then pressing the buttons corresponding to the vector observe that exactly the pressed
lights will end up being on.
5. Consider a variant of the lights out game on an n×n board in which a button press changes
the state of the button itself and its four diagonal neighbours. All other rules remain the
same.
(a) What is the lights out matrix for this game when n = 4?
(b) For n = 3,4,...,8 calculate the dimension of the space of solvable configurations and
the dimension of the space of quiet patterns.
(c) Compare your answers to the situation for the classic toggle rule which are shown in
Table 24.1.
6. Consider the variation of the game in which each light has 3 states (red, green, off). You can
assign to each state a number in the field F3 = {0,1,2}. Assume the classic toggle rules apply
(only the button pressed and its horizontal and vertical neighbours are toggled). Explain what
the elements of each eigenspace represent in terms of the game.
(You may find this applet helpful: http://www.jaapsch.net/puzzles/javascript/lightj2k.htm.)VII
A SageMath . . . . . . . . . . . . . . . . . . . . . . . . . . 311
A.1 SageMath Basics
A.2 Variables and Statements
A.3 Lists
A.4 Sets
A.5 Commands/Functions
A.6 if, while, and for statements
A.7 Exercises
B Basic Properties of Integers . . . . . . . . . . 323
B.1 Divisibility and the Euclidean Algorithm
B.2 Prime Numbers
B.3 Euler’s φ-function
B.4 Modular Arithmetic
B.5 Exercises
Bibliography . . . . . . . . . . . . . . . . . . . . . . . 333
Articles
Books
Web Sites
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335
AppendixA. SageMath
Ted Kosen, author of Sage For Newbies, describes SageMath as follows
Sage is an open source mathematics computing environment for performing symbolic,
algebraic, and numerical computations. Mathematics computing environments are
complex, and require a significant amount of time and effort to become proficient
at using one. It will take a beginner a while to become an expert using Sage, but
fortunately one does not need to be a Sage expert in order to begin using it to solve
problems.
This is precisely the viewpoint we will take in this book. We will not attempt to become
SageMath experts, we will however use it to solve problems. In particular, problems regarding
permutation puzzles.
A mathematics computing environment is a collection of computer algorithms, and data
structures, that are built on top of a programming language. This means one has access to a full
programming language, in SageMath’s case it is Python, and further access to a mathematical
objects library complete with algorithms for performing calculations.
Rather than say anything more about what SageMath is, let’s just see for ourselves what it can
do.
A.1 SageMath Basics
For instant access to SageMath use the online SageMathCell: https://sagecell.sagemath.org/. Use
it to try out any of the commands listed in this section. Visit the SageMath homepage for more
information: http://www.sagemath.org/.
We will use SageMath in a jupyter notebook, so to reflect the look-and-feel of jupyter notebooks
we will display sage/python dells as shown below. Input is in an cell labeled In, output in a cell
labeled Out, and the result of a print statement is in an untitled cell just below the input cell.312 Chapter A. SageMath
In [1]: print (" Hello world ")
1+1
Hello world
Out[1]: 2
Note that the only output that appears in the Out cell is the output of the last line of the In cell,
if this line has an output. Otherwise, nothing will be displayed there.
Let’s now have a look at the kinds of computations we can do in SageMath.
Arithmetic Operations
We can use SageMath like a calculator to add/subtract/multiply/divide numbers.
In [2]: 2+3
Out[2]: 5
When typing input, [enter] will jump you down to the next line, whereas [shift-enter] gets
SageMath to evaluate the code-block. You can also press the run button in the menu bar instead of
[shift- enter].
A bit of terminology: What is typed in a cell is called the source code. When the cell is
executed, what SageMath prints to the screen is called the output. So 2+3 in the cell above is the
source code, and 5 is the output. In the cell above 2+3 is the source code, and 5 is the output.
Common arithmetic operations are:
operation syntax name
addition +
subtraction −
multiplication ∗
division /
remainder %
integer quotient //
exponentiation ^ or **
In [3]: print (3+2/5*2**3)
print (2**3)
print ((5*3)**2)
print (11%4)
print (7//3)
31/5
8
225
3
2
SageMath follows the usual order of operations:
(a) first evaluate exponents from right to left,
(b) then multiplication, division, remainder from left to right,
(c) finally, addition and subtraction from left to right.
The order in which expressions are evaluated can be changed using parenthesis: ( ).A.1 SageMath Basics 313
Inserting a New Cell
A new cell will automatically appear below the last cell of your sheet when the contents of the last
cell have been evaluated. Sometimes, however, we would like to add a new cell in the middle of
our worksheet. To insert a new execution shell in the worksheet, you can click the + button in the
menu. This adds a cell just below your currently selected cell. You can use the arrow keys in the
menu to moved the cells up or down. If you just want to add a cell, or a bunch of cells, at the end of
the worksheet, just select the last cell and hit [shift-enter] to add a new cell.
Working in a Cell: The Semicolon, and Comments
Multiple statements can be placed in a single cell. After typing 1+2, use [enter] to bring the cursor
down to the next line. When the cell is evaluated (either [shift-enter] or click [evaluate] below cell)
only the output of the last line of code is displayed.
In [4]: 1+2
3 -2
Out[4]: 1
In SageMath/python, semicolons can be placed after statements as separators, used to place
multiple statements on the same line.
In [5]: 1+2; 3 -2
Out[5]: 1
Still only the output of the last command is shown on the screen. To see the both outputs we
use the print command.
In [6]: print (1+2); 3 -2
3
Out[6]: 1
There is also a print command for sending outputs to the screen. We’ll see this in Section A.2.
It will come in handy to be able to add comments directly in the source code. Comments are
basically notes to yourself about what you are doing, and are not intended for the computer to
execute. Anything followed by the # symbol is treated as a comment.
In [7]: 2 -3 # this is comment after some code
# this is another comment
Out[7]: -1
When a comment is too long to fit in one line, we can enclose it in triple quotes:
""" text here """.
In [8]: """ here is a really long comment . What the next line does is
evaluates 3 expressions all on the same line . Nothing special ,
but my comment is now pretty long ."""
5^4
Out[8]: 625314 Chapter A. SageMath
A.2 Variables and Statements
Part of the power of a computing environment lies in the ability to store, manipulate, and recall
information. This is done using variables and statements.
Variables
A variable is a name that is associated with the data stored in a memory address. One way to create
variables in SageMath/python is through assignment which consists of placing the variable you
would like to create to the left of an equal sign =, and the expression on the right side.
Here we create a variable a, and assign to it the number 5.
In [9]: a=5 # create a new variable a and assign 5 to it.
b=7 # create a new variable b and assign 7 to it.
a=3 # reassign to the variable a the number 3.
c=a+b # assign to the variable c the sum of a and b
c # output the value of c
Out[9]: 10
Statements
Statements are the part of a programming language that are used to encode algorithmic logic.
Simple statements:
• assignment:
a=a+1
• call:
var(x), print(a+1), factor(24)
• assumption:
assume(x>0)
Compound statements:
• if-statement:
if A>3:
print(A-3)
else:
print("not big enough")
• while statement:
while x<=10:
print(x)
x=x+1
• for statement:
for x in [1,2,3,4,5]:
print x
We will look at if, while, and for statements more thoroughly in Section A.6. But the odd one
may creep into some of our examples below.
print()
SageMath has a function called print that allows the results of expressions to be displayed
regardless of where they are located in the cell.
In [10]: a=3
b=2
print (a,b)A.3 Lists 315
3 2
In [11]: if is_prime (5): # is_prime () is a built -in function
print ("5 is prime ")
else :
print ("5 is not prime ")
5 is prime
A.3 Lists
Lists are one of the most fundamental objects in any programming language.
Defining a List
A list is defined by putting the items of the list, separated by commas, inside square brackets [ ].
We can select items from the list as follows. (Note: the first item in a SageMath/python list is
indexed by 0, not 1 as you may have expected.)
In [12]: L=[1 ,2 ," milk "," cheese ","new shoes "]
print (L)
print (L [4])
[1 ,2 ," milk "," cheese ","new shoes "]
’new shoes ’
Trying to return a value at an index that is out of range triggers an error.
In [13]: L[5]
Out[13]: ---- ------ ------- ------- ------ ------- ------- ------ ------- ------- -
IndexError Traceback ( most recent call last )
<ipython -input -30 -7 d1d7a0424fb > in <module >
----> 1 L [5]
IndexError : list index out of range
Order matters in a list. If items are in different orders, then the lists are not equal.
In [14]: [1 ,2 ,3]==[2 ,1 ,3]
Out[14]: False
We can also create a list by stating conditions we want the elements to satisfy. This usually
requires starting with a bigger list, and either constructing a sublist, or constructing a new list.
In [15]: [n for n in [1 ,2 ,3 ,4] if is_even (n)]
# selects the even integers from [1 ,2 ,3 ,4]
Out[15]: [2 ,4]
In [16]: [2* n+1 for n in [1 ,2 ,3 ,4]]
# creates a new list of odd integers from the old list
Out[16]: [3 ,5 ,7 ,9]316 Chapter A. SageMath
List Operations: remove, append, etc.
In [17]: L=[1 ,2 ,3]
L. remove (3) # removes item 3 from L
L
Out[17]: [1 ,2]
In [18]: L. append (4) # adds item 4 to the end of list L
L
Out[18]: [1 ,2 ,4]
In [19]: len (L)
Out[19]: 3
Here are some more list operations. In each of the following “L" is used as the name of our list
and the operation being described is typed in bold.
operation description
x in L True if item x is in list L, else False.
x not in L False if item x is in list L, else True.
L + S The concatenation of lists L and S.
n*L, or L*n n copies of list L concatenated.
L[i] ith entry of list L (first entry has index 0).
L[i:j] slice of L from i up to, but not including j.
L[i:j:k] slice of L from i to j with step k.
len(L) length of list L.
min(L) smallest item in L.
max(L) largest item in L.
L.append(x) Add an item x to the end of the list L
L.extend(S) Extend the list L by appending all the items in the given list S to the
end of L
L.insert(i,x) Insert item x in position i of list L. For example, L.insert(0, x) inserts
x at the front of the list, and L.insert(len(L), x) is equivalent to
L.append(x).
L.remove(x) Remove the first item from the list whose value is x. It is an error if
there is no such item.
L.pop(i) Remove the item at the given position in the list, and return it. If no
index is specified, L.pop() removes and returns the last item in the
list.
L.index(x) Return the index of the first occurrence of item x in the list. It is an
error if there is no such item.
L.count(x) Return the total number of times item x appears in the list.
Constructing Lists
SageMath (and python) already have some quick ways to build lists. The range function, range(a,b),
creates the list of integers beginning with a and ending at b-1. Here we assume a is less than b.A.4 Sets 317
In [20]: range (11) # list of integers from 0 to 10
Out[20]: [0 ,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10]
Another way to create the same list is as follows:
In [21]: [0..10] # another way to construct the list
Out[21]: [0 ,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10]
Using the optional third argument for the step size we can do the following:
In [22]: range (0 ,11 ,2) # list of integers from 0 to 10 , step size 2
Out[22]: [0 , 2 , 4 , 6 , 8 , 10]
We can select one or multiple items from a list as follows.
In [23]: L= range (1 ,26)
print L[1] # selects item of index 1
print L [0:3] # sublist of L consisting of items indexed 0 through 2
Out[23]: 2
[1 ,2 ,3]
The items in a list can be overwritten by new items (i.e. lists are mutable).
In [24]: L=[1 ,2 ,3 ,4]
L
Out[24]: [1 ,2 ,3 ,4]
In [25]: L [1]=5
L
Out[25]: [1 ,5 ,3 ,4]
An example of using lists to factor all integers from 1 to 10.
In [26]: [ factor (n) for n in range (1 ,11)]
Out[26]: [1 , 2 , 3 , 2^2 , 5 , 2 * 3 , 7 , 2^3 , 3^2 , 2 * 5]
A.4 Sets
SageMath has a built-in Set type. It offers a fast lookup of whether an element is in the set or not,
and it comes equipped with standard set-theoretic operations: union, intersection, etc.
Unlike lists, where order matters, the order of the elements in a set does not matter. All that
matters is the elements themselves. So in this sense, we can think of sets as unordered lists.
Defining a Set
In [27]: Set ([1 ,2 ,3]) # here we turn the list [1 ,2 ,3] into a set
Out[27]: {1 ,2 ,3}
In [28]: Set ([1 ,2 ,3])== Set ([2 ,1 ,3]) # order doesn ’t matter in a set318 Chapter A. SageMath
Out[28]: True
In [29]: Set ( range (1 ,101)) # using the range list to construct a set
Out[29]: {1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 20 ,
21 , 22 , 23 , 24 , 25 ,26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 37 , 38 ,
39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 , 52 , 54 , 55 , 56 ,
57 , 58 , 59 , 60 ,61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 71 , 72 , 73 , 74 ,
75 , 76 , 77 , 78 , 79 , 80 ,81 , 82 , 83 , 84 , 85 , 86 , 88 , 89 , 90 , 91 , 92 ,
93 , 94 , 95 , 96 , 97 , 98 , 99 , 100}
Another way to construct the same set is to use Set(1..100).
We can construct sets by specifying conditions on the elements, much like we did with lists.
In [30]: Set (x for x in range (1 ,11) if is_even (x))
Out[30]: {8 ,2 ,4 ,10 ,6}
In [31]: Set (x for x in range (1 ,51) if x %3==0) # integers divisible by 3
Out[31]: {33 , 3 , 36 , 6 , 39 , 9 , 42 , 12 , 45 , 15 , 48 , 18 , 21 , 24 , 27 , 30}
There is also a filter command for selecting elements satisfying some special condition.
Here we select the prime numbers.
In [32]: S=Set (1..20)
filter ( is_prime ,S)
Out[32]: [2 , 3 , 5 , 7 , 11 , 13 , 17 , 19]
See Lecture 2 for some further examples of sets in SageMath, including the set-theoretic
operations: union, intersection, etc.
A.5 Commands/Functions
We have already seen a few built-in SageMath/Python commands: print(), is_prime(), factor(),
etc. We now look at two ways to define our own commands.
Defining Your Own Commands
The syntax for defining a command, which in this template we have called function_name, is:
def function_name( <parameters> ):
:
<statement>
<statement>
:
return <expression>
Here are some examples.
In [33]: def f(x):
return x*x
f(7) # here we test the command fA.6 if, while, and for statements 319
Out[33]: 49
In [34]: def is_divisible_by_three (x):
if x %3==0: # check if remainder is 0 when divided by 3
return True
else :
return False # this ends the definition
print ( is_divisible_by_three (6)) # here we test the command
print ( is_divisible_by_three (6))
True
False
Commands can take more than one parameter.
In [35]: # function capitalizes x then concatenates with itself n times
def repeat_word (x,n):
return x. capitalize ()*n
repeat_word (" limabean " ,3)
Out[35]: ’ LimabeanLimabeanLimabean ’
Lambda Functions
Python supports the creation of anonymous functions (i.e. functions that are not bound to a name)
using a construct called lambda. This is a very powerful concept that’s well integrated into Python
and is often used in conjunction with typical functional concepts like filter() and map().
Using the lambda function we can create a function like f above.
In [36]: f = lambda x: x*x
f(7)
Out[36]: 49
A lambda function can take more than one argument.
In [37]: concat = lambda x,y: x+y
concat (" super ","man ")
Out[37]: superman
Also note that you can put a lambda definition anywhere a function is expected, and you don’t
have to assign it to a variable at all. Here we use a lambda function along with filter() to pick
out all elements of a list which are divisible by 3.
In [38]: print ( filter ( lambda x: x%3==0 , range (1 ,50)))
Out[38]: [3 , 6 , 9 , 12 , 15 , 18 , 21 , 24 , 27 , 30 , 33 , 36 , 39 , 42 , 45 , 48]
A.6 if, while, and for statements
if statement
A conditional statement is what we use when we want our code to make decisions. For example,
suppose we wanted to divide a number by 2 only if it is even. We can do this in SageMath by using
an if statement. The general syntax for python’s if-else statement is320 Chapter A. SageMath
if <condition>:
<statement>
:
else:
<statement>
:
<condition> is an expression that can use relational operators <, >, <=, >=, == (is equal),
and != (is not equal), as well as logical operators: and, or, not. Its value is either True or False.
If the condition is true, the statements indented under if are executed, otherwise the statements
under else are executed. The else clause is optional: you can have if alone. In that case, if the
condition is true the program executes the statements indented under if, otherwise the program
skips them.
In [39]: n = 15
if n %3==0:
print (’n is divisible by 3’)
else
print (’n is not divisible by 3’)
Out[39]: n is divisible by 3
Often you’ll need to string a chain of several if-else statements together. For example
In [40]: def letterGrade ( score ):
if score >= 90:
return ’A’
else :
if score >= 80:
return ’B’
else :
if score >= 70:
return ’C’
else :
if score >= 60:
return ’D’
else :
return ’F’
Python lets you simplify the indentation and compress the "if-else" on one line by using the
keyword elif. The above code can be shortened to
In [41]: def letterGrade ( score ):
if score >= 90:
return ’A’
elif score >= 80:
return ’B’
elif score >= 70:
return ’C’
elif score >= 60:
return ’D’
else :
return ’F’
A.6.1 while loop
while loops are one of the most useful techniques in programming. Essentially, a while loop
allows us to repeat the same block of statements multiple times (but with different values ofA.6 if, while, and for statements 321
variables) while a certain condition holds true. The general syntax for python’s while loop is
while <condition>:
<statement>
:
As long as the condition remains true the program repeats the statements in the while block.
The next example uses a while loop to add the integers from 1 to 10.
In [42]: i = 1
sum1ton = 0
while i <= 10:
sum1ton += i # equivalent to sum1ton = sum1ton + i
i += 1 # increments i by 1
sum1ton
Out[42]: 55
for loop
for loops are traditionally used when you have a block of code which you want to repeat a fixed
number of times. In python, for loops iterate over a fixed list. As an alternative, the while loop
could be used, however, while is used when a condition is to be met, or if you want a block of
code to theoretically repeat forever, for example repeatedly asking for user input until the format
the user provides is correct. The general syntax for python’s for loop is
for x in <list>:
<statement>
:
Here is an example of using the for loop to step through the entries of a list and square each
one.
In [43]: L = [1 ,2 ,3 ,4 ,5]
for x in L:
print (x **2)
1
4
9
16
25
In the next example we use a for loop together with an if statement to print the list of integers
from 1 to 20 which are divisible by 3.
In [44]: for x in range (1 ,21):
if x%3 == 0:
print (x)
3
6
9
12
15
18322 Chapter A. SageMath
This has been a quick introduction to get you up and running with SageMath. We will be
developing our experience with SageMath throughout this book, so have fun!.
A.7 Exercises
1. Assign 27 to the variable a, 1027 to the variable b, and the product to the variable c. Have
SageMath output the values of all three variables.
2. For a, b and c in Exercise 1, use the factor() command to factor c. Also, use the remainder
command % to determine if 16 is a factor of ab+1.
3. Create and print a list of integers from 50 to 100 (inclusive).
4. From the list in Exercise 3, create a sublist consisting of (a) even integers, (b) odd integers,
(c) primes, and (d) numbers divisible by 13.
5. Create the two sets A = {1,2,3,4,5,6}, B = {2,4,6,8,10} and find (a) their intersection, (b)
their union, and (c) the cardinality of their cartesian product.
6. Define a function sum1ToN that returns 1+2+3+···+n using the formula 1+2+3+···+
n =
n(n+1)
2
.
7. The function below prints string obj n times:
def printNtimes(n,obj):
count=0
result=’’ # empty string
while count < n:
result += str(obj) # += is equivalent to result = result + str(obj)
count += 1
print(result)
Test it with various inputs for obj and n.
Notice there is no return line in the function. Since we don’t ask the function to return
anything we could either write the last line as return, or just leave it out as we have done
above. Type in print printNtimes(3,’hello’) and describe what happens.
8. Write a function pow4(x) that returns x
4
and performs only two multiplications (and no
exponentiations).
9. Write a function divBy(n,m) which returns True if integer n is divisible by m, otherwise it
returns False.B. Basic Properties of Integers
In this book a few occasions have arisen where we needed some properties of the integers:
Z = {...,−3,−2,−1,0,1,2,3,...}.
This section is devoted to a brief account of some of these properties such as divisibility, greatest
common divisors, the Euclidean Algorithm, and prime numbers.
B.1 Divisibility and the Euclidean Algorithm
We say that a divides b (written a | b) if and only if there is an integer d such that b = ad. For
example, 2 | 6, 12 | 60, −5 | 15, and 8 | −24. If a does not divide b then we write a - b. For example
4 - 2 and 3 - 4.
We say d is the greatest common divisor of a and b (written gcd(a,b)) if and only if
(i) d | a and d | b, and
(ii) if c | a and c | b then c ≤ d
Condition (i) says that d is a common divisor of a and b and condition (ii) says it is the greatest
such divisor. For example, gcd(5,15) = 5 since 5 divides both 5 and 15 and it is the largest such
divisor. Check for yourself that gcd(12,32) = 4.
If gcd(a,b) = 1 then we say a and b are relatively prime. This is equivalent to saying a and b
do not have a common prime factor, but we didn’t phrase it in this way since we won’t define what
a prime number is until Section B.2. When a and b are small it is possible to see what gcd(a,b) is
by inspection, but when a and b are large this is no longer possible. We will describe an algorithm
for easily computing gcd(a,b) called the Euclidean Algorithm (see Theorem B.1.3). The Euclidean
Algorithm allows us to compute gcd’s without the need to factor the numbers first, and this is a
good thing since factoring large numbers can be computationally difficult. Before we present the
Euclidean Algorithm we present a useful theorem.324 Chapter B. Basic Properties of Integers
Theorem B.1.1 — Division Algorithm. Let a,b ∈ Z. Suppose that b 6= 0. Then there exist
unique q,r ∈ Z, with 0 ≤ r < |b| such that
a = qb+r.
For example, consider a = 29 and b = 8. Then 29 = 3 · 8+5. In this case q = 3 is called the
quotient and r = 5 the remainder.
We will not give a formal proof of the Division Algorithm here, but the reader should be familiar
with the method for finding q and r since it is just long division. The idea is to divide b evenly
into a as many times as possible (this is q), and what is left over (the remainder r) must be smaller
than b. For the interested reader a formal proof of this theorem is covered in any text in elementary
number theory (for example [Dud08]).
We can use Python commands // and % to compute the quotient and remainder, respectively.
In [1]: 29//8 # this computes the quotient q
29%8 # this computes the remainder r
Out[1]: 3
5
As an exercise in applying the definition of greatest common divisor, and because we will use
this result in the proof of the Euclidean Algorithm, we prove the following lemma.
Lemma B.1.2 If a = bq+r then gcd(a,b) = gcd(b,r).
Proof: Let a,b,q and r be integers such that a = bq+r. Let d = gcd(a,b) and let g = gcd(b,r).
We want to show d = g. Since d | a and d | b then there exist integers a and b such that a = da and
b = db. Substituting these into a = bq+r we have
da = dbq+r =⇒ r = d(a−bq)
which implies d | r. Therefore d divides both b and r so, by the definition of gcd, d ≤ g.
On the other hand, since g | b and g | r then g divides bq+r = a by a similar argument to the
one above. Therefore g divides both a and b so, by the definition of gcd, g ≤ d.
It follows from d ≤ g and g ≤ d that d = g. 
Now we present the Euclidean Algorithm for computing greatest common divisors.
Theorem B.1.3 — Euclidean Algorithm. If a and b are positive integers, b 6= 0, and
a = qb+r, 0 ≤ r < b,
b = q1r +r1, 0 ≤ r1 < r,
r = q2r1 +r2, 0 ≤ r2 < r1,
.
.
.
.
.
.
rk = qk+2rk+1 +rk+2, 0 ≤ rk+2 < rk+1,
then for k large enough, say k = `, we have r`+1 = 0, r`−1 = q`+1r`
, and gcd(a,b) = r`
.
Proof: Apply the Division Algorithm to a, b to produce q and r. Then apply the division algorithm
to b, r to produce q1 and r1. If we continue applying the Division Algorithm, as indicated byB.1 Divisibility and the Euclidean Algorithm 325
each line in the statement of the theorem above, then we produce a strictly decreasing sequence of
non-negative integers
b > r > r1 > r2 > ···
and this sequence must must come to an end. One of the remainders must be zero. Suppose that
r`+1 = 0. Then r`−1 = r`q`+1. By Lemma B.1.2 applied over and over,
gcd(a,b) = gcd(b,r) = gcd(r,r1) = gcd(r1,r2) = ··· = gcd(r`−1,r`) = gcd(q`+1r`
,r`) = r`
.

If either a or b is negative we can use the fact that gcd(a,b) = gcd(|a|,|b|).
Example B.1 Calculate gcd(343,273).
Applying the Euclidean Algorithm
343 = 1 · 273+70 (B.1)
273 = 3 · 70+63 (B.2)
70 = 1 · 63+7 (B.3)
63 = 9 · 7 (B.4)
it follows that gcd(343,273) = 7.
The gcd command is implemented in SageMath.
In [2]: gcd (343 ,273)
Out[2]: 7

For the interested reader, we could implement Euclid’s algorithm directly in Python as follows.
Python B.1: Euclid’s Algorithm for gcd in Python
def gcd (a,b):
""" Return the GCD of a and b using Euclid ’s Algorithm . """
while b > 0:
a, b = b, a%b
return a
Let’s continue with the previous example. From Equation B.3 we have
7 = 70−1 · 63.
Solve Equation B.2 for 63 and plug into the previous equation
7 = 70−1(273−3 · 70)
= 4 · 70−1 · 273.
Now solve Equation B.1 for 70 and plug into the previous equation
7 = 4(343−1 · 273)−1 · 273
= 4 · 343−5 · 273.
The last equation shows that we are able to write the gcd of 343 and 273 as a linear combination
of these two numbers: 7 = gcd(343,273) = 4 · 343−5 · 273. This is not a coincidence as the next
theorem states.326 Chapter B. Basic Properties of Integers
Theorem B.1.4 — Extended Euclidean Algorithm. If gcd(a,b) = d then there exist integers
u and v such that
au+bv = d.
We won’t present a detailed proof here, instead we will sketch the idea based on our work
in Example B.1. The idea was to essentially work backwards through the Euclidean Algorithm.
Beginning with Equation B.3 we solve for the gcd r2 = 7 in terms of r = 70 and r1 = 63. Keeping
the gcd 7 on the left hand side of the equation we then we use the previous equations, B.2 and B.1,
to first replace r1 in terms of r and b, and then replace r in terms of a and b. This results in an
equation for r in terms of a and b alone as desired.
The Extended Euclidean Algorithm is implemented in SageMath. The command is xgcd(a,b)
and it returns a triple (d,u, v) such that d = gcd(a,b) and d = ua+vb.
In [3]: xgcd (343 ,273)
Out[3]: (7 , 4 , -5)
For the interested reader, the Extended Euclidean Algorithm can be implemented in Python as
follows.
Python B.2: Extended Euclidean Algorithm (Python)
def xgcd (a,b):
""" Extended GCD :
Returns (gcd , s, t) where gcd is the greatest common divisor
of a and b with the sign of b if b is nonzero , and with the
sign of a if b is 0. The numbers s,t are such that
gcd = as+bt."""
prevs , s = 1 , 0; prevt , t = 0 , 1
while b:
q, r = divmod (a,b)
s, prevs = prevs - q*s, s
t, prevt = prevt - q*t, t
a, b = b, r
return a, prevs , prevt
B.2 Prime Numbers
A prime is an integer that is greater than 1 and has no positive divisors other than 1 and itself. An
integer that is greater than 1 but is not prime is called composite. For example 2, 3, and 5 are
primes, but 4 and 6 are composite. By convention 1 is neither prime nor composite, it is called a
unit. Thus the set of positive integers can be divided into three classes: the primes, the composites,
and a unit.
There are infinitely many prime numbers and every integer n can be factored uniquely into
a product of primes. Any text in elementary number theory will begin with proofs of these two
statements (for example see [Dud08]). It should be noted that one of the reasons we don’t consider
1 to be prime is precisely because we want integers to have unique factorizations.
There is a lot we could say about prime numbers and all the properties they possess. However
we will limit ourselves to stating one property, which could also be taken as the defining property
for an integer to be prime.B.3 Euler’s φ-function 327
Lemma B.2.1 If p is a prime number and a and b are integers such that p | ab then either p | a
or p | b.
Proof: If p - a then gcd(p,a) = 1 so by the Extended Euclidean Algorithm there exist integers u
and v such that 1 = up+va. Multiplying through by b we have
b = ubp+vab
and since p divides both terms on the right-hand side it must also divide b (see Exercise 2). 
Note that the statement of the lemma does not hold if p is not prime. See Exercise 11.
The study of integers and prime numbers is an active area of research today and there is still
much about them that is unknown. For the interested reader a good place to start for further reading
would be any text in elementary number theory (for example [Dud08]).
B.3 Euler’s φ-function
There is an important number-theoretic function, called Euler’s φ-function, denoted by φ.
Definition B.3.1 — Euler’s φ-Function. For any positive integer n, φ(n) is the number of integers
in {1,2,...,n} which are relatively prime to n. In other words,
φ(n) = |{m ∈ Z | 1 ≤ m ≤ n,gcd(m,n) = 1}|.
For example, φ(4) = 2 since there are only two numbers in {1,2,3,4} that are relatively
prime to 4, namely 1 and 3. φ(10) = 4 since 1,3,7,9 are the only positive integers less than 10
which are relatively prime to 10. Notice that φ(p) = p−1 for any prime p since all the numbers
1,2,3,..., p−1 are relatively prime to p.
The following theorem gives a formula for φ(n) based on the prime factorization of n.
Theorem B.3.1 If n has prime factorization given by
n = p
e1
1
p
e2
2
··· p
ek
k
,
then
φ(n) = p
e1−1
1
(p1 −1)p
e2−1
2
(p2 −1)··· p
ek−1
k
(pk −1).
For example, since 12 = 2
23 then φ(12) = 2
2−1
(2−1)3
1−1
(3−1) = 2 · 2 = 4.
The reader can find a proof of Theorem B.3.1 in [Dud08].
This function has been implemented in SageMath, under the command euler_phi(). For
example, here we see φ(96) = 32.
In [4]: euler_phi (96)
Out[4]: 32
To find the 32 numbers relatively prime to 96 we can do the following.
In [5]: [ n for n in range (1 ,97) if gcd(n ,96)==1 ]328 Chapter B. Basic Properties of Integers
Out[5]: [1 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 25 , 29 , 31 , 35 , 37 , 41 , 43 , 47 , 49 ,
53 , 55 , 59 , 61 , 65 , 67 , 71 , 73 , 77 , 79 , 83 , 85 , 89 , 91 , 95]
Or we could use a filter with a lambda function.
In [6]: filter ( lambda x: gcd(x ,96)==1 , range (1 ,97))
Out[6]: [1 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 25 , 29 , 31 , 35 , 37 , 41 , 43 , 47 , 49 ,
53 , 55 , 59 , 61 , 65 , 67 , 71 , 73 , 77 , 79 , 83 , 85 , 89 , 91 , 95]
B.4 Modular Arithmetic
One of the most useful and important concept related to integers is the notion of a remainder
upon division. That is, what is “left over” after one integer is divided into another. If you have
done any programming you will undoubtedly be familiar with the remainder operator (modulo
operator), For example in Python this operator is denoted by %. We have already used this operator
in the Euclidean algorithm of this section. For example, 15%4 = 3, since the remainder when 15
is divided by 4 is 3. In mathematics, the notation we use for this is mod , and this expression is
written as 15 mod 4 = 3.
In this section we formalize this idea and introduce the notation used for computing with
remainders.
Definition B.4.1 — a mod n. Let n be a fixed positive integer. For any integer a,
a mod n (read a modulo n)
denotes the remainder upon dividing a by n. (Note: the remainder is an integer 0 ≤ r < n.)
Example B.2 15 mod 4 = 3 since 15 divided by 4 has a remainder of 3 (i.e. 15 = 3 · 4+3).
10 mod 9 = 1 since 10 divided by 9 has a remainder of 1.
−33 mod 5 = 2 since −33 = (−6)5+2. 
To determine the value of the expression a mod n it should be read as “a divided by n has a
remainder of ”.
Exercise B.1 Determine the following
(a) 17 mod 8
(b) −22 mod 6
(c) 14 mod 7
(d) 545 mod 12
(e) 1492 mod 4
(f) −100 mod 6

Modulo notation is most commonly used as part of a congruence relation, which is defined as
follows.
Definition B.4.2 — Congruence. If a and b are integers and n is a positive integer, we write
a ≡ b mod n
when n divides a−b. We say a is congruent to b modulo n.
Note: The relation ≡ is an equivalence relation on Z (that is, it is reflexive, symmetric and
transitive). (See Chapter 17 for the definition of an equivalence relation.)B.5 Exercises 329
Example B.3 15 ≡ 3 mod 4 since 15−3 = 12 which is divisible by 4.
10 ≡ 25 mod 5 since 10−25 = −15 which is divisible by 5.
−4 ≡ 11 mod 5 since −4−11 = −15 which is divisible by 5.
As a non-example, 10 6≡ 3 mod 2 since 10−3 is not divisible by 2. 
The usefulness of this notation in solving problems about the nature of integers comes from the
following theorem.
Theorem B.4.1 — Modular Arithmetic.
If a = c mod n and b = d mod n then
• (a+b) ≡ (c+d) mod n
• a · b ≡ c · d mod n
Proof. Since a = c mod n and b = d mod n then this means that n | (a−c) and n | (b−d). Now,
(a + b) − (c − d) = (a − c) + (b − d) is divisible by n, hence (a + b) ≡ (c − d) mod n. Also,
ab−cd = ab−ad +ad −cd = a(b−c) + (a−c)d is divisible by n, hence ab ≡ cd mod n. 
Example B.4 Since 10 ≡ 1 mod 9 and 11 ≡ 2 mod 9 then by the previous theorem
(10+11) ≡ (1+2) mod 9,
which simplifies to 21 ≡ 3 mod 9. Also, by the previous theorem
10 · 11 ≡ 1 · 2 mod 9,
which simplifies to 110 ≡ 2 mod 9. 
Our final example shows how we can use remainders to answer questions that are beyond brute
force caalculation.
Example B.5 Determine the ones digit of 72021
.
This is such a huge number that we couldn’t possible determine the answer by finding the
decimal representation (using a computer) and then reading off the first digit. Instead we will
work this out using remainders. First note that we are interested in finding 7
2021 mod 10, as
this gives the ones digit. Second, notice that 74 = 2401 ≡ 1 mod 10. Therefore,
7
2021 = 7
4(505)+1 = (7
4
)
505
· 7
1 ≡ 1
505
· 7 mod 10
where the congruence follows from Theorem B.4.1 (Why?). Therefore,
7
2021 = 7 mod 10
which means that 7 is the ones digit. 
B.5 Exercises
1. Which integers divide 0?
2. Prove that if d | a and d | b then d | (a+b).330 Chapter B. Basic Properties of Integers
3. Show that if a | b and b | c then a | c.
4. If d | c then prove that d | ac for any integer a.
5. For each of the following pairs of numbers a, b below determine gcd(a,b). In each case use
the Extended Euclidean Algorithm to find integers u and v such that gcd(a,b) = ua+bv.
(a) 306,702 (b) 314,159 (c) 4144,7696 (d) 888,3071
6. Find x and y such that 888x+408y = 24.
7. Find two different solutions of 299x+247y = 13.
8. What is gcd(n,1) where n is any positive integer?
9. What is gcd(n,0) where n is any positive integer?
10. If gcd(a,b) = d then show gcd(a/d,b/d) = 1.
11. If d | ab does it follow that d | a or d | b?
12. Let gcd(a,b) = d and suppose that c | a and c | b, show that c | d.
13. If d | ab and gcd(d,a) = 1 then show that d | b.
(Hint: use the Extended Euclidean Algorithm.)
14. Calculate φ(42), φ(420), and φ(4200).
15. Prove that for n ≥ 1, gcd(n−1,n) = 1.
16. Find four solutions to φ(n) = 16.
17. Prove this alternate formula for Euler’s φ-function: if n = p
e1
1
p
e2
2
··· p
ek
k
, then
φ(n) = n

1−
1
p1
1−
1
p2

···
1−
1
pk

.
(Hint: Begin by using Theorem B.3.1.)
18. Write your own implementation of Euler’s φ-function in Python.
19. Show that if a ≡ b mod n then −a ≡ −b mod n.
20. Show that if a = c mod n and b = d mod n then (a−b) ≡ (c−d) mod n.
(Hint: Use the previous exercise and Theorem B.4.1.)
21. Show that if m | n and a ≡ b mod n then a ≡ b mod m.
22. If m | a and n | a, where gcd(m,n) = 1, show that mn | a.
23. If a ≡ b mod m and a ≡ b mod n, where gcd(m,n) = 1, show that a ≡ b mod mn.
24. Find all m such that 1848 ≡ 1914 mod m.
25. Notice that the first few square numbers 1, 4, 9, 16, 25 have the property that each one is
congruent to 0 or 1 modulo 4. For instance,
9 ≡ 1 mod 4, 16 ≡ 0 mod 4 25 ≡ 1 mod 4.
Show that this pattern holds for all square numbers. That is, show that if n is a square number
then n mod 4 is either 0 or 1.
26. Show that no square integer has as its last digit 2, 3, 7, or 8.
27. (a) Show that an integer is divisible by 9 if and only if the sum of its digits is divisible by
9. For example, 135 is divisible by 9 since 135 = 9 · 15, and notice that the sum of its
digits 1+3+5 = 9 is also divisible by 9.
(b) Similar to the divisibility criteria for divisibility by 9 in part (a), determine divisibility
criteria to determine whether an integer is divisibly by each of the following numbers:
11, 4, 6.
28. Determine the ones digit of 22021
.
29. When 3
2027 is expressed as an integer, what is last digit (i.e. the ones digit) of 3
2027. What
are the last two digits of 32027
.
30. Reduce the following numbers:B.5 Exercises 331
(a) 2
1000 mod 7
(b) 3
421 mod 13
31. Show that 274 +3
74 is divisible by 13.
32. Is 1+2+2
2 +2
3 +···+2
2020 +2
2021 divisible by 3?
33. Find the last digit of 32014 +4
2015
.
34. Find a positive integer m such that 11m ≡ 1 mod 35.
Challenging Problems:
35. Prove that for all positive integers n, 1n +8
n −3
n −6
n
is divisible by 10.
36. Show that
1 · 3 · 5 ··· 2013+2 · 4 · 6 ··· 2014
is divisible by 2015.
37. Show that any odd perfect square can be written in the form 8k +1.
38. Show that every prime greater than 3 can be expressed in the form √
24n+1 for some integer
n.
(Hint: Use the previous exercise.)
39. A palindrome is a number that reads the same backward as forward. Examples are 22, 1331,
and 935686539. Show that 11 is the only prime number which is a palindrome with an even
number of digits.
40. Show that there are infinitely many prime numbers.
41. Show that there are infinitely many prime numbers of the form 4k +3.
42. Show that there are infinitely many prime numbers of the form 3k +2.
43. Monkey and Coconut Problem I:
Ten people land on a deserted island. There they find lots of coconuts and a monkey. During
their first day they gather coconuts and put them all in a community pile. After working all
day they decide to sleep and divide them into ten equal piles the next morning.
That night one castaway wakes up hungry and decides to take his share early. After dividing
up the coconuts he finds he is one coconut short of ten equal piles. He also notices the
monkey holding one more coconut. So he tries to take the monkey’s coconut to have a total
evenly divisible by 10. However when he tries to take it the monkey conks him on the head
with it and kills him.
Later another castaway wakes up hungry and decides to take his share early. On the way
to the coconuts he finds the body of the first castaway, which pleases him because he will
now be entitled to 1/9 of the total pile. After dividing them up into nine piles he is again one
coconut short and tries to take the monkey’s slightly bloodied coconut. The monkey conks
the second man on the head and kills him.
One by one each of the remaining castaways goes through the same process, until the 10th
person to wake up gets the entire pile for himself. What is the smallest number of possible
coconuts in the pile, not counting the one the monkey is holding?
44. Monkey and Coconut Problem II:
Five men and a monkey were shipwrecked on a desert island, and they spent the first day
gathering coconuts for food. They piled them up together and then went to sleep for the
night.
When they were all asleep one man woke up, and he thought there might be a fight about
dividing the coconuts in the morning, so he decided to take his share. He divided the coconuts
into five piles. He had one coconut left over, and he gave that to the monkey, and he hid his
pile and put the rest back together.
The next man woke up and did the same thing. And he had one left over, and he gave it to the
monkey. And all five of the men did the same thing, one after the other; each on taking a fifth
of the coconuts in the pile when he woke up, and each having one left over for the monkey.332 Chapter B. Basic Properties of Integers
And in the morning they divided what coconuts were left, and they came out in five equal
shares. Of course each one must have known there were coconuts missing but each one was
guilty as the others, so they didn’t say anything. How many coconuts were gathered initially?
Answers to in-chapter exercises:
Exercise B.1: (a) 1 (b) 2 (c) 0 (d) 5 (e) 0 (f) 2Bibliography
Articles
[Arc99] A. F. Archer. “A Modern Treatment of the 15-puzzle”. In: American Mathematical
Monthly 106.9 (1999), pages 793–799.
[Con08] K. Conrad. “The 15-puzzle (and Rubik’s Cube)”. In: (2008). notes.
[Kil94] J.O. Kiltinen. “How Few Transpositions Suffice? ... You Already Know!” In: Mathemat￾ics Magazine 67.1 (1994), pages 45–47 (cited on page 93).
Books
[Ban82] C. Bandelow. Inside Rubik’s Cube and Beyond. Boston: Birkhäuser, 1982, page 125.
ISBN: 3-7643-3078-3 (cited on page 259).
[Dud08] U. Dudley. Elementary Number Theory. 2nd. Dover Publications, 2008, page 272. ISBN:
978-0486469317 (cited on pages 324, 326, 327).
[FS82] A. H. Frey Jr. and D. Singmaster. Handbook of Cubik Math. New Jersey: Enslow
Publishers, 1982, pages viii+193. ISBN: 0-89490-058-7.
[Gal94] J. A. Gallian. Contemporary Abstract Algebra. Lexington: DC Heath and Company,
1994, page 525. ISBN: 0-669-33907-5.
[Joy08] D. Joyner. Adventures in Group Theory. 2nd. Baltimore: The John Hopkins University
Press, 2008, pages xv+310. ISBN: 0-8018-9013-6 (cited on page 259).
[Kil03] J.O. Kiltinen. Oval Track and Other Permutation Puzzles: And Just Enough Group
Theory to Solve Them. New York: The Mathematical Association of America, 2003,
page 142. ISBN: 0-8838-5725-1 (cited on pages 88, 174).
[Nou81] J.G. Nourse. The Simple Solution to Rubik’s Cube. Toronto: Bantam Books, 1981,
page 64. ISBN: 0-8018-9013-6.
[Ste+12] W. A. Stein et al. Sage. http://www.sagemath.org. 2012.334 Chapter B. Basic Properties of Integers
[SS06] J. Slocum and D Sonneveld. The 15-Puzzle: How it Drove the World Crazy. Beverly
Hills, CA: The Slocum Puzzle Foundation, 2006, page 144. ISBN: 1-890980-15-3.
[Slo+09] J. Slocum et al. The Cube: The Ultimate Guide to the World’s Best Selling Puzzle. New
York: Black Dog & Leventhal Publishers, Inc., 2009, page 142. ISBN: 978-1-57912-
805-0.
Web Sites
[Mul17] J. Mulholland. Coures website for Permutation Puzzles: A Mathematical Perspective.
2017. URL: http://www.sfu.ca/~jtmulhol/permutationpuzzles/ (visited on
05/20/2019) (cited on pages 15, 16, 18, 22, 184, 255).
[Sch11] J. Scherphuis. Jaap’s Puzzle Page. 2011. URL: http://www.jaapsch.net/puzzles/
(visited on 05/20/2019) (cited on pages 17, 108, 199, 200).Index
Dn, dihedral group, 132, 146
RC2, Pocket cube group, 153
RC3, Rubik’s cube group, 150
F2, finite field of size 2, 297
N, natural numbers, 26
φ(n), Euler’s φ-function, 327
Q, rational numbers, 26, 120
Q∗
, 120
R, real numbers, 26, 120
R
∗
, 120
[n], 26
Z, integers, 25, 120
Z/nZ, see Zn, cyclic group
Z
+, positive integers, 26
Zn, cyclic group, 126, 146
15 puzzle, 14, 66, 103, 158
solvability, 104
alternating group An, 95–97, 122
associativity, 117
commutator, 161
Y-commutator, 165
Z-commutator, 165
congruence, 328
congruent, 127, 215
conjugacy class, 176
conjugate, 111, 175
conjugation, see conjugate
coset, see group, coset
coset representative, see group, coset represen￾tative
divides, 323
division algorithm, 324
Euclidean Algorithm, 324
Extended Euclidean Algorithm, 326
Euler’s φ-function, see phi(n), Euler’s φ-function,
327
Extended Euclidean Algorithm, 130
extended euclidean algorithm, 130
field, 298
F2, 297
function, 36
bijective, 36
codomain, 36
domain, 36
image, 36
injective, 36
one-to-one, see injective
onto, see surjective
range, 36
surjective, 36
Gaussian elimination, 297
gcd, greatest common divisor, 130
greatest common divisor, 323
group, 96, 117
Dn, dihedral group, 132, 146336 INDEX
GL(n,R), general linear group, 121
Mn,m(R), 120
RC2, Pocket cube group, 153
RC3, Rubik’s cube group, 150, 243
centre, 261
RC∗
3
, illegal cube group, 246
SL(n,R), special linear group, 121
U(n), units modulo n under ·, 129, 146
R
n
,+, 120
Zn, integers modulo n under +, 126, 146
abelian, 122, 125
alternating group An, 95–97, 122
axioms, 117
cancellation property, 118
Cayley table, see multiplication table
centre, 142
coset, 222
coset representative, 222
cube, GC, 270
cyclic group, 125, 126, 140, 143
generator, 125
definition, 117
direct product, 257
dodecahedron, GD, 271
Heisenberg group, 137
icosahedron, GI
, 272
identity, 117
inverse, 117
linear transformations of R
n
, group of, 122
muliplication table, 119
Nim, 137
octahedron, GO, 270
order of element, 119
order of group, 118
puzzle group, 150
size, see order of group
subgoup, 139
subgroup
generated by, 140
symmetric group Sn, 45, 58, 96, 122
tetrahedron, GT , 269
translations of R
n
, group of, 121
Hungarian Rings, 16, 70, 157, 167, 203
solvability, 204
integers, see Z, integers
Lights Out puzzle, 293
configuration matrix, 294
lights out matrix, 297
quiet patterns, 302
solvability, 301
strategy matrix/vector, 296
toggle matrix, Ti, j
, 294
mapping, see function
modular arithmetic, 329
natural numbers, see N, natural numbers
one person game, 22
orb, orbit, 266
Oval Track Puzzle, 16, 67, 155, 169, 187
solvability, 188
fundamental 2-cycle, 188
fundamental 3-cycle, 190
solution strategy, 192
permutation, 122, 265
2 cycle, 79
fix, fixed set, 162
mov, moved set, 162
alternating group An, 95–97, 122
array form, 51
arrow diagram, 51
associative, 41, 58
cancellation property, 45
closed under composition, 96
closed under inverses, 96
commutative, 39, 58
composition, 38, 45, 58
cycle form, 51, 52
cycle notation, see cycle form
cycle-arrow form, 51
definiton of permutation, 36
even, 84, 95, 97
fix, fixed set, 281
identity, 37, 45, 58
inverse, 40, 42, 43, 45, 57
inverse of product, 44
m-cycle, 53, 58
n-cycle, 37
odd, 84, 95
of puzzle move, 63
of puzzle position, 63
order, 47, 55, 58
parity, 84
product, see composition
sign, 84
supp, support set, see mov, moved setINDEX 337
symmetric group Sn, 45, 58, 96, 122
transposition, see 2 cycle
permutation puzzle, 22, 149
positive integers, see Z
+, positive integers
prime, 326
puzzle
permutation of move, 63
permutation of position, 63
rational numbers, see Q, rational numbers
real numbers, see R, real numbers
relation, 212
equivalence relation, 183, 214
equivalence class, 214
equivalent, 215
representative, 214
set of representatives, 215
reflexive, 183
symmetric, 183
transitive, 183
relatively prime, 128, 323
Rubik’s cube, 18, 71, 73
2×2×2, 72
orientation markings, 244
orientation numbering, 244
cubicle, 19
cubie, 18
centre, 19
corner, 19, 243
edge, 19, 243
facet, 18
primary facet, 244
home location, 19
home orientation, 19
position vector, 245
standard orientation, 243
superflip position, 262
set, 25
cardinality or size, 26
cartesian product, 26
complement, 26
difference, 26
disjoint, 26
element, 25
empty set /0, 26
equal, 26
finite, 26
intersection, 26
laws, 26
member, 25
notation, 25
partition, 211
subset, 26
union, 26
universe, 26
well defined, 25
stab, stabilizer, 265
swap, 12, 64, 99
solvability, 81, 85, 99
symmetric group Sn, 45, 58, 96, 122
symmetric group SX , 265
theorem
Burnside’s Theorem, 281
Cauchy’s Theorem, 143
Cayley’s Theorem, 145
conjugation preserves cycle structure, 176
cyclic group, 143
Euler’s Theorem, 226
Fermat’s Little Theorem, 225
finite subgroup test, 147
Fundamental Theorem of Cubology, First,
247
Lagrange’s Theorem, 142, 219, 224
one-step subgroup test, 147
orbit-stabilizer theorem, 268
parity, 84
two-step subgroup test, 140
TopSpin puzzle, see Oval Track Puzzle
